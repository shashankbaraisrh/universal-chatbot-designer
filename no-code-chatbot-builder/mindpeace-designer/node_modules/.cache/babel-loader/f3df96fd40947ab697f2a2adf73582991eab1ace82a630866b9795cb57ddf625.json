{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [history, setHistory] = useState([]);\n  const [future, setFuture] = useState([]);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = edges.find(e => e.id === selectedEdgeId);\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(edges.map(e => `${e.source}->${e.target}`));\n    const generated = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        generated.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return generated;\n  }, [nodes, edges]);\n  const allEdges = [...edges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      label,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const saveHistory = () => {\n    setHistory(prev => [...prev, {\n      nodes,\n      edges\n    }]);\n    setFuture([]);\n  };\n  const undo = () => {\n    if (history.length === 0) return;\n    const prev = history[history.length - 1];\n    setFuture(f => [{\n      nodes,\n      edges\n    }, ...f]);\n    setHistory(h => h.slice(0, -1));\n    setNodes(prev.nodes);\n    setEdges(prev.edges);\n  };\n  const redo = () => {\n    if (future.length === 0) return;\n    const next = future[0];\n    setHistory(h => [...h, {\n      nodes,\n      edges\n    }]);\n    setFuture(f => f.slice(1));\n    setNodes(next.nodes);\n    setEdges(next.edges);\n  };\n  const addNode = () => {\n    saveHistory();\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: 100 + Math.random() * 200,\n      y: 100 + Math.random() * 200\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    saveHistory();\n    setNodes(nds => nds.filter(n => n.id !== selectedNodeId));\n    setEdges(eds => eds.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(({\n      id,\n      data\n    }) => {\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const obj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length) obj.options = options;\n      if (capture) obj.capture = capture;\n      if (next) obj.next = next;\n      output.nodes[id] = obj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const importJSON = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = () => {\n      try {\n        const json = JSON.parse(reader.result);\n        const newNodes = Object.entries(json.nodes || {}).map(([id, data]) => ({\n          id,\n          data: {\n            message: data.message,\n            type: data.type,\n            options: data.options || {},\n            capture: data.capture || \"\",\n            next: data.next || \"\"\n          },\n          position: {\n            x: Math.random() * 500,\n            y: Math.random() * 500\n          },\n          type: \"default\"\n        }));\n        setNodes(newNodes);\n        setEdges([]);\n        setHistory([]);\n        setFuture([]);\n      } catch (err) {\n        alert(\"Invalid JSON file\");\n      }\n    };\n    reader.readAsText(file);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const {\n      source,\n      target\n    } = selectedEdge;\n    setEdges(eds => eds.map(e => e.id === selectedEdge.id ? {\n      ...e,\n      label: newLabel\n    } : e));\n    setNodes(nds => nds.map(node => {\n      if (node.id === source) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = target;\n          updated.data.options = newOptions;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        background: \"#f3f4f6\",\n        padding: \"10px 20px\",\n        borderRadius: 12,\n        boxShadow: \"2px 2px 10px rgba(0,0,0,0.1)\",\n        zIndex: 10,\n        fontSize: \"18px\",\n        fontWeight: \"bold\"\n      },\n      children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 70,\n        left: 10,\n        zIndex: 10,\n        display: \"flex\",\n        gap: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        style: {\n          background: \"#38bdf8\",\n          color: \"#fff\",\n          borderRadius: 8,\n          padding: \"6px 12px\"\n        },\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        style: {\n          background: \"#f87171\",\n          color: \"#fff\",\n          borderRadius: 8,\n          padding: \"6px 12px\"\n        },\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        style: {\n          background: \"#34d399\",\n          color: \"#fff\",\n          borderRadius: 8,\n          padding: \"6px 12px\"\n        },\n        children: \"Export JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          background: \"#a78bfa\",\n          color: \"#fff\",\n          borderRadius: 8,\n          padding: \"6px 12px\",\n          cursor: \"pointer\"\n        },\n        children: [\"Import JSON\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importJSON,\n          style: {\n            display: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 70,\n        right: 10,\n        zIndex: 10,\n        display: \"flex\",\n        gap: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: undo,\n        style: {\n          background: \"#facc15\",\n          color: \"#000\",\n          borderRadius: 8,\n          padding: \"6px 12px\"\n        },\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: redo,\n        style: {\n          background: \"#60a5fa\",\n          color: \"#fff\",\n          borderRadius: 8,\n          padding: \"6px 12px\"\n        },\n        children: \"Redo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 120,\n        left: 10,\n        zIndex: 10,\n        background: \"#f3f4f6\",\n        padding: 12,\n        borderRadius: 10,\n        boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\",\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Editing Node: \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: selectedNode.data.message,\n        onChange: e => updateNodeField(\"message\", e.target.value),\n        style: {\n          width: \"100%\",\n          height: 60\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedNode.data.type,\n        onChange: e => updateNodeField(\"type\", e.target.value),\n        style: {\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"choice\",\n          children: \"choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"multi_choice\",\n          children: \"multi_choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt\",\n          children: \"gpt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"end\",\n          children: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Capture Field:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: selectedNode.data.capture,\n        onChange: e => updateNodeField(\"capture\", e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Next Node ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: selectedNode.data.next,\n        onChange: e => updateNodeField(\"next\", e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 120,\n        left: 10,\n        zIndex: 10,\n        background: \"#fff\",\n        padding: 10,\n        borderRadius: 10,\n        boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\",\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Option Label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: selectedEdge.label,\n        onChange: e => updateEdgeLabel(e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        style: getNodeStyle(n.data.type)\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lWjpQHLl2QxF3WRSzZVBT5ycadc=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","history","setHistory","future","setFuture","selectedNode","find","n","selectedEdge","e","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existing","Set","map","source","target","generated","node","_node$data","has","push","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","eds","nds","updated","saveHistory","prev","undo","length","f","h","slice","redo","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","output","settings","system_prompt","gpt_model","forEach","obj","Object","keys","blob","Blob","JSON","stringify","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","importJSON","file","files","reader","FileReader","onload","json","parse","result","newNodes","entries","err","alert","readAsText","onNodeClick","_","onEdgeClick","edge","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","newOptions","width","height","children","top","left","transform","zIndex","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","onClick","color","cursor","accept","onChange","right","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [history, setHistory] = useState([]);\n  const [future, setFuture] = useState([]);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = edges.find((e) => e.id === selectedEdgeId);\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(edges.map((e) => `${e.source}->${e.target}`));\n    const generated = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        generated.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return generated;\n  }, [nodes, edges]);\n\n  const allEdges = [...edges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n      if (!label) return;\n      const edgeId = `e${params.source}-${params.target}`;\n\n      setEdges((eds) =>\n        addEdge({ ...params, id: edgeId, label, markerEnd: { type: MarkerType.ArrowClosed } }, eds)\n      );\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === params.source) {\n            const updated = { ...node };\n            if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n              updated.data.options = { ...updated.data.options, [label]: params.target };\n            } else {\n              updated.data.next = params.target;\n            }\n            return updated;\n          }\n          return node;\n        })\n      );\n    },\n    [setEdges, setNodes]\n  );\n\n  const saveHistory = () => {\n    setHistory((prev) => [...prev, { nodes, edges }]);\n    setFuture([]);\n  };\n\n  const undo = () => {\n    if (history.length === 0) return;\n    const prev = history[history.length - 1];\n    setFuture((f) => [{ nodes, edges }, ...f]);\n    setHistory((h) => h.slice(0, -1));\n    setNodes(prev.nodes);\n    setEdges(prev.edges);\n  };\n\n  const redo = () => {\n    if (future.length === 0) return;\n    const next = future[0];\n    setHistory((h) => [...h, { nodes, edges }]);\n    setFuture((f) => f.slice(1));\n    setNodes(next.nodes);\n    setEdges(next.edges);\n  };\n\n  const addNode = () => {\n    saveHistory();\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: 100 + Math.random() * 200, y: 100 + Math.random() * 200 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    saveHistory();\n    setNodes((nds) => nds.filter((n) => n.id !== selectedNodeId));\n    setEdges((eds) => eds.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(({ id, data }) => {\n      const { message, type, options, capture, next } = data;\n      const obj = { message, type };\n      if (options && Object.keys(options).length) obj.options = options;\n      if (capture) obj.capture = capture;\n      if (next) obj.next = next;\n      output.nodes[id] = obj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], { type: \"application/json\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const importJSON = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = () => {\n      try {\n        const json = JSON.parse(reader.result);\n        const newNodes = Object.entries(json.nodes || {}).map(([id, data]) => ({\n          id,\n          data: {\n            message: data.message,\n            type: data.type,\n            options: data.options || {},\n            capture: data.capture || \"\",\n            next: data.next || \"\"\n          },\n          position: { x: Math.random() * 500, y: Math.random() * 500 },\n          type: \"default\"\n        }));\n        setNodes(newNodes);\n        setEdges([]);\n        setHistory([]);\n        setFuture([]);\n      } catch (err) {\n        alert(\"Invalid JSON file\");\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNodeId ? { ...node, data: { ...node.data, [field]: value } } : node\n      )\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const { source, target } = selectedEdge;\n\n    setEdges((eds) => eds.map((e) => (e.id === selectedEdge.id ? { ...e, label: newLabel } : e)));\n\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === source) {\n          const updated = { ...node };\n          if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = target;\n            updated.data.options = newOptions;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      {/* Headline */}\n      <div style={{\n        position: \"absolute\",\n        top: 10,\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        background: \"#f3f4f6\",\n        padding: \"10px 20px\",\n        borderRadius: 12,\n        boxShadow: \"2px 2px 10px rgba(0,0,0,0.1)\",\n        zIndex: 10,\n        fontSize: \"18px\",\n        fontWeight: \"bold\"\n      }}>\n        Your AI Chatbot Designer — Fast. Visual. Code-Free\n      </div>\n\n      {/* Left side buttons */}\n      <div style={{ position: \"absolute\", top: 70, left: 10, zIndex: 10, display: \"flex\", gap: 10 }}>\n        <button onClick={addNode} style={{ background: \"#38bdf8\", color: \"#fff\", borderRadius: 8, padding: \"6px 12px\" }}>Add Node</button>\n        <button onClick={deleteNode} style={{ background: \"#f87171\", color: \"#fff\", borderRadius: 8, padding: \"6px 12px\" }}>Delete Node</button>\n        <button onClick={exportJSON} style={{ background: \"#34d399\", color: \"#fff\", borderRadius: 8, padding: \"6px 12px\" }}>Export JSON</button>\n        <label style={{ background: \"#a78bfa\", color: \"#fff\", borderRadius: 8, padding: \"6px 12px\", cursor: \"pointer\" }}>\n          Import JSON\n          <input type=\"file\" accept=\".json\" onChange={importJSON} style={{ display: \"none\" }} />\n        </label>\n      </div>\n\n      {/* Right side undo/redo */}\n      <div style={{ position: \"absolute\", top: 70, right: 10, zIndex: 10, display: \"flex\", gap: 10 }}>\n        <button onClick={undo} style={{ background: \"#facc15\", color: \"#000\", borderRadius: 8, padding: \"6px 12px\" }}>Undo</button>\n        <button onClick={redo} style={{ background: \"#60a5fa\", color: \"#fff\", borderRadius: 8, padding: \"6px 12px\" }}>Redo</button>\n      </div>\n\n      {/* Node Editor */}\n      {selectedNode && (\n        <div style={{\n          position: \"absolute\", top: 120, left: 10, zIndex: 10,\n          background: \"#f3f4f6\", padding: 12, borderRadius: 10,\n          boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\", width: 300\n        }}>\n          <h4>Editing Node: {selectedNode.id}</h4>\n          <label>Message:</label>\n          <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} />\n          <label>Type:</label>\n          <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}>\n            <option value=\"choice\">choice</option>\n            <option value=\"input\">input</option>\n            <option value=\"multi_choice\">multi_choice</option>\n            <option value=\"gpt\">gpt</option>\n            <option value=\"end\">end</option>\n          </select>\n          <label>Capture Field:</label>\n          <input value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} />\n          <label>Next Node ID:</label>\n          <input value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} />\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div style={{\n          position: \"absolute\", top: 120, left: 10, zIndex: 10,\n          background: \"#fff\", padding: 10, borderRadius: 10,\n          boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\", width: 300\n        }}>\n          <h4>Editing Edge</h4>\n          <label>Option Label:</label>\n          <input value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} />\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({ ...n, style: getNodeStyle(n.data.type) }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}