{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\"; // <-- ensure this is inside src/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatFlowData, setChatFlowData] = useState(null);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setChatFlowData(payload);\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Check backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Backend not running. Check Flask server.\");\n    }\n  };\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: exportJSON,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => historyIndex.current > 0 && setNodes(history.current[--historyIndex.current].nodes),\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => historyIndex.current < history.current.length - 1 && setNodes(history.current[++historyIndex.current].nodes),\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          padding: 12,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\",\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Option Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedEdge.label,\n          onChange: e => updateEdgeLabel(e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatbotPanel, {\n      chatbotReady: chatbotReady,\n      chatFlowData: chatFlowData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0HGGKmhoy0fOpXCYmEcAACRijLk=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","ChatbotPanel","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","chatFlowData","setChatFlowData","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","length","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","alert","error","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","width","height","display","children","flex","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","gap","color","onClick","right","onChange","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\"; // <-- ensure this is inside src/\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatFlowData, setChatFlowData] = useState(null);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = (params) => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n    if (!label) return;\n\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: { type: MarkerType.ArrowClosed },\n      label\n    }, manualEdges);\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === params.source) {\n        const updated = { ...node };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = { ...updated.data.options, [label]: params.target };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setChatFlowData(payload);\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Check backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Backend not running. Check Flask server.\");\n    }\n  };\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n    const newNode = {\n      id: newId,\n      data: { message: `This is node ${newId}`, type: \"choice\", options: {}, capture: \"\", next: \"\" },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId ? { ...node, data: { ...node.data, [field]: value } } : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map((edge) => edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge);\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div style={{ textAlign: \"center\", padding: \"12px\", background: \"#f1f5f9\", borderRadius: \"8px\", fontSize: \"18px\", fontWeight: \"bold\", fontFamily: \"Segoe UI, sans-serif\", width: \"fit-content\", margin: \"10px auto\", zIndex: 20, position: \"relative\" }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={addNode}>Add Node</button>\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={exportJSON}>Export JSON</button>\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={deleteNode}>Delete Node</button>\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={submitFlow}>Submit Flow</button>\n        </div>\n\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => historyIndex.current > 0 && setNodes(history.current[--historyIndex.current].nodes)}>Undo</button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => historyIndex.current < history.current.length - 1 && setNodes(history.current[++historyIndex.current].nodes)}>Redo</button>\n        </div>\n\n        {selectedNode && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f8fafc\", padding: 12, border: \"1px solid #d1d5db\", borderRadius: \"10px\", width: 300, boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Node: {selectedNode.id}</h4>\n            <label>Message:</label>\n            <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} />\n            <label>Type:</label>\n            <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}>\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n            <label>Capture Field:</label>\n            <input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} />\n            <label>Next Node ID:</label>\n            <input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        {selectedEdge && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f9fafb\", padding: 12, border: \"1px solid #ccc\", borderRadius: \"8px\", width: \"300px\", boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Edge</h4>\n            <label>Option Label:</label>\n            <input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message }, style: getNodeStyle(n.data.type) }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Panel */}\n      <ChatbotPanel chatbotReady={chatbotReady} chatFlowData={chatFlowData} />\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACxD,OAAOC,SAAS,IACdC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,OAAO,EACPC,UAAU,QACL,WAAW;AAClB,OAAO,0BAA0B;AACjC,OAAOC,YAAY,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE;IACJC,OAAO,EACL,oHAAoH;IACtHC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE,CAAC,CAAC;IACXC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE;EACR,CAAC;EACDC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC;EAC1BN,IAAI,EAAE;AACR,CAAC,CACF;AAED,MAAMO,YAAY,GAAG,EAAE;AACvB,IAAIC,WAAW,GAAG,CAAC;AAEnB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGxB,aAAa,CAACO,YAAY,CAAC;EACpE,MAAM,CAACkB,WAAW,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAG1B,aAAa,CAACiB,YAAY,CAAC;EAC1E,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACqC,cAAc,EAAEC,iBAAiB,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACuC,YAAY,EAAEC,eAAe,CAAC,GAAGxC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACyC,YAAY,EAAEC,eAAe,CAAC,GAAG1C,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAM2C,OAAO,GAAGzC,MAAM,CAAC,CAAC;IAAE2B,KAAK,EAAEf,YAAY;IAAE8B,KAAK,EAAEnB;EAAa,CAAC,CAAC,CAAC;EACtE,MAAMoB,YAAY,GAAG3C,MAAM,CAAC,CAAC,CAAC;EAE9B,MAAM4C,YAAY,GAAGjB,KAAK,CAACkB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACjC,EAAE,KAAKoB,cAAc,CAAC;EAC/D,MAAMc,YAAY,GAAGjB,WAAW,CAACe,IAAI,CAAEG,CAAC,IAAKA,CAAC,CAACnC,EAAE,KAAKsB,cAAc,CAAC;EAErE,MAAMc,aAAa,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC5C,MAAMC,YAAY,GAAG;MAAEzB,KAAK,EAAEuB,QAAQ;MAAER,KAAK,EAAES;IAAS,CAAC;IACzD,MAAME,UAAU,GAAGZ,OAAO,CAACa,OAAO,CAACC,KAAK,CAAC,CAAC,EAAEZ,YAAY,CAACW,OAAO,GAAG,CAAC,CAAC;IACrED,UAAU,CAACG,IAAI,CAACJ,YAAY,CAAC;IAC7BX,OAAO,CAACa,OAAO,GAAGD,UAAU;IAC5BV,YAAY,CAACW,OAAO,EAAE;EACxB,CAAC;EAED,MAAMG,YAAY,GAAIzC,IAAI,IAAK;IAC7B,MAAM0C,SAAS,GAAG;MAChBC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,kBAAkB;MAC7BC,UAAU,EAAE,UAAU;MACtBC,QAAQ,EAAE,YAAY;MACtBC,UAAU,EAAE,sBAAsB;MAClCC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE;IACZ,CAAC;IACD,QAAQlD,IAAI;MACV,KAAK,QAAQ;QACX,OAAO;UAAE,GAAG0C,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,OAAO;QACV,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,cAAc;QACjB,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,KAAK;QACR,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,KAAK;QACR,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E;QACE,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;IAC/E;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAGtE,OAAO,CAAC,MAAM;IACvC,MAAMuE,mBAAmB,GAAG,IAAIC,GAAG,CAACzC,WAAW,CAAC0C,GAAG,CAAExB,CAAC,IAAK,GAAGA,CAAC,CAACyB,MAAM,KAAKzB,CAAC,CAAC0B,MAAM,EAAE,CAAC,CAAC;IACvF,MAAMC,SAAS,GAAG,EAAE;IACpB,KAAK,MAAMC,IAAI,IAAIjD,KAAK,EAAE;MAAA,IAAAkD,UAAA;MACxB,MAAMH,MAAM,IAAAG,UAAA,GAAGD,IAAI,CAAC9D,IAAI,cAAA+D,UAAA,uBAATA,UAAA,CAAW1D,IAAI;MAC9B,IAAIuD,MAAM,IAAI,CAACJ,mBAAmB,CAACQ,GAAG,CAAC,GAAGF,IAAI,CAAC/D,EAAE,KAAK6D,MAAM,EAAE,CAAC,EAAE;QAC/DC,SAAS,CAACnB,IAAI,CAAC;UACb3C,EAAE,EAAE,QAAQ+D,IAAI,CAAC/D,EAAE,IAAI6D,MAAM,EAAE;UAC/BD,MAAM,EAAEG,IAAI,CAAC/D,EAAE;UACf6D,MAAM;UACNK,QAAQ,EAAE,KAAK;UACf/D,IAAI,EAAE,SAAS;UACfgE,KAAK,EAAE;YAAEC,eAAe,EAAE,KAAK;YAAEC,MAAM,EAAE;UAAO,CAAC;UACjDC,SAAS,EAAE;YAAEnE,IAAI,EAAER,UAAU,CAAC4E;UAAY,CAAC;UAC3CC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;IACF;IACA,OAAOV,SAAS;EAClB,CAAC,EAAE,CAAChD,KAAK,EAAEG,WAAW,CAAC,CAAC;EAExB,MAAMwD,QAAQ,GAAG,CAAC,GAAGxD,WAAW,EAAE,GAAGuC,kBAAkB,CAAC;EAExD,MAAMkB,SAAS,GAAIC,MAAM,IAAK;IAC5B,MAAMH,KAAK,GAAGI,MAAM,CAAC,uDAAuD,EAAE,EAAE,CAAC;IACjF,IAAI,CAACJ,KAAK,EAAE;IAEZ,MAAMK,MAAM,GAAG,IAAIF,MAAM,CAACf,MAAM,IAAIe,MAAM,CAACd,MAAM,EAAE;IACnD,MAAMiB,YAAY,GAAGpF,OAAO,CAAC;MAC3B,GAAGiF,MAAM;MACT3E,EAAE,EAAE6E,MAAM;MACVP,SAAS,EAAE;QAAEnE,IAAI,EAAER,UAAU,CAAC4E;MAAY,CAAC;MAC3CC;IACF,CAAC,EAAEvD,WAAW,CAAC;IAEf,MAAM8D,YAAY,GAAGjE,KAAK,CAAC6C,GAAG,CAAEI,IAAI,IAAK;MACvC,IAAIA,IAAI,CAAC/D,EAAE,KAAK2E,MAAM,CAACf,MAAM,EAAE;QAC7B,MAAMoB,OAAO,GAAG;UAAE,GAAGjB;QAAK,CAAC;QAC3B,IAAIA,IAAI,CAAC9D,IAAI,CAACE,IAAI,KAAK,QAAQ,IAAI4D,IAAI,CAAC9D,IAAI,CAACE,IAAI,KAAK,cAAc,EAAE;UACpE6E,OAAO,CAAC/E,IAAI,CAACG,OAAO,GAAG;YAAE,GAAG4E,OAAO,CAAC/E,IAAI,CAACG,OAAO;YAAE,CAACoE,KAAK,GAAGG,MAAM,CAACd;UAAO,CAAC;QAC5E,CAAC,MAAM;UACLmB,OAAO,CAAC/E,IAAI,CAACK,IAAI,GAAGqE,MAAM,CAACd,MAAM;QACnC;QACA,OAAOmB,OAAO;MAChB;MACA,OAAOjB,IAAI;IACb,CAAC,CAAC;IAEF7C,QAAQ,CAAC4D,YAAY,CAAC;IACtB/D,QAAQ,CAACgE,YAAY,CAAC;IACtB3C,aAAa,CAAC2C,YAAY,EAAED,YAAY,CAAC;EAC3C,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,MAAM,GAAG;MACbC,QAAQ,EAAE;QACRC,aAAa,EACX,4JAA4J;QAC9JC,SAAS,EAAE;MACb,CAAC;MACDvE,KAAK,EAAE,CAAC;IACV,CAAC;IACDA,KAAK,CAACwE,OAAO,CAAEvB,IAAI,IAAK;MACtB,MAAM;QAAE/D,EAAE;QAAEC;MAAK,CAAC,GAAG8D,IAAI;MACzB,MAAM;QAAE7D,OAAO;QAAEC,IAAI;QAAEC,OAAO;QAAEC,OAAO;QAAEC;MAAK,CAAC,GAAGL,IAAI;MACtD,MAAMsF,OAAO,GAAG;QAAErF,OAAO;QAAEC;MAAK,CAAC;MACjC,IAAIC,OAAO,IAAIoF,MAAM,CAACC,IAAI,CAACrF,OAAO,CAAC,CAACsF,MAAM,GAAG,CAAC,EAAEH,OAAO,CAACnF,OAAO,GAAGA,OAAO;MACzE,IAAIC,OAAO,EAAEkF,OAAO,CAAClF,OAAO,GAAGA,OAAO;MACtC,IAAIC,IAAI,EAAEiF,OAAO,CAACjF,IAAI,GAAGA,IAAI;MAC7B4E,MAAM,CAACpE,KAAK,CAACd,EAAE,CAAC,GAAGuF,OAAO;IAC5B,CAAC,CAAC;IACF,OAAOL,MAAM;EACf,CAAC;EAED,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,OAAO,GAAGX,aAAa,CAAC,CAAC;IAC/B,IAAI;MACF,MAAMY,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QACtDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAC9B,CAAC,CAAC;MACF,IAAIC,GAAG,CAACO,EAAE,EAAE;QACVzE,eAAe,CAACiE,OAAO,CAAC;QACxBnE,eAAe,CAAC,IAAI,CAAC;QACrB4E,KAAK,CAAC,qDAAqD,CAAC;MAC9D,CAAC,MAAM;QACLA,KAAK,CAAC,wCAAwC,CAAC;MACjD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdD,KAAK,CAAC,0CAA0C,CAAC;IACnD;EACF,CAAC;EAED,MAAME,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,KAAK,GAAG7F,WAAW,CAAC8F,QAAQ,CAAC,CAAC;IACpC9F,WAAW,EAAE;IACb,MAAMJ,QAAQ,GAAGa,cAAc,GAC3B;MACEZ,CAAC,EAAEM,KAAK,CAACkB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACjC,EAAE,KAAKoB,cAAc,CAAC,CAACb,QAAQ,CAACC,CAAC,GAAG,GAAG;MAC9DC,CAAC,EAAEK,KAAK,CAACkB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACjC,EAAE,KAAKoB,cAAc,CAAC,CAACb,QAAQ,CAACE,CAAC,GAAG;IAC7D,CAAC,GACD;MAAED,CAAC,EAAEkG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAAElG,CAAC,EAAEiG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;IAAI,CAAC;IACtD,MAAMC,OAAO,GAAG;MACd5G,EAAE,EAAEwG,KAAK;MACTvG,IAAI,EAAE;QAAEC,OAAO,EAAE,gBAAgBsG,KAAK,EAAE;QAAErG,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE,CAAC,CAAC;QAAEC,OAAO,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG,CAAC;MAC9FC,QAAQ;MACRJ,IAAI,EAAE;IACR,CAAC;IACD,MAAM4E,YAAY,GAAG,CAAC,GAAGjE,KAAK,EAAE8F,OAAO,CAAC;IACxC7F,QAAQ,CAACgE,YAAY,CAAC;IACtB3C,aAAa,CAAC2C,YAAY,EAAE9D,WAAW,CAAC;EAC1C,CAAC;EAED,MAAM4F,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI,CAACzF,cAAc,EAAE;IACrB,MAAM2D,YAAY,GAAGjE,KAAK,CAACgG,MAAM,CAAE7E,CAAC,IAAKA,CAAC,CAACjC,EAAE,KAAKoB,cAAc,CAAC;IACjE,MAAM0D,YAAY,GAAG7D,WAAW,CAAC6F,MAAM,CAAE3E,CAAC,IAAKA,CAAC,CAACyB,MAAM,KAAKxC,cAAc,IAAIe,CAAC,CAAC0B,MAAM,KAAKzC,cAAc,CAAC;IAC1GL,QAAQ,CAACgE,YAAY,CAAC;IACtB7D,QAAQ,CAAC4D,YAAY,CAAC;IACtBzD,iBAAiB,CAAC,IAAI,CAAC;IACvBe,aAAa,CAAC2C,YAAY,EAAED,YAAY,CAAC;EAC3C,CAAC;EAED,MAAMiC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAM7B,MAAM,GAAGD,aAAa,CAAC,CAAC;IAC9B,MAAM+B,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACf,IAAI,CAACC,SAAS,CAACjB,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;MAAE/E,IAAI,EAAE;IAAmB,CAAC,CAAC;IACtF,MAAM+G,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;IACrC,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;IACfG,IAAI,CAACI,QAAQ,GAAG,wBAAwB;IACxCH,QAAQ,CAACrB,IAAI,CAACyB,WAAW,CAACL,IAAI,CAAC;IAC/BA,IAAI,CAACM,KAAK,CAAC,CAAC;IACZL,QAAQ,CAACrB,IAAI,CAAC2B,WAAW,CAACP,IAAI,CAAC;EACjC,CAAC;EAED,MAAMQ,eAAe,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACxC,MAAMhD,YAAY,GAAGjE,KAAK,CAAC6C,GAAG,CAAEI,IAAI,IAClCA,IAAI,CAAC/D,EAAE,KAAKoB,cAAc,GAAG;MAAE,GAAG2C,IAAI;MAAE9D,IAAI,EAAE;QAAE,GAAG8D,IAAI,CAAC9D,IAAI;QAAE,CAAC6H,KAAK,GAAGC;MAAM;IAAE,CAAC,GAAGhE,IACrF,CAAC;IACDhD,QAAQ,CAACgE,YAAY,CAAC;IACtB3C,aAAa,CAAC2C,YAAY,EAAE9D,WAAW,CAAC;EAC1C,CAAC;EAED,MAAM+G,eAAe,GAAIC,QAAQ,IAAK;IACpC,IAAI,CAAC/F,YAAY,EAAE;IACnB,MAAMgG,QAAQ,GAAGhG,YAAY,CAACsC,KAAK;IACnC,MAAM2D,QAAQ,GAAGjG,YAAY,CAAC0B,MAAM;IACpC,MAAMwE,QAAQ,GAAGlG,YAAY,CAAC2B,MAAM;IACpC,MAAMiB,YAAY,GAAG7D,WAAW,CAAC0C,GAAG,CAAE0E,IAAI,IAAKA,IAAI,CAACrI,EAAE,KAAKkC,YAAY,CAAClC,EAAE,GAAG;MAAE,GAAGqI,IAAI;MAAE7D,KAAK,EAAEyD;IAAS,CAAC,GAAGI,IAAI,CAAC;IACjH,MAAMtD,YAAY,GAAGjE,KAAK,CAAC6C,GAAG,CAAEI,IAAI,IAAK;MACvC,IAAIA,IAAI,CAAC/D,EAAE,KAAKmI,QAAQ,EAAE;QACxB,MAAMnD,OAAO,GAAG;UAAE,GAAGjB;QAAK,CAAC;QAC3B,IAAIiB,OAAO,CAAC/E,IAAI,CAACE,IAAI,KAAK,QAAQ,IAAI6E,OAAO,CAAC/E,IAAI,CAACE,IAAI,KAAK,cAAc,EAAE;UAC1E,MAAMmI,UAAU,GAAG;YAAE,GAAGtD,OAAO,CAAC/E,IAAI,CAACG;UAAQ,CAAC;UAC9C,OAAOkI,UAAU,CAACJ,QAAQ,CAAC;UAC3BI,UAAU,CAACL,QAAQ,CAAC,GAAGG,QAAQ;UAC/BpD,OAAO,CAAC/E,IAAI,CAACG,OAAO,GAAGkI,UAAU;QACnC,CAAC,MAAM;UACLtD,OAAO,CAAC/E,IAAI,CAACK,IAAI,GAAG8H,QAAQ;QAC9B;QACA,OAAOpD,OAAO;MAChB;MACA,OAAOjB,IAAI;IACb,CAAC,CAAC;IACF7C,QAAQ,CAAC4D,YAAY,CAAC;IACtB/D,QAAQ,CAACgE,YAAY,CAAC;IACtB3C,aAAa,CAAC2C,YAAY,EAAED,YAAY,CAAC;EAC3C,CAAC;EAED,MAAMyD,WAAW,GAAGA,CAACC,CAAC,EAAEzE,IAAI,KAAK;IAC/B1C,iBAAiB,CAAC0C,IAAI,CAAC/D,EAAE,CAAC;IAC1BuB,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAMkH,WAAW,GAAGA,CAACD,CAAC,EAAEH,IAAI,KAAK;IAC/B9G,iBAAiB,CAAC8G,IAAI,CAACrI,EAAE,CAAC;IAC1BqB,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,oBACEvB,OAAA;IAAKqE,KAAK,EAAE;MAAEuE,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC/D/I,OAAA;MAAKqE,KAAK,EAAE;QAAE2E,IAAI,EAAE,CAAC;QAAEvI,QAAQ,EAAE;MAAW,CAAE;MAAAsI,QAAA,gBAC5C/I,OAAA;QAAKqE,KAAK,EAAE;UAAE4E,SAAS,EAAE,QAAQ;UAAEhG,OAAO,EAAE,MAAM;UAAEO,UAAU,EAAE,SAAS;UAAER,YAAY,EAAE,KAAK;UAAEkG,QAAQ,EAAE,MAAM;UAAEC,UAAU,EAAE,MAAM;UAAE9F,UAAU,EAAE,sBAAsB;UAAEuF,KAAK,EAAE,aAAa;UAAEQ,MAAM,EAAE,WAAW;UAAEC,MAAM,EAAE,EAAE;UAAE5I,QAAQ,EAAE;QAAW,CAAE;QAAAsI,QAAA,EAAC;MAEzP;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAENzJ,OAAA;QAAKqE,KAAK,EAAE;UAAE5D,QAAQ,EAAE,UAAU;UAAEiJ,GAAG,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEN,MAAM,EAAE,EAAE;UAAEP,OAAO,EAAE,MAAM;UAAEc,GAAG,EAAE;QAAO,CAAE;QAAAb,QAAA,gBAChG/I,OAAA;UAAQqE,KAAK,EAAE;YAAEb,UAAU,EAAE,SAAS;YAAEqG,KAAK,EAAE,OAAO;YAAE7G,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE;UAAO,CAAE;UAACqG,OAAO,EAAErD,OAAQ;UAAAsC,QAAA,EAAC;QAAQ;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnJzJ,OAAA;UAAQqE,KAAK,EAAE;YAAEb,UAAU,EAAE,SAAS;YAAEqG,KAAK,EAAE,OAAO;YAAE7G,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE;UAAO,CAAE;UAACqG,OAAO,EAAE7C,UAAW;UAAA8B,QAAA,EAAC;QAAW;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzJzJ,OAAA;UAAQqE,KAAK,EAAE;YAAEb,UAAU,EAAE,SAAS;YAAEqG,KAAK,EAAE,OAAO;YAAE7G,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE;UAAO,CAAE;UAACqG,OAAO,EAAE/C,UAAW;UAAAgC,QAAA,EAAC;QAAW;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzJzJ,OAAA;UAAQqE,KAAK,EAAE;YAAEb,UAAU,EAAE,SAAS;YAAEqG,KAAK,EAAE,OAAO;YAAE7G,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE;UAAO,CAAE;UAACqG,OAAO,EAAEjE,UAAW;UAAAkD,QAAA,EAAC;QAAW;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtJ,CAAC,eAENzJ,OAAA;QAAKqE,KAAK,EAAE;UAAE5D,QAAQ,EAAE,UAAU;UAAEiJ,GAAG,EAAE,EAAE;UAAEK,KAAK,EAAE,EAAE;UAAEV,MAAM,EAAE,EAAE;UAAEP,OAAO,EAAE,MAAM;UAAEc,GAAG,EAAE;QAAO,CAAE;QAAAb,QAAA,gBACjG/I,OAAA;UAAQqE,KAAK,EAAE;YAAEb,UAAU,EAAE,SAAS;YAAEqG,KAAK,EAAE,OAAO;YAAE7G,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE;UAAO,CAAE;UAACqG,OAAO,EAAEA,CAAA,KAAM9H,YAAY,CAACW,OAAO,GAAG,CAAC,IAAI1B,QAAQ,CAACa,OAAO,CAACa,OAAO,CAAC,EAAEX,YAAY,CAACW,OAAO,CAAC,CAAC3B,KAAK,CAAE;UAAA+H,QAAA,EAAC;QAAI;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjOzJ,OAAA;UAAQqE,KAAK,EAAE;YAAEb,UAAU,EAAE,SAAS;YAAEqG,KAAK,EAAE,OAAO;YAAE7G,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE;UAAO,CAAE;UAACqG,OAAO,EAAEA,CAAA,KAAM9H,YAAY,CAACW,OAAO,GAAGb,OAAO,CAACa,OAAO,CAACiD,MAAM,GAAG,CAAC,IAAI3E,QAAQ,CAACa,OAAO,CAACa,OAAO,CAAC,EAAEX,YAAY,CAACW,OAAO,CAAC,CAAC3B,KAAK,CAAE;UAAA+H,QAAA,EAAC;QAAI;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvP,CAAC,EAELxH,YAAY,iBACXjC,OAAA;QAAKqE,KAAK,EAAE;UAAE5D,QAAQ,EAAE,UAAU;UAAEiJ,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE,EAAE;UAAEN,MAAM,EAAE,EAAE;UAAE7F,UAAU,EAAE,SAAS;UAAEP,OAAO,EAAE,EAAE;UAAEQ,MAAM,EAAE,mBAAmB;UAAET,YAAY,EAAE,MAAM;UAAE4F,KAAK,EAAE,GAAG;UAAE1F,SAAS,EAAE;QAA+B,CAAE;QAAA6F,QAAA,gBACjN/I,OAAA;UAAA+I,QAAA,GAAI,gBAAc,EAAC9G,YAAY,CAAC/B,EAAE;QAAA;UAAAoJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxCzJ,OAAA;UAAA+I,QAAA,EAAO;QAAQ;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvBzJ,OAAA;UAAUiI,KAAK,EAAEhG,YAAY,CAAC9B,IAAI,CAACC,OAAQ;UAAC4J,QAAQ,EAAG3H,CAAC,IAAK0F,eAAe,CAAC,SAAS,EAAE1F,CAAC,CAAC0B,MAAM,CAACkE,KAAK,CAAE;UAAC5D,KAAK,EAAE;YAAEuE,KAAK,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAG;QAAE;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACjJzJ,OAAA;UAAA+I,QAAA,EAAO;QAAK;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpBzJ,OAAA;UAAQiI,KAAK,EAAEhG,YAAY,CAAC9B,IAAI,CAACE,IAAK;UAAC2J,QAAQ,EAAG3H,CAAC,IAAK0F,eAAe,CAAC,MAAM,EAAE1F,CAAC,CAAC0B,MAAM,CAACkE,KAAK,CAAE;UAAC5D,KAAK,EAAE;YAAEuE,KAAK,EAAE;UAAO,CAAE;UAAAG,QAAA,gBACxH/I,OAAA;YAAQiI,KAAK,EAAC,QAAQ;YAAAc,QAAA,EAAC;UAAM;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACtCzJ,OAAA;YAAQiI,KAAK,EAAC,OAAO;YAAAc,QAAA,EAAC;UAAK;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCzJ,OAAA;YAAQiI,KAAK,EAAC,cAAc;YAAAc,QAAA,EAAC;UAAY;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAClDzJ,OAAA;YAAQiI,KAAK,EAAC,KAAK;YAAAc,QAAA,EAAC;UAAG;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAChCzJ,OAAA;YAAQiI,KAAK,EAAC,KAAK;YAAAc,QAAA,EAAC;UAAG;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eACTzJ,OAAA;UAAA+I,QAAA,EAAO;QAAc;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC7BzJ,OAAA;UAAOK,IAAI,EAAC,MAAM;UAAC4H,KAAK,EAAEhG,YAAY,CAAC9B,IAAI,CAACI,OAAQ;UAACyJ,QAAQ,EAAG3H,CAAC,IAAK0F,eAAe,CAAC,SAAS,EAAE1F,CAAC,CAAC0B,MAAM,CAACkE,KAAK,CAAE;UAAC5D,KAAK,EAAE;YAAEuE,KAAK,EAAE;UAAO;QAAE;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC9IzJ,OAAA;UAAA+I,QAAA,EAAO;QAAa;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC5BzJ,OAAA;UAAOK,IAAI,EAAC,MAAM;UAAC4H,KAAK,EAAEhG,YAAY,CAAC9B,IAAI,CAACK,IAAK;UAACwJ,QAAQ,EAAG3H,CAAC,IAAK0F,eAAe,CAAC,MAAM,EAAE1F,CAAC,CAAC0B,MAAM,CAACkE,KAAK,CAAE;UAAC5D,KAAK,EAAE;YAAEuE,KAAK,EAAE;UAAO;QAAE;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrI,CACN,EAEArH,YAAY,iBACXpC,OAAA;QAAKqE,KAAK,EAAE;UAAE5D,QAAQ,EAAE,UAAU;UAAEiJ,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE,EAAE;UAAEN,MAAM,EAAE,EAAE;UAAE7F,UAAU,EAAE,SAAS;UAAEP,OAAO,EAAE,EAAE;UAAEQ,MAAM,EAAE,gBAAgB;UAAET,YAAY,EAAE,KAAK;UAAE4F,KAAK,EAAE,OAAO;UAAE1F,SAAS,EAAE;QAA+B,CAAE;QAAA6F,QAAA,gBACjN/I,OAAA;UAAA+I,QAAA,EAAI;QAAY;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrBzJ,OAAA;UAAA+I,QAAA,EAAO;QAAa;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC5BzJ,OAAA;UAAOK,IAAI,EAAC,MAAM;UAAC4H,KAAK,EAAE7F,YAAY,CAACsC,KAAM;UAACsF,QAAQ,EAAG3H,CAAC,IAAK6F,eAAe,CAAC7F,CAAC,CAAC0B,MAAM,CAACkE,KAAK,CAAE;UAAC5D,KAAK,EAAE;YAAEuE,KAAK,EAAE;UAAO;QAAE;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzH,CACN,eAEDzJ,OAAA,CAACV,SAAS;QACR0B,KAAK,EAAEA,KAAK,CAAC6C,GAAG,CAAE1B,CAAC,KAAM;UAAE,GAAGA,CAAC;UAAEhC,IAAI,EAAE;YAAE,GAAGgC,CAAC,CAAChC,IAAI;YAAEuE,KAAK,EAAEvC,CAAC,CAAChC,IAAI,CAACC;UAAQ,CAAC;UAAEiE,KAAK,EAAEvB,YAAY,CAACX,CAAC,CAAChC,IAAI,CAACE,IAAI;QAAE,CAAC,CAAC,CAAE;QAClH0B,KAAK,EAAE4C,QAAS;QAChBzD,aAAa,EAAEA,aAAc;QAC7BG,aAAa,EAAEA,aAAc;QAC7BuD,SAAS,EAAEA,SAAU;QACrB6D,WAAW,EAAEA,WAAY;QACzBE,WAAW,EAAEA,WAAY;QACzBsB,OAAO;QACPC,aAAa,EAAC,QAAQ;QAAAnB,QAAA,gBAEtB/I,OAAA,CAACT,OAAO;UAAA+J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXzJ,OAAA,CAACR,QAAQ;UAAA8J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACZzJ,OAAA,CAACP,UAAU;UAAA6J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eAGNzJ,OAAA,CAACF,YAAY;MAAC4B,YAAY,EAAEA,YAAa;MAACE,YAAY,EAAEA;IAAa;MAAA0H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV;AAAC1I,EAAA,CAzSuBD,GAAG;EAAA,QACgBpB,aAAa,EACPC,aAAa;AAAA;AAAAwK,EAAA,GAFtCrJ,GAAG;AAAA,IAAAqJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}