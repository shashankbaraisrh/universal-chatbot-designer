{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [conversationData, setConversationData] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [userInputs, setUserInputs] = useState({});\n  const [gptStarted, setGptStarted] = useState(false);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    setConversationData(payload);\n    setChatbotReady(true);\n    setCurrentNodeId(\"1\");\n    setChatHistory([{\n      sender: \"bot\",\n      message: payload.nodes[\"1\"].message\n    }]);\n  };\n  const sendMessage = async () => {\n    if (!conversationData || !currentNodeId) return;\n    const node = conversationData.nodes[currentNodeId];\n    const newHistory = [...chatHistory, {\n      sender: \"user\",\n      message: userMessage\n    }];\n\n    // Flow logic\n    if (!gptStarted && node) {\n      if (node.capture) {\n        setUserInputs({\n          ...userInputs,\n          [node.capture]: userMessage\n        });\n      }\n      let nextId = \"\";\n      if (node.type === \"choice\" || node.type === \"multi_choice\") {\n        var _node$options;\n        nextId = ((_node$options = node.options) === null || _node$options === void 0 ? void 0 : _node$options[userMessage.toLowerCase()]) || \"\";\n      } else {\n        nextId = node.next;\n      }\n      if (nextId && conversationData.nodes[nextId]) {\n        const nextNode = conversationData.nodes[nextId];\n        setCurrentNodeId(nextId);\n        setChatHistory([...newHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }]);\n        if (nextNode.type === \"gpt\") {\n          setGptStarted(true);\n        }\n      } else {\n        setChatHistory([...newHistory, {\n          sender: \"bot\",\n          message: \"Thank you for sharing. Let's continue...\"\n        }]);\n      }\n    } else {\n      // GPT takeover\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMessage,\n          summary: JSON.stringify(userInputs),\n          system_prompt: conversationData.settings.system_prompt,\n          gpt_model: conversationData.settings.gpt_model\n        })\n      });\n      const data = await res.json();\n      const reply = data.reply || \"Sorry, I couldn't understand that.\";\n      setChatHistory([...newHistory, {\n        sender: \"bot\",\n        message: reply\n      }]);\n    }\n    setUserMessage(\"\");\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: exportJSON,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            marginBottom: 8\n          },\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => updateNodeField(\"message\", e.target.value),\n            style: {\n              width: \"100%\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => updateNodeField(\"type\", e.target.value),\n            style: {\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 161\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 199\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 235\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 285\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 317\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => updateNodeField(\"capture\", e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => updateNodeField(\"next\", e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10\n        },\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          overflowY: \"auto\",\n          marginBottom: 10\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && sendMessage(),\n          placeholder: \"Type your message...\",\n          style: {\n            width: \"100%\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            marginBottom: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NejjFrZBKj7bWXgQmXe8TmQNhOg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","conversationData","setConversationData","chatHistory","setChatHistory","userMessage","setUserMessage","currentNodeId","setCurrentNodeId","userInputs","setUserInputs","gptStarted","setGptStarted","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","output","getExportJSON","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","sender","sendMessage","nextId","_node$options","toLowerCase","nextNode","res","fetch","method","headers","summary","json","reply","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","width","height","display","children","flex","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","gap","color","onClick","fitView","edgeLabelMode","marginBottom","onChange","borderLeft","flexDirection","justifyContent","flexGrow","overflowY","entry","index","alignSelf","onKeyDown","key","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [conversationData, setConversationData] = useState(null);\n\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [userInputs, setUserInputs] = useState({});\n  const [gptStarted, setGptStarted] = useState(false);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    setConversationData(payload);\n    setChatbotReady(true);\n    setCurrentNodeId(\"1\");\n    setChatHistory([{ sender: \"bot\", message: payload.nodes[\"1\"].message }]);\n  };\n\n  const sendMessage = async () => {\n    if (!conversationData || !currentNodeId) return;\n\n    const node = conversationData.nodes[currentNodeId];\n    const newHistory = [...chatHistory, { sender: \"user\", message: userMessage }];\n\n    // Flow logic\n    if (!gptStarted && node) {\n      if (node.capture) {\n        setUserInputs({ ...userInputs, [node.capture]: userMessage });\n      }\n\n      let nextId = \"\";\n      if (node.type === \"choice\" || node.type === \"multi_choice\") {\n        nextId = node.options?.[userMessage.toLowerCase()] || \"\";\n      } else {\n        nextId = node.next;\n      }\n\n      if (nextId && conversationData.nodes[nextId]) {\n        const nextNode = conversationData.nodes[nextId];\n        setCurrentNodeId(nextId);\n        setChatHistory([...newHistory, { sender: \"bot\", message: nextNode.message }]);\n\n        if (nextNode.type === \"gpt\") {\n          setGptStarted(true);\n        }\n      } else {\n        setChatHistory([...newHistory, { sender: \"bot\", message: \"Thank you for sharing. Let's continue...\" }]);\n      }\n    } else {\n      // GPT takeover\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          message: userMessage,\n          summary: JSON.stringify(userInputs),\n          system_prompt: conversationData.settings.system_prompt,\n          gpt_model: conversationData.settings.gpt_model\n        })\n      });\n\n      const data = await res.json();\n      const reply = data.reply || \"Sorry, I couldn't understand that.\";\n      setChatHistory([...newHistory, { sender: \"bot\", message: reply }]);\n    }\n\n    setUserMessage(\"\");\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId ? { ...node, data: { ...node.data, [field]: value } } : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div style={{ textAlign: \"center\", padding: \"12px\", background: \"#f1f5f9\", boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\", borderRadius: \"8px\", fontSize: \"18px\", fontWeight: \"bold\", fontFamily: \"Segoe UI, sans-serif\", width: \"fit-content\", margin: \"10px auto\", zIndex: 20, position: \"relative\" }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={addNode}>Add Node</button>\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={exportJSON}>Export JSON</button>\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={deleteNode}>Delete Node</button>\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={submitFlow}>Submit Flow</button>\n        </div>\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message }, style: getNodeStyle(n.data.type) }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n\n        {/* Node Editor */}\n        {selectedNode && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f8fafc\", padding: 12, border: \"1px solid #d1d5db\", borderRadius: \"10px\", width: 300, boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4 style={{ marginBottom: 8 }}>Editing Node: {selectedNode.id}</h4>\n            <div><label>Message:</label><textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} /></div>\n            <div><label>Type:</label><select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}><option value=\"choice\">choice</option><option value=\"input\">input</option><option value=\"multi_choice\">multi_choice</option><option value=\"gpt\">gpt</option><option value=\"end\">end</option></select></div>\n            <div><label>Capture Field:</label><input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} /></div>\n            <div><label>Next Node ID:</label><input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} /></div>\n          </div>\n        )}\n      </div>\n\n      {/* Chatbot Panel */}\n      <div style={{ width: \"320px\", padding: 20, borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n        <div style={{ fontWeight: \"bold\", marginBottom: 10 }}>MindPeace Chat</div>\n        <div style={{ flexGrow: 1, overflowY: \"auto\", marginBottom: 10 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{ alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\", background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\", padding: 8, borderRadius: 6, maxWidth: \"90%\" }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n        {chatbotReady && (\n          <div>\n            <input\n              value={userMessage}\n              onChange={(e) => setUserMessage(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n              placeholder=\"Type your message...\"\n              style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 10 }}\n            />\n            <button\n              onClick={sendMessage}\n              style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}\n            >\n              Send\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}