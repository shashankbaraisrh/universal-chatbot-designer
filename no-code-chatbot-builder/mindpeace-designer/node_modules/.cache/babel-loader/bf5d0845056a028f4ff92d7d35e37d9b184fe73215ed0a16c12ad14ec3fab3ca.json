{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = edges.find(e => e.id === selectedEdgeId);\n  const autoEdges = useMemo(() => {\n    const manualSet = new Set(edges.map(e => `${e.source}->${e.target}`));\n    const generated = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !manualSet.has(`${node.id}->${target}`)) {\n        generated.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return generated;\n  }, [nodes, edges]);\n  const allEdges = [...edges, ...autoEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const addNode = () => {\n    var _nodes$find, _nodes$find2;\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: selectedNodeId ? {\n        x: ((_nodes$find = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.position.x) + 220 || Math.random() * 400,\n        y: ((_nodes$find2 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find2 === void 0 ? void 0 : _nodes$find2.position.y) || Math.random() * 400\n      } : {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes(nds => nds.filter(node => node.id !== selectedNodeId));\n    setEdges(eds => eds.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setNodes(nds => nds.map(node => {\n      var _node$data2, _node$data3;\n      if ((_node$data2 = node.data) !== null && _node$data2 !== void 0 && _node$data2.options) {\n        const updatedOptions = Object.fromEntries(Object.entries(node.data.options).filter(([, targetId]) => targetId !== selectedNodeId));\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            options: updatedOptions\n          }\n        };\n      }\n      if (((_node$data3 = node.data) === null || _node$data3 === void 0 ? void 0 : _node$data3.next) === selectedNodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            next: \"\"\n          }\n        };\n      }\n      return node;\n    }));\n    setSelectedNodeId(null);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === selectedNodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        };\n      }\n      return node;\n    }));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge));\n    setNodes(nds => nds.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 10,\n        background: \"#2563eb\",\n        color: \"#fff\",\n        padding: \"8px 12px\",\n        border: \"none\",\n        borderRadius: \"6px\"\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteNode,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 120,\n        zIndex: 10,\n        background: \"#dc2626\",\n        color: \"#fff\",\n        padding: \"8px 12px\",\n        border: \"none\",\n        borderRadius: \"6px\"\n      },\n      children: \"Delete Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportJSON,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 240,\n        zIndex: 10,\n        background: \"#059669\",\n        color: \"#fff\",\n        padding: \"8px 12px\",\n        border: \"none\",\n        borderRadius: \"6px\"\n      },\n      children: \"Export JSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 50,\n        left: 10,\n        zIndex: 10,\n        background: \"#f5f7fa\",\n        padding: 10,\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        width: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Editing Node: \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: selectedNode.data.message,\n        onChange: e => updateNodeField(\"message\", e.target.value),\n        style: {\n          width: \"100%\",\n          height: 60\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedNode.data.type,\n        onChange: e => updateNodeField(\"type\", e.target.value),\n        style: {\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"choice\",\n          children: \"choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"multi_choice\",\n          children: \"multi_choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt\",\n          children: \"gpt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"end\",\n          children: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Capture Field:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.capture,\n        onChange: e => updateNodeField(\"capture\", e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Next Node ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.next,\n        onChange: e => updateNodeField(\"next\", e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 50,\n        left: 10,\n        zIndex: 10,\n        background: \"#f9f9f9\",\n        padding: 10,\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        width: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Option Label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedEdge.label,\n        onChange: e => updateEdgeLabel(e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data,\n          label: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: \"10px\",\n              background: \"#ffffff\",\n              borderRadius: \"8px\",\n              boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.1)\",\n              fontSize: \"14px\",\n              maxWidth: \"200px\",\n              wordWrap: \"break-word\"\n            },\n            children: n.data.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this)\n        }\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"A3wuzoeJsasqwif0Y8yDzXXO6fE=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","selectedNode","find","n","selectedEdge","e","autoEdges","manualSet","Set","map","source","target","generated","node","_node$data","has","push","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","eds","nds","updated","addNode","_nodes$find","_nodes$find2","newId","toString","newNode","Math","random","deleteNode","filter","_node$data2","_node$data3","updatedOptions","Object","fromEntries","entries","targetId","onNodeClick","_","onEdgeClick","edge","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","newOptions","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","keys","length","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","width","height","children","onClick","top","left","zIndex","background","color","padding","border","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","onChange","boxShadow","fontSize","maxWidth","wordWrap","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = edges.find((e) => e.id === selectedEdgeId);\n\n  const autoEdges = useMemo(() => {\n    const manualSet = new Set(edges.map((e) => `${e.source}->${e.target}`));\n    const generated = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !manualSet.has(`${node.id}->${target}`)) {\n        generated.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return generated;\n  }, [nodes, edges]);\n\n  const allEdges = [...edges, ...autoEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      setEdges((eds) =>\n        addEdge(\n          {\n            ...params,\n            id: edgeId,\n            markerEnd: { type: MarkerType.ArrowClosed },\n            label\n          },\n          eds\n        )\n      );\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === params.source) {\n            const updated = { ...node };\n            if (\n              updated.data.type === \"choice\" ||\n              updated.data.type === \"multi_choice\"\n            ) {\n              updated.data.options = {\n                ...updated.data.options,\n                [label]: params.target\n              };\n            } else {\n              updated.data.next = params.target;\n            }\n            return updated;\n          }\n          return node;\n        })\n      );\n    },\n    [setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: selectedNodeId\n        ? {\n            x: nodes.find((n) => n.id === selectedNodeId)?.position.x + 220 || Math.random() * 400,\n            y: nodes.find((n) => n.id === selectedNodeId)?.position.y || Math.random() * 400\n          }\n        : { x: Math.random() * 400, y: Math.random() * 400 },\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n\n    setNodes((nds) => nds.filter((node) => node.id !== selectedNodeId));\n    setEdges((eds) =>\n      eds.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId)\n    );\n\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.data?.options) {\n          const updatedOptions = Object.fromEntries(\n            Object.entries(node.data.options).filter(\n              ([, targetId]) => targetId !== selectedNodeId\n            )\n          );\n          return { ...node, data: { ...node.data, options: updatedOptions } };\n        }\n        if (node.data?.next === selectedNodeId) {\n          return { ...node, data: { ...node.data, next: \"\" } };\n        }\n        return node;\n      })\n    );\n    setSelectedNodeId(null);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === selectedNodeId) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              [field]: value\n            }\n          };\n        }\n        return node;\n      })\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n      )\n    );\n\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === sourceId) {\n          const updated = { ...node };\n          if (\n            updated.data.type === \"choice\" ||\n            updated.data.type === \"multi_choice\"\n          ) {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = targetId;\n            updated.data.options = newOptions;\n          } else {\n            updated.data.next = targetId;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <button onClick={addNode} style={{ position: \"absolute\", top: 10, left: 10, zIndex: 10, background: \"#2563eb\", color: \"#fff\", padding: \"8px 12px\", border: \"none\", borderRadius: \"6px\" }}>\n        Add Node\n      </button>\n      <button onClick={deleteNode} style={{ position: \"absolute\", top: 10, left: 120, zIndex: 10, background: \"#dc2626\", color: \"#fff\", padding: \"8px 12px\", border: \"none\", borderRadius: \"6px\" }}>\n        Delete Node\n      </button>\n      <button onClick={exportJSON} style={{ position: \"absolute\", top: 10, left: 240, zIndex: 10, background: \"#059669\", color: \"#fff\", padding: \"8px 12px\", border: \"none\", borderRadius: \"6px\" }}>\n        Export JSON\n      </button>\n\n      {selectedNode && (\n        <div style={{\n          position: \"absolute\",\n          top: 50,\n          left: 10,\n          zIndex: 10,\n          background: \"#f5f7fa\",\n          padding: 10,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\"\n        }}>\n          <h4>Editing Node: {selectedNode.id}</h4>\n          <label>Message:</label>\n          <textarea\n            value={selectedNode.data.message}\n            onChange={(e) => updateNodeField(\"message\", e.target.value)}\n            style={{ width: \"100%\", height: 60 }}\n          />\n          <label>Type:</label>\n          <select\n            value={selectedNode.data.type}\n            onChange={(e) => updateNodeField(\"type\", e.target.value)}\n            style={{ width: \"100%\" }}\n          >\n            <option value=\"choice\">choice</option>\n            <option value=\"input\">input</option>\n            <option value=\"multi_choice\">multi_choice</option>\n            <option value=\"gpt\">gpt</option>\n            <option value=\"end\">end</option>\n          </select>\n          <label>Capture Field:</label>\n          <input\n            type=\"text\"\n            value={selectedNode.data.capture}\n            onChange={(e) => updateNodeField(\"capture\", e.target.value)}\n            style={{ width: \"100%\" }}\n          />\n          <label>Next Node ID:</label>\n          <input\n            type=\"text\"\n            value={selectedNode.data.next}\n            onChange={(e) => updateNodeField(\"next\", e.target.value)}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div style={{\n          position: \"absolute\",\n          top: 50,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9f9f9\",\n          padding: 10,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\"\n        }}>\n          <h4>Editing Edge</h4>\n          <label>Option Label:</label>\n          <input\n            type=\"text\"\n            value={selectedEdge.label}\n            onChange={(e) => updateEdgeLabel(e.target.value)}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: (\n              <div style={{\n                padding: \"10px\",\n                background: \"#ffffff\",\n                borderRadius: \"8px\",\n                boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.1)\",\n                fontSize: \"14px\",\n                maxWidth: \"200px\",\n                wordWrap: \"break-word\"\n              }}>\n                {n.data.message}\n              </div>\n            )\n          }\n        }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}