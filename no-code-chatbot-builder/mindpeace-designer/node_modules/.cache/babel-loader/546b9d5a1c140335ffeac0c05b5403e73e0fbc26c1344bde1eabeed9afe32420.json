{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {\n      Yes: \"2\",\n      No: \"3\"\n    },\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}, {\n  id: \"2\",\n  data: {\n    message: \"Great! Can I have your name?\",\n    type: \"input\",\n    options: {},\n    capture: \"name\",\n    next: \"4\"\n  },\n  position: {\n    x: 100,\n    y: 100\n  },\n  type: \"default\"\n}, {\n  id: \"3\",\n  data: {\n    message: \"No worries. I’m here if you need support later.\",\n    type: \"end\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 400,\n    y: 100\n  },\n  type: \"default\"\n}, {\n  id: \"4\",\n  data: {\n    message: \"Thanks, {{name}}. Can you describe your current problem briefly?\",\n    type: \"input\",\n    options: {},\n    capture: \"problem\",\n    next: \"5\"\n  },\n  position: {\n    x: 100,\n    y: 200\n  },\n  type: \"default\"\n}, {\n  id: \"5\",\n  data: {\n    message: \"Thank you. Based on your inputs, our AI will now support you.\",\n    type: \"gpt\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 100,\n    y: 300\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 6;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [chatbotReady, setChatbotReady] = useState(true);\n  const [submittedFlow, setSubmittedFlow] = useState({\n    nodes: Object.fromEntries(initialNodes.map(n => [n.id, n.data]))\n  });\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [chatHistory, setChatHistory] = useState([{\n    sender: \"bot\",\n    message: initialNodes[0].data.message\n  }]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gptActive, setGptActive] = useState(false);\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    if (gptActive) {\n      const summaryText = Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: \"You are MindPeace, a compassionate mental health assistant.\",\n            gpt_model: \"gpt-3.5-turbo\"\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: \"You are MindPeace, a compassionate mental health assistant.\",\n            gpt_model: \"gpt-3.5-turbo\"\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setGptActive(true);\n        setUserInputs(newInputs);\n        setCurrentNodeId(null);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setGptActive(true);\n        setUserInputs(newInputs);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatbotPanel, {\n      chatbotReady: chatbotReady,\n      chatHistory: chatHistory,\n      inputValue: inputValue,\n      currentNodeId: currentNodeId,\n      submittedFlow: submittedFlow,\n      setChatHistory: setChatHistory,\n      setInputValue: setInputValue,\n      handleUserResponse: handleUserResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zLi5GkXb8mpgCrssrlVqw0G+M8M=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","ChatbotPanel","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","Yes","No","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","Object","fromEntries","map","n","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","sender","userInputs","setUserInputs","inputValue","setInputValue","gptActive","setGptActive","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","summaryText","entries","k","v","join","res","fetch","method","headers","body","JSON","stringify","summary","system_prompt","gpt_model","json","gptReply","reply","err","currentNode","newInputs","nextId","nextNode","style","display","height","width","children","flex","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: { Yes: \"2\", No: \"3\" },\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  },\n  {\n    id: \"2\",\n    data: {\n      message: \"Great! Can I have your name?\",\n      type: \"input\",\n      options: {},\n      capture: \"name\",\n      next: \"4\"\n    },\n    position: { x: 100, y: 100 },\n    type: \"default\"\n  },\n  {\n    id: \"3\",\n    data: {\n      message: \"No worries. I’m here if you need support later.\",\n      type: \"end\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 400, y: 100 },\n    type: \"default\"\n  },\n  {\n    id: \"4\",\n    data: {\n      message: \"Thanks, {{name}}. Can you describe your current problem briefly?\",\n      type: \"input\",\n      options: {},\n      capture: \"problem\",\n      next: \"5\"\n    },\n    position: { x: 100, y: 200 },\n    type: \"default\"\n  },\n  {\n    id: \"5\",\n    data: {\n      message: \"Thank you. Based on your inputs, our AI will now support you.\",\n      type: \"gpt\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 100, y: 300 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\n\nlet nodeCounter = 6;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [chatbotReady, setChatbotReady] = useState(true);\n  const [submittedFlow, setSubmittedFlow] = useState({ nodes: Object.fromEntries(initialNodes.map(n => [n.id, n.data])) });\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [chatHistory, setChatHistory] = useState([\n    { sender: \"bot\", message: initialNodes[0].data.message }\n  ]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gptActive, setGptActive] = useState(false);\n\n  const handleUserResponse = async (response) => {\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    if (gptActive) {\n      const summaryText = Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: \"You are MindPeace, a compassionate mental health assistant.\",\n            gpt_model: \"gpt-3.5-turbo\"\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, { sender: \"bot\", message: gptReply }]);\n      } catch (err) {\n        setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: \"You are MindPeace, a compassionate mental health assistant.\",\n            gpt_model: \"gpt-3.5-turbo\"\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setGptActive(true);\n        setUserInputs(newInputs);\n        setCurrentNodeId(null);\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setGptActive(true);\n        setUserInputs(newInputs);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", width: \"100%\" }}>\n      <div style={{ flex: 1 }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n      <ChatbotPanel\n        chatbotReady={chatbotReady}\n        chatHistory={chatHistory}\n        inputValue={inputValue}\n        currentNodeId={currentNodeId}\n        submittedFlow={submittedFlow}\n        setChatHistory={setChatHistory}\n        setInputValue={setInputValue}\n        handleUserResponse={handleUserResponse}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}