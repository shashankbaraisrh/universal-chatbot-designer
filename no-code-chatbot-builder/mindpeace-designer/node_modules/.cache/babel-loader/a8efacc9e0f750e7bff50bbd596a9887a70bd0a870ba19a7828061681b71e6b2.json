{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, useEdgesState, useNodesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport CustomEdge from './CustomEdge';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  var _selectedNode$data$gp, _selectedEdge$data;\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const [systemPrompt, setSystemPrompt] = useState('');\n  const edgeTypes = {\n    custom: CustomEdge\n  };\n  const addNewNode = () => {\n    const newId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newId,\n      position: {\n        x: 100 + nodes.length * 50,\n        y: 100 + nodes.length * 50\n      },\n      type: 'default',\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false,\n        expected_inputs: '',\n        input_mapping: '',\n        follow_up_prompt: '',\n        follow_up_capture: '',\n        gpt: {\n          enabled: false\n        }\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeId = selectedNode.id;\n    setNodes(nds => nds.filter(n => n.id !== nodeId));\n    setEdges(eds => eds.filter(e => e.source !== nodeId && e.target !== nodeId));\n    setSelectedNode(null);\n  };\n  const onConnect = useCallback(params => setEdges(eds => addEdge({\n    ...params,\n    type: 'custom',\n    data: {\n      label: 'Option'\n    }\n  }, eds)), [setEdges]);\n  const onNodeClick = useCallback((_, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n    const update = field === 'gpt' ? {\n      enabled: value.enabled\n    } : value;\n    setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: update,\n        label: field === 'message' ? update.slice(0, 20) + (update.length > 20 ? '...' : '') : node.data.label\n      }\n    } : node));\n    setSelectedNode(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: update,\n        label: field === 'message' ? update.slice(0, 20) + (update.length > 20 ? '...' : '') : prev.data.label\n      }\n    }));\n  };\n  const handleEdgeLabelChange = value => {\n    if (!selectedEdge) return;\n    setEdges(eds => eds.map(e => e.id === selectedEdge.id ? {\n      ...e,\n      data: {\n        label: value\n      }\n    } : e));\n    setSelectedEdge(prev => ({\n      ...prev,\n      data: {\n        label: value\n      }\n    }));\n  };\n  const exportJSON = () => {\n    const conversationTree = {\n      settings: {\n        default_gpt_model: 'gpt-3.5-turbo',\n        default_system_prompt: systemPrompt,\n        context_includes: ['history', 'user_state', 'problems']\n      },\n      variables: {\n        name: '',\n        first_name: '',\n        email: '',\n        age: '',\n        problem_type: '',\n        problem_details: '',\n        intensity: '',\n        problems: []\n      },\n      nodes: {}\n    };\n    const optionsMap = {};\n    edges.forEach(edge => {\n      var _edge$data;\n      if (!optionsMap[edge.source]) optionsMap[edge.source] = {};\n      optionsMap[edge.source][((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.label) || 'Option'] = edge.target;\n    });\n    nodes.forEach(node => {\n      const {\n        message,\n        capture,\n        next,\n        end,\n        expected_inputs,\n        input_mapping,\n        follow_up_prompt,\n        follow_up_capture,\n        gpt\n      } = node.data;\n      const nodeData = {\n        message: message || ''\n      };\n      if (optionsMap[node.id]) nodeData.options = optionsMap[node.id];\n      if (capture) nodeData.capture = capture;\n      if (next) nodeData.next = next;\n      if (end) nodeData.end = true;\n      if (expected_inputs) nodeData.expected_inputs = expected_inputs.split(',').map(s => s.trim());\n      if (input_mapping) {\n        try {\n          nodeData.input_mapping = JSON.parse(input_mapping);\n        } catch {\n          console.warn(`Invalid input_mapping JSON in node ${node.id}`);\n        }\n      }\n      if (follow_up_prompt) nodeData.follow_up_prompt = follow_up_prompt;\n      if (follow_up_capture) nodeData.follow_up_capture = follow_up_capture;\n      if (gpt !== null && gpt !== void 0 && gpt.enabled) nodeData.gpt = {\n        enabled: true\n      };\n      conversationTree.nodes[node.id] = nodeData;\n    });\n    const blob = new Blob([JSON.stringify(conversationTree, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  const importJSON = jsonString => {\n    try {\n      var _json$settings;\n      const json = typeof jsonString === 'string' ? JSON.parse(jsonString) : jsonString;\n      if ((_json$settings = json.settings) !== null && _json$settings !== void 0 && _json$settings.default_system_prompt) {\n        setSystemPrompt(json.settings.default_system_prompt);\n      }\n      const nodeList = Object.entries(json.nodes).map(([id, n], i) => {\n        var _n$message, _n$message2;\n        return {\n          id,\n          type: 'default',\n          position: {\n            x: 100 + i * 80,\n            y: 100 + i * 50\n          },\n          data: {\n            label: ((_n$message = n.message) === null || _n$message === void 0 ? void 0 : _n$message.slice(0, 20)) + (((_n$message2 = n.message) === null || _n$message2 === void 0 ? void 0 : _n$message2.length) > 20 ? '...' : ''),\n            message: n.message || '',\n            capture: n.capture || '',\n            next: n.next || '',\n            end: n.end || false,\n            expected_inputs: (n.expected_inputs || []).join(', '),\n            input_mapping: n.input_mapping ? JSON.stringify(n.input_mapping, null, 2) : '',\n            follow_up_prompt: n.follow_up_prompt || '',\n            follow_up_capture: n.follow_up_capture || '',\n            gpt: n.gpt || {\n              enabled: false\n            }\n          }\n        };\n      });\n      const edgeList = [];\n      for (const [source, node] of Object.entries(json.nodes)) {\n        if (node.options) {\n          for (const [label, target] of Object.entries(node.options)) {\n            edgeList.push({\n              id: `e${source}-${target}`,\n              source,\n              target,\n              type: 'custom',\n              data: {\n                label\n              }\n            });\n          }\n        }\n      }\n      setNodes(nodeList);\n      setEdges(edgeList);\n      setSelectedNode(null);\n      setSelectedEdge(null);\n    } catch (err) {\n      alert('Invalid JSON!');\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeTypes: edgeTypes,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 320,\n        padding: 10,\n        background: '#f4f4f4'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Node Editor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => handleFieldChange('message', e.target.value),\n          rows: 3,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.capture,\n          onChange: e => handleFieldChange('capture', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.next,\n          onChange: e => handleFieldChange('next', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Expected Inputs (comma-separated):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.expected_inputs,\n          onChange: e => handleFieldChange('expected_inputs', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Input Mapping (JSON):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.input_mapping,\n          onChange: e => handleFieldChange('input_mapping', e.target.value),\n          rows: 3,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Follow-up Prompt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.follow_up_prompt,\n          onChange: e => handleFieldChange('follow_up_prompt', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Follow-up Capture:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.follow_up_capture,\n          onChange: e => handleFieldChange('follow_up_capture', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: ((_selectedNode$data$gp = selectedNode.data.gpt) === null || _selectedNode$data$gp === void 0 ? void 0 : _selectedNode$data$gp.enabled) || false,\n            onChange: e => handleFieldChange('gpt', {\n              enabled: e.target.checked\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), ' ', \"Enable GPT\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedNode.data.end,\n            onChange: e => handleFieldChange('end', e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this), ' ', \"End Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), selectedEdge && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edge Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: ((_selectedEdge$data = selectedEdge.data) === null || _selectedEdge$data === void 0 ? void 0 : _selectedEdge$data.label) || '',\n          onChange: e => handleEdgeLabelChange(e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 10,\n        left: 10,\n        display: 'flex',\n        gap: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteSelectedNode,\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        children: \"Export JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".json\",\n        onChange: e => {\n          const file = e.target.files[0];\n          const reader = new FileReader();\n          reader.onload = event => importJSON(event.target.result);\n          if (file) reader.readAsText(file);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"XoAb92O7zZ4pgZbNt+fBW3pvW/U=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","Controls","MiniMap","useEdgesState","useNodesState","CustomEdge","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_selectedNode$data$gp","_selectedEdge$data","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedEdge","setSelectedEdge","systemPrompt","setSystemPrompt","edgeTypes","custom","addNewNode","newId","length","toString","newNode","id","position","x","y","type","data","label","message","capture","next","end","expected_inputs","input_mapping","follow_up_prompt","follow_up_capture","gpt","enabled","nds","deleteSelectedNode","nodeId","filter","n","eds","e","source","target","onConnect","params","onNodeClick","_","node","onEdgeClick","event","edge","stopPropagation","handleFieldChange","field","value","update","map","slice","prev","handleEdgeLabelChange","exportJSON","conversationTree","settings","default_gpt_model","default_system_prompt","context_includes","variables","name","first_name","email","age","problem_type","problem_details","intensity","problems","optionsMap","forEach","_edge$data","nodeData","options","split","s","trim","JSON","parse","console","warn","blob","Blob","stringify","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","importJSON","jsonString","_json$settings","json","nodeList","Object","entries","i","_n$message","_n$message2","join","edgeList","push","err","alert","error","style","display","height","children","flex","fitView","fileName","_jsxFileName","lineNumber","columnNumber","width","padding","background","onChange","rows","checked","top","left","gap","onClick","accept","file","files","reader","FileReader","onload","result","readAsText","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Background,\n  Controls,\n  MiniMap,\n  useEdgesState,\n  useNodesState\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport CustomEdge from './CustomEdge';\n\nconst App = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const [systemPrompt, setSystemPrompt] = useState('');\n\n  const edgeTypes = { custom: CustomEdge };\n\n  const addNewNode = () => {\n    const newId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newId,\n      position: { x: 100 + nodes.length * 50, y: 100 + nodes.length * 50 },\n      type: 'default',\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false,\n        expected_inputs: '',\n        input_mapping: '',\n        follow_up_prompt: '',\n        follow_up_capture: '',\n        gpt: { enabled: false }\n      }\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeId = selectedNode.id;\n    setNodes((nds) => nds.filter((n) => n.id !== nodeId));\n    setEdges((eds) =>\n      eds.filter((e) => e.source !== nodeId && e.target !== nodeId)\n    );\n    setSelectedNode(null);\n  };\n\n  const onConnect = useCallback(\n    (params) =>\n      setEdges((eds) =>\n        addEdge({ ...params, type: 'custom', data: { label: 'Option' } }, eds)\n      ),\n    [setEdges]\n  );\n\n  const onNodeClick = useCallback((_, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n    const update = field === 'gpt' ? { enabled: value.enabled } : value;\n\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNode.id\n          ? {\n              ...node,\n              data: {\n                ...node.data,\n                [field]: update,\n                label:\n                  field === 'message'\n                    ? update.slice(0, 20) + (update.length > 20 ? '...' : '')\n                    : node.data.label\n              }\n            }\n          : node\n      )\n    );\n\n    setSelectedNode((prev) => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: update,\n        label:\n          field === 'message'\n            ? update.slice(0, 20) + (update.length > 20 ? '...' : '')\n            : prev.data.label\n      }\n    }));\n  };\n\n  const handleEdgeLabelChange = (value) => {\n    if (!selectedEdge) return;\n\n    setEdges((eds) =>\n      eds.map((e) =>\n        e.id === selectedEdge.id ? { ...e, data: { label: value } } : e\n      )\n    );\n\n    setSelectedEdge((prev) => ({\n      ...prev,\n      data: { label: value }\n    }));\n  };\n\n  const exportJSON = () => {\n    const conversationTree = {\n      settings: {\n        default_gpt_model: 'gpt-3.5-turbo',\n        default_system_prompt: systemPrompt,\n        context_includes: ['history', 'user_state', 'problems']\n      },\n      variables: {\n        name: '',\n        first_name: '',\n        email: '',\n        age: '',\n        problem_type: '',\n        problem_details: '',\n        intensity: '',\n        problems: []\n      },\n      nodes: {}\n    };\n\n    const optionsMap = {};\n    edges.forEach((edge) => {\n      if (!optionsMap[edge.source]) optionsMap[edge.source] = {};\n      optionsMap[edge.source][edge.data?.label || 'Option'] = edge.target;\n    });\n\n    nodes.forEach((node) => {\n      const {\n        message,\n        capture,\n        next,\n        end,\n        expected_inputs,\n        input_mapping,\n        follow_up_prompt,\n        follow_up_capture,\n        gpt\n      } = node.data;\n\n      const nodeData = { message: message || '' };\n      if (optionsMap[node.id]) nodeData.options = optionsMap[node.id];\n      if (capture) nodeData.capture = capture;\n      if (next) nodeData.next = next;\n      if (end) nodeData.end = true;\n      if (expected_inputs)\n        nodeData.expected_inputs = expected_inputs.split(',').map((s) => s.trim());\n      if (input_mapping) {\n        try {\n          nodeData.input_mapping = JSON.parse(input_mapping);\n        } catch {\n          console.warn(`Invalid input_mapping JSON in node ${node.id}`);\n        }\n      }\n      if (follow_up_prompt) nodeData.follow_up_prompt = follow_up_prompt;\n      if (follow_up_capture) nodeData.follow_up_capture = follow_up_capture;\n      if (gpt?.enabled) nodeData.gpt = { enabled: true };\n\n      conversationTree.nodes[node.id] = nodeData;\n    });\n\n    const blob = new Blob([JSON.stringify(conversationTree, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const importJSON = (jsonString) => {\n    try {\n      const json = typeof jsonString === 'string' ? JSON.parse(jsonString) : jsonString;\n\n      if (json.settings?.default_system_prompt) {\n        setSystemPrompt(json.settings.default_system_prompt);\n      }\n\n      const nodeList = Object.entries(json.nodes).map(([id, n], i) => ({\n        id,\n        type: 'default',\n        position: { x: 100 + i * 80, y: 100 + i * 50 },\n        data: {\n          label: n.message?.slice(0, 20) + (n.message?.length > 20 ? '...' : ''),\n          message: n.message || '',\n          capture: n.capture || '',\n          next: n.next || '',\n          end: n.end || false,\n          expected_inputs: (n.expected_inputs || []).join(', '),\n          input_mapping: n.input_mapping ? JSON.stringify(n.input_mapping, null, 2) : '',\n          follow_up_prompt: n.follow_up_prompt || '',\n          follow_up_capture: n.follow_up_capture || '',\n          gpt: n.gpt || { enabled: false }\n        }\n      }));\n\n      const edgeList = [];\n      for (const [source, node] of Object.entries(json.nodes)) {\n        if (node.options) {\n          for (const [label, target] of Object.entries(node.options)) {\n            edgeList.push({\n              id: `e${source}-${target}`,\n              source,\n              target,\n              type: 'custom',\n              data: { label }\n            });\n          }\n        }\n      }\n\n      setNodes(nodeList);\n      setEdges(edgeList);\n      setSelectedNode(null);\n      setSelectedEdge(null);\n    } catch (err) {\n      alert('Invalid JSON!');\n      console.error(err);\n    }\n  };\n\n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <div style={{ flex: 1 }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeTypes={edgeTypes}\n        >\n          <Background />\n          <Controls />\n          <MiniMap />\n        </ReactFlow>\n      </div>\n\n      <div style={{ width: 320, padding: 10, background: '#f4f4f4' }}>\n        <h3>Node Editor</h3>\n        {selectedNode && (\n          <>\n            <label>Message:</label>\n            <textarea\n              value={selectedNode.data.message}\n              onChange={(e) => handleFieldChange('message', e.target.value)}\n              rows={3}\n              style={{ width: '100%' }}\n            />\n            <label>Capture:</label>\n            <input\n              value={selectedNode.data.capture}\n              onChange={(e) => handleFieldChange('capture', e.target.value)}\n              style={{ width: '100%' }}\n            />\n            <label>Next Node:</label>\n            <input\n              value={selectedNode.data.next}\n              onChange={(e) => handleFieldChange('next', e.target.value)}\n              style={{ width: '100%' }}\n            />\n            <label>Expected Inputs (comma-separated):</label>\n            <input\n              value={selectedNode.data.expected_inputs}\n              onChange={(e) => handleFieldChange('expected_inputs', e.target.value)}\n              style={{ width: '100%' }}\n            />\n            <label>Input Mapping (JSON):</label>\n            <textarea\n              value={selectedNode.data.input_mapping}\n              onChange={(e) => handleFieldChange('input_mapping', e.target.value)}\n              rows={3}\n              style={{ width: '100%' }}\n            />\n            <label>Follow-up Prompt:</label>\n            <input\n              value={selectedNode.data.follow_up_prompt}\n              onChange={(e) => handleFieldChange('follow_up_prompt', e.target.value)}\n              style={{ width: '100%' }}\n            />\n            <label>Follow-up Capture:</label>\n            <input\n              value={selectedNode.data.follow_up_capture}\n              onChange={(e) => handleFieldChange('follow_up_capture', e.target.value)}\n              style={{ width: '100%' }}\n            />\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={selectedNode.data.gpt?.enabled || false}\n                onChange={(e) =>\n                  handleFieldChange('gpt', { enabled: e.target.checked })\n                }\n              />{' '}\n              Enable GPT\n            </label>\n            <br />\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={selectedNode.data.end}\n                onChange={(e) => handleFieldChange('end', e.target.checked)}\n              />{' '}\n              End Node\n            </label>\n          </>\n        )}\n        {selectedEdge && (\n          <>\n            <h3>Edge Editor</h3>\n            <label>Label:</label>\n            <input\n              value={selectedEdge.data?.label || ''}\n              onChange={(e) => handleEdgeLabelChange(e.target.value)}\n              style={{ width: '100%' }}\n            />\n          </>\n        )}\n      </div>\n\n      <div style={{ position: 'absolute', top: 10, left: 10, display: 'flex', gap: 10 }}>\n        <button onClick={addNewNode}>Add Node</button>\n        <button onClick={deleteSelectedNode}>Delete Node</button>\n        <button onClick={exportJSON}>Export JSON</button>\n        <input\n          type=\"file\"\n          accept=\".json\"\n          onChange={(e) => {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n            reader.onload = (event) => importJSON(event.target.result);\n            if (file) reader.readAsText(file);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}