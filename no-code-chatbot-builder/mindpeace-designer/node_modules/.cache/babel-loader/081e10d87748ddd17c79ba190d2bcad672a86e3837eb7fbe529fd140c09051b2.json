{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [isChatActive, setIsChatActive] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const handleSubmitFlow = async () => {\n    const flowData = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant...\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const nodeObj = {\n        message: data.message,\n        type: data.type,\n        ...(data.capture && {\n          capture: data.capture\n        }),\n        ...(Object.keys(data.options || {}).length && {\n          options: data.options\n        }),\n        ...(data.next && {\n          next: data.next\n        })\n      };\n      flowData.nodes[id] = nodeObj;\n    });\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(flowData)\n      });\n      if (res.ok) {\n        setIsChatActive(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Error submitting flow.\");\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"Error connecting to backend.\");\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n    const newMessages = [...chatMessages, {\n      role: \"user\",\n      content: userInput\n    }];\n    setChatMessages(newMessages);\n    setUserInput(\"\");\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userInput,\n          summary: \"User has submitted initial information.\",\n          system_prompt: \"You are MindPeace, a compassionate mental health assistant.\",\n          gpt_model: \"gpt-3.5-turbo\"\n        })\n      });\n      const data = await res.json();\n      const reply = data.reply || \"Sorry, I couldn't respond.\";\n      setChatMessages(prev => [...prev, {\n        role: \"assistant\",\n        content: reply\n      }]);\n    } catch (e) {\n      console.error(e);\n      setChatMessages(prev => [...prev, {\n        role: \"assistant\",\n        content: \"Error contacting backend.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\"\n          },\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\"\n          },\n          onClick: exportJSON,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\"\n          },\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#6366f1\",\n            color: \"white\"\n          },\n          onClick: handleSubmitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 120,\n          left: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          borderRadius: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Capture Field\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Next Node ID\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 350,\n        background: \"#f9fafb\",\n        borderLeft: \"1px solid #e5e7eb\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 12,\n          fontWeight: \"bold\",\n          borderBottom: \"1px solid #e5e7eb\"\n        },\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          padding: 12\n        },\n        children: !isChatActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this) : chatMessages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 8\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.role === \"user\" ? \"You\" : \"MindPeace\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 17\n          }, this), \" \", msg.content]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this), isChatActive && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 12,\n          borderTop: \"1px solid #e5e7eb\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          style: {\n            width: \"100%\",\n            marginBottom: 8\n          },\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          style: {\n            width: \"100%\",\n            background: \"#2563eb\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bLhih61bp5QjFP0gGMhV1oMYNBk=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","isChatActive","setIsChatActive","chatMessages","setChatMessages","userInput","setUserInput","history","edges","historyIndex","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","selectedNode","find","n","selectedEdge","e","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","handleSubmitFlow","flowData","res","fetch","method","headers","ok","alert","err","console","error","handleSendMessage","trim","newMessages","role","content","summary","json","reply","prev","display","width","height","children","flex","top","left","zIndex","gap","color","onClick","fileName","_jsxFileName","lineNumber","columnNumber","right","onChange","placeholder","fitView","borderLeft","flexDirection","fontWeight","borderBottom","overflowY","msg","i","marginBottom","borderTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["// App.js\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [isChatActive, setIsChatActive] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback((params) => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: { type: MarkerType.ArrowClosed },\n      label\n    }, manualEdges);\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === params.source) {\n        const updated = { ...node };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = { ...updated.data.options, [label]: params.target };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const handleSubmitFlow = async () => {\n    const flowData = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant...\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const nodeObj = {\n        message: data.message,\n        type: data.type,\n        ...(data.capture && { capture: data.capture }),\n        ...(Object.keys(data.options || {}).length && { options: data.options }),\n        ...(data.next && { next: data.next })\n      };\n      flowData.nodes[id] = nodeObj;\n    });\n\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(flowData)\n      });\n      if (res.ok) {\n        setIsChatActive(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Error submitting flow.\");\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"Error connecting to backend.\");\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n    const newMessages = [...chatMessages, { role: \"user\", content: userInput }];\n    setChatMessages(newMessages);\n    setUserInput(\"\");\n\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          message: userInput,\n          summary: \"User has submitted initial information.\",\n          system_prompt: \"You are MindPeace, a compassionate mental health assistant.\",\n          gpt_model: \"gpt-3.5-turbo\"\n        })\n      });\n\n      const data = await res.json();\n      const reply = data.reply || \"Sorry, I couldn't respond.\";\n      setChatMessages((prev) => [...prev, { role: \"assistant\", content: reply }]);\n    } catch (e) {\n      console.error(e);\n      setChatMessages((prev) => [...prev, { role: \"assistant\", content: \"Error contacting backend.\" }]);\n    }\n  };\n\n  return (\n    <div style={{ display: \"flex\", width: \"100vw\", height: \"100vh\" }}>\n      {/* Designer */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        {/* Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\" }} onClick={addNode}>Add Node</button>\n          <button style={{ background: \"#22c55e\", color: \"white\" }} onClick={exportJSON}>Export JSON</button>\n          <button style={{ background: \"#ef4444\", color: \"white\" }} onClick={deleteNode}>Delete Node</button>\n          <button style={{ background: \"#6366f1\", color: \"white\" }} onClick={handleSubmitFlow}>Submit Flow</button>\n        </div>\n\n        {/* Undo Redo */}\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\" }} onClick={undo}>Undo</button>\n          <button style={{ background: \"#f59e0b\", color: \"white\" }} onClick={redo}>Redo</button>\n        </div>\n\n        {/* Node Editor */}\n        {selectedNode && (\n          <div style={{ position: \"absolute\", top: 120, left: 10, background: \"#f8fafc\", padding: 12, borderRadius: 10 }}>\n            <h4>Editing Node: {selectedNode.id}</h4>\n            <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\" }} />\n            <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}>\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n            <input type=\"text\" placeholder=\"Capture Field\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} />\n            <input type=\"text\" placeholder=\"Next Node ID\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Chat Panel */}\n      <div style={{ width: 350, background: \"#f9fafb\", borderLeft: \"1px solid #e5e7eb\", display: \"flex\", flexDirection: \"column\" }}>\n        <div style={{ padding: 12, fontWeight: \"bold\", borderBottom: \"1px solid #e5e7eb\" }}>MindPeace Chat</div>\n        <div style={{ flex: 1, overflowY: \"auto\", padding: 12 }}>\n          {!isChatActive ? (\n            <div>Please submit your flow to activate the chatbot.</div>\n          ) : (\n            chatMessages.map((msg, i) => (\n              <div key={i} style={{ marginBottom: 8 }}>\n                <strong>{msg.role === \"user\" ? \"You\" : \"MindPeace\"}:</strong> {msg.content}\n              </div>\n            ))\n          )}\n        </div>\n        {isChatActive && (\n          <div style={{ padding: 12, borderTop: \"1px solid #e5e7eb\" }}>\n            <input value={userInput} onChange={(e) => setUserInput(e.target.value)} style={{ width: \"100%\", marginBottom: 8 }} placeholder=\"Type a message...\" />\n            <button onClick={handleSendMessage} style={{ width: \"100%\", background: \"#2563eb\", color: \"white\", padding: 8, borderRadius: 6, border: \"none\" }}>\n              Send\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}