{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const exportChatAsText = () => {\n    const content = chatHistory.map(msg => `${msg.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${msg.message}`).join(\"\\n\");\n    const blob = new Blob([content], {\n      type: \"text/plain\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"mindpeace_chat.txt\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    const node = submittedFlow.nodes[currentNodeId];\n    if (gptMode || (node === null || node === void 0 ? void 0 : node.type) === \"gpt\") {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportChatAsText,\n          style: {\n            width: \"100%\",\n            background: \"#6366f1\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\",\n            marginTop: 10\n          },\n          children: \"Export Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n    if ((node === null || node === void 0 ? void 0 : node.type) === \"choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        style: {\n          padding: \"8px\",\n          margin: \"4px\",\n          width: \"100%\",\n          borderRadius: 6,\n          border: \"1px solid #ccc\",\n          background: \"#e0f2fe\"\n        },\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this));\n    }\n    if ((node === null || node === void 0 ? void 0 : node.type) === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this);\n    }\n    if ((node === null || node === void 0 ? void 0 : node.type) === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch (err) {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  // Final return\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      fontFamily: \"Segoe UI, sans-serif\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"m3ZCRObn9M9QSX7kfE+qGcChlb4=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","Fragment","_Fragment","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","exportChatAsText","content","map","msg","sender","join","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","getExportJSON","output","settings","system_prompt","gpt_model","forEach","node","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","JSON","stringify","ok","_payload$nodes$","firstMsg","alert","err","renderChatInput","children","value","onChange","target","onKeyDown","key","handleUserResponse","style","width","padding","marginBottom","borderRadius","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","color","marginTop","opt","margin","checked","includes","prev","filter","o","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","chat_history","json","gptReply","reply","currentNode","newInputs","nextId","nextNode","display","height","fontFamily","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const exportChatAsText = () => {\n    const content = chatHistory\n      .map((msg) => `${msg.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${msg.message}`)\n      .join(\"\\n\");\n    const blob = new Blob([content], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"mindpeace_chat.txt\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (gptMode || node?.type === \"gpt\") {\n      return (\n        <>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)}\n            style={{ width: \"100%\", padding: 8, marginBottom: 8, borderRadius: 6, border: \"1px solid #ccc\" }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}\n          >\n            Send\n          </button>\n          <button\n            onClick={exportChatAsText}\n            style={{ width: \"100%\", background: \"#6366f1\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\", marginTop: 10 }}\n          >\n            Export Chat\n          </button>\n        </>\n      );\n    }\n\n    if (node?.type === \"choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button\n          key={opt}\n          onClick={() => handleUserResponse(opt)}\n          style={{\n            padding: \"8px\",\n            margin: \"4px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            background: \"#e0f2fe\"\n          }}\n        >\n          {opt}\n        </button>\n      ));\n    }\n\n    if (node?.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div key={opt}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt) ? prev.filter((o) => o !== opt) : [...prev, opt]\n                    )\n                  }\n                />\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\"\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node?.type === \"input\") {\n      return (\n        <div>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)}\n            style={{ width: \"100%\", padding: 8, marginBottom: 8, borderRadius: 6, border: \"1px solid #ccc\" }}\n          />\n          <button\n            onClick={() => handleUserResponse(inputValue)}\n            style={{\n              width: \"100%\",\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"8px 12px\",\n              border: \"none\"\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch (err) {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  // Final return\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", fontFamily: \"Segoe UI, sans-serif\" }}>\n      {/* Add the rest of your layout here, like Left Flow Panel and Right Chat Panel (unchanged from your version) */}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}