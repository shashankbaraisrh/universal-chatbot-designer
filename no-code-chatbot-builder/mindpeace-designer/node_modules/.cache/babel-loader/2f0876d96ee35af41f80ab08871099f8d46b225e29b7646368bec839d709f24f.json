{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n/* ================================\n   Flow persistence helpers\n   ================================ */\n\nconst FLOWS_KEY = \"mindpeace_flows\"; // map of id -> flow object\nconst ACTIVE_KEY = \"mindpeace_active_flow\"; // id of last active flow\n\nfunction readFlows() {\n  try {\n    return JSON.parse(localStorage.getItem(FLOWS_KEY) || \"{}\");\n  } catch {\n    return {};\n  }\n}\nfunction writeFlows(map) {\n  localStorage.setItem(FLOWS_KEY, JSON.stringify(map));\n}\nfunction setActiveFlowId(id) {\n  localStorage.setItem(ACTIVE_KEY, id);\n}\nfunction getActiveFlowId() {\n  return localStorage.getItem(ACTIVE_KEY);\n}\nfunction computeNextCounterFromNodes(nodesArr) {\n  const maxId = nodesArr.reduce((m, n) => Math.max(m, Number(n.id) || 0), 0);\n  return isFinite(maxId) ? maxId + 1 : 2;\n}\nfunction makeFlowPayload({\n  id,\n  name,\n  nodes,\n  edges,\n  promptSettings,\n  nodeCounter\n}) {\n  return {\n    id,\n    name,\n    nodes,\n    edges,\n    promptSettings,\n    nodeCounter,\n    savedAt: Date.now()\n  };\n}\n\n/* ================================\n   Component\n   ================================ */\n\nexport default function App() {\n  _s();\n  // Hard-disable page scrolling (no browser scrollbar at all)\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Typing indicator + auto-scroll refs/state\n  const [isTyping, setIsTyping] = useState(false);\n  const chatScrollRef = useRef(null);\n\n  // Prompt Editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n\n  // Flow switcher UI state\n  const [flowsMeta, setFlowsMeta] = useState([]); // [{id,name,savedAt}]\n  const [activeFlowIdState, setActiveFlowIdState] = useState(null);\n  const [selectedFlowId, setSelectedFlowId] = useState(null);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n\n  // Shared card style (Node/Prompt/Edge)\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\"\n  };\n\n  // Auto-scroll whenever messages change or typing state toggles\n  useEffect(() => {\n    const el = chatScrollRef.current;\n    if (!el) return;\n    el.scrollTop = el.scrollHeight;\n  }, [chatHistory, isTyping]);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(({\n      id,\n      data\n    }) => {\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  /* ================================\n     Flow Switcher helpers\n     ================================ */\n  const refreshFlowsMeta = () => {\n    var _list$0$id, _list$;\n    const map = readFlows();\n    const list = Object.values(map).map(f => ({\n      id: f.id,\n      name: f.name || \"(unnamed)\",\n      savedAt: f.savedAt || 0\n    })).sort((a, b) => b.savedAt - a.savedAt);\n    const activeId = getActiveFlowId();\n    setFlowsMeta(list);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId || ((_list$0$id = (_list$ = list[0]) === null || _list$ === void 0 ? void 0 : _list$.id) !== null && _list$0$id !== void 0 ? _list$0$id : null));\n  };\n  const loadFlowById = id => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    setNodes(f.nodes || initialNodes);\n    setEdges(f.edges || []);\n    setPromptSettings(f.promptSettings || promptSettings);\n    nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n\n    // reset runtime/chat state\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n    history.current = [{\n      nodes: f.nodes || initialNodes,\n      edges: f.edges || []\n    }];\n    historyIndex.current = 0;\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n  };\n  const renameFlowById = id => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    const newName = window.prompt(\"Rename flow:\", f.name || \"My Flow\");\n    if (!newName) return;\n    f.name = newName;\n    f.savedAt = Date.now();\n    flows[id] = f;\n    writeFlows(flows);\n    refreshFlowsMeta();\n  };\n  const deleteFlowById = id => {\n    const flows = readFlows();\n    if (!flows[id]) return window.alert(\"Flow not found.\");\n    if (!window.confirm(\"Delete this flow permanently?\")) return;\n    delete flows[id];\n    writeFlows(flows);\n    if (getActiveFlowId() === id) {\n      const remaining = Object.values(flows);\n      if (remaining.length) {\n        const fallback = remaining.sort((a, b) => (b.savedAt || 0) - (a.savedAt || 0))[0];\n        setActiveFlowId(fallback.id);\n        loadFlowById(fallback.id);\n      } else {\n        const newId = String(Date.now());\n        const payload = makeFlowPayload({\n          id: newId,\n          name: \"My First Flow\",\n          nodes: initialNodes,\n          edges: initialEdges,\n          promptSettings,\n          nodeCounter: 2\n        });\n        const map = {};\n        map[newId] = payload;\n        writeFlows(map);\n        setActiveFlowId(newId);\n        loadFlowById(newId);\n      }\n    } else {\n      refreshFlowsMeta();\n    }\n  };\n\n  // Restore last active flow on refresh (or create first)\n  useEffect(() => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId();\n    if (activeId && flows[activeId]) {\n      const f = flows[activeId];\n      setNodes(f.nodes || initialNodes);\n      setEdges(f.edges || []);\n      setPromptSettings(f.promptSettings || promptSettings);\n      nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n      history.current = [{\n        nodes: f.nodes || initialNodes,\n        edges: f.edges || []\n      }];\n      historyIndex.current = 0;\n    } else {\n      const id = String(Date.now());\n      const payload = makeFlowPayload({\n        id,\n        name: \"My First Flow\",\n        nodes: initialNodes,\n        edges: initialEdges,\n        promptSettings,\n        nodeCounter\n      });\n      const map = readFlows();\n      map[id] = payload;\n      writeFlows(map);\n      setActiveFlowId(id);\n    }\n    refreshFlowsMeta();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        window.alert(\"Flow submitted successfully.\");\n      } else {\n        window.alert(\"Submission failed.\");\n      }\n    } catch {\n      window.alert(\"Backend error.\");\n    }\n  };\n\n  /* ================================\n     Save / New Flow (persistence)\n     ================================ */\n  const saveCurrentFlow = () => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId() || String(Date.now());\n    const existing = flows[activeId];\n    let name = existing === null || existing === void 0 ? void 0 : existing.name;\n    if (!name) {\n      name = window.prompt(\"Name this flow:\", \"My Flow\");\n      if (!name) return;\n    }\n    const payload = makeFlowPayload({\n      id: activeId,\n      name,\n      nodes,\n      edges: manualEdges,\n      promptSettings,\n      nodeCounter\n    });\n    flows[activeId] = payload;\n    writeFlows(flows);\n    setActiveFlowId(activeId);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId);\n    refreshFlowsMeta();\n    window.alert(`Saved ✓  (${name})`);\n  };\n  const createNewFlow = () => {\n    const name = window.prompt(\"New flow name:\", \"New Flow\");\n    if (!name) return;\n    const freshNodes = [{\n      id: \"1\",\n      data: {\n        message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: {\n        x: 250,\n        y: 0\n      },\n      type: \"default\"\n    }];\n    const freshEdges = [];\n    nodeCounter = 2;\n    setNodes(freshNodes);\n    setEdges(freshEdges);\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n    history.current = [{\n      nodes: freshNodes,\n      edges: freshEdges\n    }];\n    historyIndex.current = 0;\n    const id = String(Date.now());\n    const flows = readFlows();\n    flows[id] = makeFlowPayload({\n      id,\n      name,\n      nodes: freshNodes,\n      edges: freshEdges,\n      promptSettings,\n      nodeCounter\n    });\n    writeFlows(flows);\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n    window.alert(`New flow created ✓  (${name})`);\n  };\n\n  /* ================================\n     Chat + inputs\n     ================================ */\n\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    //  Free-chat mode with typing indicator\n    if (gptMode) {\n      try {\n        setIsTyping(true);\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        setIsTyping(true);\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              if (!inputValue.trim()) return;\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"38px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (!inputValue.trim()) return;\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 14px\",\n            border: \"none\",\n            height: \"38px\",\n            whiteSpace: \"nowrap\",\n            cursor: \"pointer\",\n            fontWeight: 600\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8\n        },\n        children: opts.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            padding: \"8px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\",\n            cursor: \"pointer\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              if (!inputValue.trim()) return;\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"38px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (!inputValue.trim()) return;\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 14px\",\n            border: \"none\",\n            height: \"38px\",\n            whiteSpace: \"nowrap\",\n            cursor: \"pointer\",\n            fontWeight: 600\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Edge cleanup\n  const handleEdgesChange = changes => {\n    const removedIds = new Set(changes.filter(c => c.type === \"remove\" && c.id).map(c => c.id));\n    const removedEdges = manualEdges.filter(e => removedIds.has(e.id));\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n    const updatedNodes = nodes.map(n => {\n      let data = {\n        ...n.data\n      };\n      let mutated = false;\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = {\n              ...data.options\n            };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = {\n              ...data.options\n            };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n      return mutated ? {\n        ...n,\n        data\n      } : n;\n    });\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter(e => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n\n  // For the Flow Switcher UI: is the selected flow the active one?\n  const activeSelected = Boolean(selectedFlowId && selectedFlowId === activeFlowIdState);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n      overflow: \"hidden\",\n      overscrollBehavior: \"contain\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          padding: \"8px 12px\",\n          background: \"#ffffffdd\",\n          backdropFilter: \"blur(6px)\",\n          borderBottom: \"1px solid #e5e7eb\",\n          zIndex: 12,\n          boxSizing: \"border-box\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: 6\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: 2,\n              borderRadius: 16,\n              background: \"conic-gradient(from 140deg, #e5e7eb, #cbd5e1, #e2e8f0, #e5e7eb)\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: \"relative\",\n                display: \"inline-flex\",\n                alignItems: \"center\",\n                padding: \"12px 20px\",\n                borderRadius: 14,\n                background: \"linear-gradient(180deg,#f8fafc,#eef2f7)\",\n                boxShadow: \"0 22px 38px rgba(15,23,42,0.18), 0 3px 8px rgba(0,0,0,0.08), inset 0 1px 0 rgba(255,255,255,0.85)\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  position: \"absolute\",\n                  top: 0,\n                  left: 8,\n                  right: 8,\n                  height: \"48%\",\n                  borderRadius: 12,\n                  background: \"linear-gradient(180deg, rgba(255,255,255,0.65), rgba(255,255,255,0))\",\n                  pointerEvents: \"none\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 847,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: 800,\n                  fontSize: 16,\n                  letterSpacing: 0.25,\n                  color: \"#334155\"\n                },\n                children: \"FlowChat Designer: A No-Code AI Chatbot Builder\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              gap: 8,\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedFlowId || \"\",\n              onChange: e => setSelectedFlowId(e.target.value),\n              style: {\n                height: 30,\n                padding: \"0 10px\",\n                borderRadius: 8,\n                border: `1px solid ${activeSelected ? \"#16a34a\" : \"#e5e7eb\"}`,\n                background: \"#fff\",\n                outline: \"none\"\n              },\n              children: [flowsMeta.length === 0 && /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"No flows\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 886,\n                columnNumber: 44\n              }, this), flowsMeta.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: f.id,\n                children: f.name\n              }, f.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 888,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 874,\n              columnNumber: 15\n            }, this), selectedFlowId && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: \"2px 8px\",\n                height: 26,\n                display: \"inline-flex\",\n                alignItems: \"center\",\n                borderRadius: 999,\n                border: `1px solid ${activeSelected ? \"#16a34a22\" : \"#6b728022\"}`,\n                background: activeSelected ? \"#16a34a11\" : \"#6b728011\",\n                color: activeSelected ? \"#16a34a\" : \"#6b7280\",\n                fontWeight: 600,\n                fontSize: 12\n              },\n              children: activeSelected ? \"Active\" : \"Not loaded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 895,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#0ea5e9\", \"#0284c7\"),\n              disabled: !selectedFlowId || activeSelected,\n              onClick: () => selectedFlowId && loadFlowById(selectedFlowId),\n              children: activeSelected ? \"Loaded\" : \"Load\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#f59e0b\", \"#d97706\"),\n              onClick: () => selectedFlowId && renameFlowById(selectedFlowId),\n              children: \"Rename\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 921,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#ef4444\", \"#dc2626\"),\n              onClick: () => selectedFlowId && deleteFlowById(selectedFlowId),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 927,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 873,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              gap: 8,\n              alignItems: \"center\",\n              flexWrap: \"wrap\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#4f46e5\", \"#4338ca\"),\n              onClick: () => {\n                const newId = nodeCounter.toString();\n                nodeCounter++;\n                const position = selectedNodeId ? {\n                  x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n                  y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n                } : {\n                  x: Math.random() * 400,\n                  y: Math.random() * 400\n                };\n                const newNode = {\n                  id: newId,\n                  data: {\n                    message: `This is node ${newId}`,\n                    type: \"choice\",\n                    options: {},\n                    capture: \"\",\n                    next: \"\"\n                  },\n                  position,\n                  type: \"default\"\n                };\n                const updatedNodes = [...nodes, newNode];\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              },\n              children: \"Add Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#14b8a6\", \"#0d9488\"),\n              onClick: () => {\n                const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n                  type: \"application/json\"\n                });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"conversation_data.json\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              },\n              children: \"Export JSON\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 977,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#ef4444\", \"#dc2626\"),\n              onClick: () => {\n                if (!selectedNodeId) return;\n                const deletedId = selectedNodeId;\n                const updatedNodesBase = nodes.filter(n => n.id !== deletedId);\n                const updatedEdges = manualEdges.filter(e => e.source !== deletedId && e.target !== deletedId);\n                const updatedNodes = updatedNodesBase.map(n => {\n                  const data = {\n                    ...n.data\n                  };\n                  let mutated = false;\n                  if (data.next === deletedId) {\n                    data.next = \"\";\n                    mutated = true;\n                  }\n                  if (data.options && Object.keys(data.options).length) {\n                    const opts = {\n                      ...data.options\n                    };\n                    for (const [k, v] of Object.entries(opts)) {\n                      if (v === deletedId) delete opts[k];\n                    }\n                    if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                      data.options = opts;\n                      mutated = true;\n                    }\n                  }\n                  return mutated ? {\n                    ...n,\n                    data\n                  } : n;\n                });\n                setNodes(updatedNodes);\n                setEdges(updatedEdges);\n                setSelectedNodeId(null);\n                pushToHistory(updatedNodes, updatedEdges);\n              },\n              children: \"Delete Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 995,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#10b981\", \"#059669\"),\n              onClick: submitFlow,\n              children: \"Submit Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1037,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#0ea5e9\", \"#0284c7\"),\n              onClick: saveCurrentFlow,\n              children: \"Save Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1040,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btnGrad(\"#64748b\", \"#475569\"),\n              onClick: createNewFlow,\n              children: \"New Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1043,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 945,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              gap: 12,\n              alignItems: \"flex-end\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 11,\n                  color: \"#64748b\",\n                  marginBottom: 4\n                },\n                children: \"Undo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1051,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                \"aria-label\": \"Undo\",\n                title: \"Undo\",\n                style: iconCircleGrad(\"#8b5cf6\", \"#7c3aed\"),\n                onClick: undo,\n                children: \"\\u21BA\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1052,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1050,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 11,\n                  color: \"#64748b\",\n                  marginBottom: 4\n                },\n                children: \"Redo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1062,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                \"aria-label\": \"Redo\",\n                title: \"Redo\",\n                style: iconCircleGrad(\"#f59e0b\", \"#d97706\"),\n                onClick: redo,\n                children: \"\\u21BB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1063,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1061,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1049,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 937,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 120,\n          left: 10,\n          bottom: 10,\n          width: 350,\n          boxSizing: \"border-box\",\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 28,\n          paddingLeft: 4,\n          scrollbarGutter: \"stable both-edges\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n          zIndex: 11\n        },\n        children: [/*#__PURE__*/_jsxDEV(PromptEditor, {\n          promptSettings: promptSettings,\n          setPromptSettings: setPromptSettings,\n          containerStyle: cardStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1096,\n          columnNumber: 11\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: [\"Editing Node: \", selectedNode.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  message: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const newType = e.target.value;\n              const updatedNodes = nodes.map(node => {\n                if (node.id !== selectedNodeId) return node;\n                const nd = {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    type: newType\n                  }\n                };\n                if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                  nd.data.options = {};\n                }\n                return nd;\n              });\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1141,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  capture: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  next: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1159,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 13\n        }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: \"Editing Edge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1178,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1179,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedEdge.label,\n            onChange: e => {\n              const newLabel = e.target.value;\n              const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n                ...edge,\n                label: newLabel\n              } : edge);\n              const sourceId = selectedEdge.source;\n              const targetId = selectedEdge.target;\n              const updatedNodes = nodes.map(node => {\n                if (node.id === sourceId) {\n                  const updated = {\n                    ...node\n                  };\n                  if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                    const newOptions = {\n                      ...updated.data.options\n                    };\n                    delete newOptions[selectedEdge.label];\n                    newOptions[newLabel] = targetId;\n                    updated.data.options = newOptions;\n                  } else {\n                    updated.data.next = targetId;\n                  }\n                  return updated;\n                }\n                return node;\n              });\n              setEdges(updatedEdges);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1180,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: handleEdgesChange,\n        onConnect: params => {\n          const sourceNode = nodes.find(n => n.id === params.source);\n          let label = \"\";\n          if (sourceNode && (sourceNode.data.type === \"choice\" || sourceNode.data.type === \"multi_choice\")) {\n            label = window.prompt(\"Enter option key for this connection:\", \"\") || \"\";\n            if (!label) return;\n          }\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 320,\n        margin: 10,\n        padding: 12,\n        background: \"#fff7ed\",\n        border: \"1px solid #f59e0b\",\n        borderRadius: 10,\n        boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"calc(100vh - 20px)\",\n        boxSizing: \"border-box\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 8,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Chat Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1298,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: btnGrad(\"#6366f1\", \"#4f46e5\"),\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1300,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 6,\n          paddingLeft: 2,\n          paddingTop: 2,\n          background: \"transparent\",\n          borderRadius: 8\n        },\n        ref: chatScrollRef //  attach scroll ref\n        ,\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 8\n          },\n          children: [chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\",\n              boxSizing: \"border-box\",\n              overflowWrap: \"anywhere\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1337,\n            columnNumber: 17\n          }, this)), isTyping && /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1352,\n            columnNumber: 28\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1335,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            opacity: 0.8\n          },\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1355,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1321,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0,\n          paddingTop: 8,\n          background: \"transparent\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1272,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 790,\n    columnNumber: 5\n  }, this);\n}\n\n/* ===== Typing Indicator component ===== */\n_s(App, \"wp4NyKq+jiRxL/BJT4ZBxBYz21k=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nfunction TypingIndicator() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        @keyframes dotPulse {\n          0% { opacity: .2; transform: translateY(0); }\n          50% { opacity: 1; transform: translateY(-2px); }\n          100% { opacity: .2; transform: translateY(0); }\n        }\n        .dot {\n          display: inline-block;\n          width: 6px;\n          height: 6px;\n          margin: 0 2px;\n          border-radius: 50%;\n          background: #92400e;\n          animation: dotPulse 1s infinite ease-in-out;\n        }\n        .dot:nth-child(2) { animation-delay: .15s; }\n        .dot:nth-child(3) { animation-delay: .3s; }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        alignSelf: \"flex-start\",\n        background: \"#fde68a\",\n        padding: 8,\n        borderRadius: 6,\n        maxWidth: \"90%\",\n        boxSizing: \"border-box\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1401,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1401,\n        columnNumber: 34\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1401,\n        columnNumber: 59\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1391,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n/* helper styles — gradients + compact sizes */\n_c2 = TypingIndicator;\nfunction btnGrad(from, to) {\n  return {\n    background: `linear-gradient(180deg, ${from}, ${to})`,\n    color: \"white\",\n    height: 30,\n    padding: \"0 12px\",\n    borderRadius: 8,\n    border: \"1px solid rgba(0,0,0,0.06)\",\n    // ✅ fixed quotes\n    cursor: \"pointer\",\n    fontWeight: 600,\n    fontSize: 13,\n    boxShadow: \"0 3px 8px rgba(0,0,0,0.08)\"\n  };\n}\nfunction iconCircleGrad(from, to) {\n  return {\n    background: `linear-gradient(180deg, ${from}, ${to})`,\n    color: \"white\",\n    width: 28,\n    height: 28,\n    borderRadius: 999,\n    border: \"1px solid rgba(0,0,0,0.06)\",\n    // ✅ fixed quotes\n    cursor: \"pointer\",\n    fontWeight: 700,\n    fontSize: 16,\n    lineHeight: \"28px\",\n    textAlign: \"center\",\n    boxShadow: \"0 3px 8px rgba(0,0,0,0.08)\"\n  };\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"TypingIndicator\");","map":{"version":3,"names":["React","useState","useMemo","useRef","useEffect","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","PromptEditor","jsxDEV","_jsxDEV","Fragment","_Fragment","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","FLOWS_KEY","ACTIVE_KEY","readFlows","JSON","parse","localStorage","getItem","writeFlows","map","setItem","stringify","setActiveFlowId","getActiveFlowId","computeNextCounterFromNodes","nodesArr","maxId","reduce","m","n","Math","max","Number","isFinite","makeFlowPayload","name","nodes","edges","promptSettings","savedAt","Date","now","App","_s","prevHtmlOverflow","document","documentElement","style","overflow","prevBodyOverflow","body","prevBodyMargin","margin","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","isTyping","setIsTyping","chatScrollRef","setPromptSettings","system_prompt","gpt_model","flowsMeta","setFlowsMeta","activeFlowIdState","setActiveFlowIdState","selectedFlowId","setSelectedFlowId","history","historyIndex","selectedNode","find","selectedEdge","e","cardStyle","background","padding","border","borderRadius","width","boxSizing","marginRight","boxShadow","el","current","scrollTop","scrollHeight","pushToHistory","newNodes","newEdges","currentState","newHistory","slice","push","undo","redo","length","getNodeStyle","baseStyle","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","color","autoGeneratedEdges","existing","Set","source","target","autoEdges","node","_node$data","has","animated","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","forEach","nodeObj","Object","keys","refreshFlowsMeta","_list$0$id","_list$","list","values","f","sort","a","b","activeId","loadFlowById","flows","window","alert","renameFlowById","newName","prompt","deleteFlowById","confirm","remaining","fallback","newId","String","payload","submitFlow","res","fetch","method","headers","ok","_payload$nodes$","firstMsg","sender","saveCurrentFlow","createNewFlow","freshNodes","freshEdges","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","user_inputs","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","trim","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","cursor","fontWeight","opts","flexDirection","opt","checked","includes","filter","o","join","marginTop","handleEdgesChange","changes","removedIds","c","removedEdges","updatedNodes","mutated","k","v","entries","remainingEdges","activeSelected","Boolean","overscrollBehavior","top","left","right","backdropFilter","borderBottom","zIndex","alignItems","justifyContent","marginBottom","pointerEvents","fontSize","letterSpacing","outline","btnGrad","disabled","flexWrap","toString","random","newNode","blob","Blob","url","URL","createObjectURL","link","createElement","href","download","appendChild","click","removeChild","deletedId","updatedNodesBase","updatedEdges","title","iconCircleGrad","bottom","overflowY","overflowX","paddingRight","paddingLeft","scrollbarGutter","containerStyle","newType","nd","newLabel","edge","sourceId","targetId","updated","newOptions","onConnect","params","sourceNode","edgeId","onNodeClick","_","onEdgeClick","fitView","edgeLabelMode","flexShrink","textContent","paddingTop","ref","index","alignSelf","overflowWrap","TypingIndicator","opacity","_c","className","_c2","from","to","lineHeight","textAlign","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\",\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\",\n  },\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n/* ================================\n   Flow persistence helpers\n   ================================ */\n\nconst FLOWS_KEY = \"mindpeace_flows\";          // map of id -> flow object\nconst ACTIVE_KEY = \"mindpeace_active_flow\";   // id of last active flow\n\nfunction readFlows() {\n  try { return JSON.parse(localStorage.getItem(FLOWS_KEY) || \"{}\"); }\n  catch { return {}; }\n}\nfunction writeFlows(map) {\n  localStorage.setItem(FLOWS_KEY, JSON.stringify(map));\n}\nfunction setActiveFlowId(id) {\n  localStorage.setItem(ACTIVE_KEY, id);\n}\nfunction getActiveFlowId() {\n  return localStorage.getItem(ACTIVE_KEY);\n}\nfunction computeNextCounterFromNodes(nodesArr) {\n  const maxId = nodesArr.reduce((m, n) => Math.max(m, Number(n.id) || 0), 0);\n  return (isFinite(maxId) ? maxId + 1 : 2);\n}\nfunction makeFlowPayload({ id, name, nodes, edges, promptSettings, nodeCounter }) {\n  return { id, name, nodes, edges, promptSettings, nodeCounter, savedAt: Date.now() };\n}\n\n/* ================================\n   Component\n   ================================ */\n\nexport default function App() {\n  // Hard-disable page scrolling (no browser scrollbar at all)\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Typing indicator + auto-scroll refs/state\n  const [isTyping, setIsTyping] = useState(false);\n  const chatScrollRef = useRef(null);\n\n  // Prompt Editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\",\n  });\n\n  // Flow switcher UI state\n  const [flowsMeta, setFlowsMeta] = useState([]);            // [{id,name,savedAt}]\n  const [activeFlowIdState, setActiveFlowIdState] = useState(null);\n  const [selectedFlowId, setSelectedFlowId] = useState(null);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  // Shared card style (Node/Prompt/Edge)\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n  };\n\n  // Auto-scroll whenever messages change or typing state toggles\n  useEffect(() => {\n    const el = chatScrollRef.current;\n    if (!el) return;\n    el.scrollTop = el.scrollHeight;\n  }, [chatHistory, isTyping]);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300,\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\",\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model,\n      },\n      nodes: {},\n    };\n    nodes.forEach(({ id, data }) => {\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n\n  /* ================================\n     Flow Switcher helpers\n     ================================ */\n  const refreshFlowsMeta = () => {\n    const map = readFlows();\n    const list = Object.values(map)\n      .map(f => ({ id: f.id, name: f.name || \"(unnamed)\", savedAt: f.savedAt || 0 }))\n      .sort((a, b) => b.savedAt - a.savedAt);\n    const activeId = getActiveFlowId();\n    setFlowsMeta(list);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId || (list[0]?.id ?? null));\n  };\n\n  const loadFlowById = (id) => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    setNodes(f.nodes || initialNodes);\n    setEdges(f.edges || []);\n    setPromptSettings(f.promptSettings || promptSettings);\n    nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n\n    // reset runtime/chat state\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n\n    history.current = [{ nodes: f.nodes || initialNodes, edges: f.edges || [] }];\n    historyIndex.current = 0;\n\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n  };\n\n  const renameFlowById = (id) => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    const newName = window.prompt(\"Rename flow:\", f.name || \"My Flow\");\n    if (!newName) return;\n    f.name = newName;\n    f.savedAt = Date.now();\n    flows[id] = f;\n    writeFlows(flows);\n    refreshFlowsMeta();\n  };\n\n  const deleteFlowById = (id) => {\n    const flows = readFlows();\n    if (!flows[id]) return window.alert(\"Flow not found.\");\n    if (!window.confirm(\"Delete this flow permanently?\")) return;\n\n    delete flows[id];\n    writeFlows(flows);\n\n    if (getActiveFlowId() === id) {\n      const remaining = Object.values(flows);\n      if (remaining.length) {\n        const fallback = remaining.sort((a,b) => (b.savedAt||0)-(a.savedAt||0))[0];\n        setActiveFlowId(fallback.id);\n        loadFlowById(fallback.id);\n      } else {\n        const newId = String(Date.now());\n        const payload = makeFlowPayload({\n          id: newId,\n          name: \"My First Flow\",\n          nodes: initialNodes,\n          edges: initialEdges,\n          promptSettings,\n          nodeCounter: 2\n        });\n        const map = {};\n        map[newId] = payload;\n        writeFlows(map);\n        setActiveFlowId(newId);\n        loadFlowById(newId);\n      }\n    } else {\n      refreshFlowsMeta();\n    }\n  };\n\n  // Restore last active flow on refresh (or create first)\n  useEffect(() => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId();\n    if (activeId && flows[activeId]) {\n      const f = flows[activeId];\n      setNodes(f.nodes || initialNodes);\n      setEdges(f.edges || []);\n      setPromptSettings(f.promptSettings || promptSettings);\n      nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n      history.current = [{ nodes: f.nodes || initialNodes, edges: f.edges || [] }];\n      historyIndex.current = 0;\n    } else {\n      const id = String(Date.now());\n      const payload = makeFlowPayload({\n        id,\n        name: \"My First Flow\",\n        nodes: initialNodes,\n        edges: initialEdges,\n        promptSettings,\n        nodeCounter\n      });\n      const map = readFlows();\n      map[id] = payload;\n      writeFlows(map);\n      setActiveFlowId(id);\n    }\n    refreshFlowsMeta();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        window.alert(\"Flow submitted successfully.\");\n      } else {\n        window.alert(\"Submission failed.\");\n      }\n    } catch {\n      window.alert(\"Backend error.\");\n    }\n  };\n\n  /* ================================\n     Save / New Flow (persistence)\n     ================================ */\n  const saveCurrentFlow = () => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId() || String(Date.now());\n    const existing = flows[activeId];\n\n    let name = existing?.name;\n    if (!name) {\n      name = window.prompt(\"Name this flow:\", \"My Flow\");\n      if (!name) return;\n    }\n\n    const payload = makeFlowPayload({\n      id: activeId,\n      name,\n      nodes,\n      edges: manualEdges,\n      promptSettings,\n      nodeCounter\n    });\n\n    flows[activeId] = payload;\n    writeFlows(flows);\n    setActiveFlowId(activeId);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId);\n    refreshFlowsMeta();\n    window.alert(`Saved ✓  (${name})`);\n  };\n\n  const createNewFlow = () => {\n    const name = window.prompt(\"New flow name:\", \"New Flow\");\n    if (!name) return;\n\n    const freshNodes = [{\n      id: \"1\",\n      data: {\n        message:\n          \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\",\n      },\n      position: { x: 250, y: 0 },\n      type: \"default\",\n    }];\n    const freshEdges = [];\n    nodeCounter = 2;\n\n    setNodes(freshNodes);\n    setEdges(freshEdges);\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n\n    history.current = [{ nodes: freshNodes, edges: freshEdges }];\n    historyIndex.current = 0;\n\n    const id = String(Date.now());\n    const flows = readFlows();\n    flows[id] = makeFlowPayload({\n      id, name, nodes: freshNodes, edges: freshEdges, promptSettings, nodeCounter\n    });\n    writeFlows(flows);\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n\n    window.alert(`New flow created ✓  (${name})`);\n  };\n\n  /* ================================\n     Chat + inputs\n     ================================ */\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message,\n    }));\n\n    //  Free-chat mode with typing indicator\n    if (gptMode) {\n      try {\n        setIsTyping(true);\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      } finally {\n        setIsTyping(false);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        setIsTyping(true);\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply },\n        ]);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" },\n        ]);\n      } finally {\n        setIsTyping(false);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                if (!inputValue.trim()) return;\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #f59e0b\",\n              background: \"#fff7ed\",\n              height: \"38px\",\n              boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => {\n              if (!inputValue.trim()) return;\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 14px\",\n              border: \"none\",\n              height: \"38px\",\n              whiteSpace: \"nowrap\",\n              cursor: \"pointer\",\n              fontWeight: 600,\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n          {opts.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => handleUserResponse(opt)}\n              style={{\n                padding: \"8px\",\n                width: \"100%\",\n                borderRadius: 6,\n                border: \"1px solid #0369a1\",\n                background: \"#0284c7\",\n                color: \"white\",\n                cursor: \"pointer\",\n              }}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div\n              key={opt}\n              style={{\n                background: \"#facc15\",\n                padding: \"4px 8px\",\n                borderRadius: \"4px\",\n                margin: \"4px 0\",\n              }}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\",\n              cursor: \"pointer\",\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                if (!inputValue.trim()) return;\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #f59e0b\",\n              background: \"#fff7ed\",\n              height: \"38px\",\n              boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => {\n              if (!inputValue.trim()) return;\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 14px\",\n              border: \"none\",\n              height: \"38px\",\n              whiteSpace: \"nowrap\",\n              cursor: \"pointer\",\n              fontWeight: 600,\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // Edge cleanup\n  const handleEdgesChange = (changes) => {\n    const removedIds = new Set(\n      changes.filter((c) => c.type === \"remove\" && c.id).map((c) => c.id)\n    );\n    const removedEdges = manualEdges.filter((e) => removedIds.has(e.id));\n\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n\n    const updatedNodes = nodes.map((n) => {\n      let data = { ...n.data };\n      let mutated = false;\n\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = { ...data.options };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = { ...data.options };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n\n      return mutated ? { ...n, data } : n;\n    });\n\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter((e) => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n\n\n  // For the Flow Switcher UI: is the selected flow the active one?\n  const activeSelected = Boolean(selectedFlowId && selectedFlowId === activeFlowIdState);\n\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        overflow: \"hidden\",\n        overscrollBehavior: \"contain\",\n      }}\n    >\n      {/* Left workspace */}\n      <div style={{ flex: 1, position: \"relative\", overflow: \"hidden\" }}>\n        {/* Header (2 rows): Row1 title+switcher, Row2 actions+undo/redo */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            padding: \"8px 12px\",\n            background: \"#ffffffdd\",\n            backdropFilter: \"blur(6px)\",\n            borderBottom: \"1px solid #e5e7eb\",\n            zIndex: 12,\n            boxSizing: \"border-box\",\n          }}\n        >\n          {/* Row 1 */}\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              marginBottom: 6,\n            }}\n          >\n            {/* Title ONLY — refined ring + sheen + deeper shadow */}\n            <div\n              style={{\n                padding: 2,\n                borderRadius: 16,\n                background:\n                  \"conic-gradient(from 140deg, #e5e7eb, #cbd5e1, #e2e8f0, #e5e7eb)\",\n              }}\n            >\n              <div\n                style={{\n                  position: \"relative\",\n                  display: \"inline-flex\",\n                  alignItems: \"center\",\n                  padding: \"12px 20px\",\n                  borderRadius: 14,\n                  background: \"linear-gradient(180deg,#f8fafc,#eef2f7)\",\n                  boxShadow:\n                    \"0 22px 38px rgba(15,23,42,0.18), 0 3px 8px rgba(0,0,0,0.08), inset 0 1px 0 rgba(255,255,255,0.85)\",\n                }}\n              >\n                {/* soft top sheen */}\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: 0,\n                    left: 8,\n                    right: 8,\n                    height: \"48%\",\n                    borderRadius: 12,\n                    background: \"linear-gradient(180deg, rgba(255,255,255,0.65), rgba(255,255,255,0))\",\n                    pointerEvents: \"none\",\n                  }}\n                />\n                <span\n                  style={{\n                    fontWeight: 800,\n                    fontSize: 16,\n                    letterSpacing: 0.25,\n                    color: \"#334155\",\n                  }}\n                >\n                  FlowChat Designer: A No-Code AI Chatbot Builder\n                </span>\n              </div>\n            </div>\n\n            {/* Flow Switcher (right) */}\n            <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\n              <select\n                value={selectedFlowId || \"\"}\n                onChange={(e) => setSelectedFlowId(e.target.value)}\n                style={{\n                  height: 30,\n                  padding: \"0 10px\",\n                  borderRadius: 8,\n                  border: `1px solid ${activeSelected ? \"#16a34a\" : \"#e5e7eb\"}`,\n                  background: \"#fff\",\n                  outline: \"none\",\n                }}\n              >\n                {flowsMeta.length === 0 && <option value=\"\">No flows</option>}\n                {flowsMeta.map((f) => (\n                  <option key={f.id} value={f.id}>\n                    {f.name}\n                  </option>\n                ))}\n              </select>\n\n              {selectedFlowId && (\n                <span\n                  style={{\n                    padding: \"2px 8px\",\n                    height: 26,\n                    display: \"inline-flex\",\n                    alignItems: \"center\",\n                    borderRadius: 999,\n                    border: `1px solid ${activeSelected ? \"#16a34a22\" : \"#6b728022\"}`,\n                    background: activeSelected ? \"#16a34a11\" : \"#6b728011\",\n                    color: activeSelected ? \"#16a34a\" : \"#6b7280\",\n                    fontWeight: 600,\n                    fontSize: 12,\n                  }}\n                >\n                  {activeSelected ? \"Active\" : \"Not loaded\"}\n                </span>\n              )}\n\n              <button\n                style={btnGrad(\"#0ea5e9\", \"#0284c7\")}\n                disabled={!selectedFlowId || activeSelected}\n                onClick={() => selectedFlowId && loadFlowById(selectedFlowId)}\n              >\n                {activeSelected ? \"Loaded\" : \"Load\"}\n              </button>\n\n              <button\n                style={btnGrad(\"#f59e0b\", \"#d97706\")}\n                onClick={() => selectedFlowId && renameFlowById(selectedFlowId)}\n              >\n                Rename\n              </button>\n              <button\n                style={btnGrad(\"#ef4444\", \"#dc2626\")}\n                onClick={() => selectedFlowId && deleteFlowById(selectedFlowId)}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n\n          {/* Row 2 */}\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            {/* Actions (left) */}\n            <div style={{ display: \"flex\", gap: 8, alignItems: \"center\", flexWrap: \"wrap\" }}>\n              <button\n                style={btnGrad(\"#4f46e5\", \"#4338ca\")}\n                onClick={() => {\n                  const newId = nodeCounter.toString();\n                  nodeCounter++;\n                  const position = selectedNodeId\n                    ? {\n                        x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                        y: nodes.find((n) => n.id === selectedNodeId).position.y + 50,\n                      }\n                    : { x: Math.random() * 400, y: Math.random() * 400 };\n                  const newNode = {\n                    id: newId,\n                    data: {\n                      message: `This is node ${newId}`,\n                      type: \"choice\",\n                      options: {},\n                      capture: \"\",\n                      next: \"\",\n                    },\n                    position,\n                    type: \"default\",\n                  };\n                  const updatedNodes = [...nodes, newNode];\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n              >\n                Add Node\n              </button>\n\n              <button\n                style={btnGrad(\"#14b8a6\", \"#0d9488\")}\n                onClick={() => {\n                  const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n                    type: \"application/json\",\n                  });\n                  const url = URL.createObjectURL(blob);\n                  const link = document.createElement(\"a\");\n                  link.href = url;\n                  link.download = \"conversation_data.json\";\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                }}\n              >\n                Export JSON\n              </button>\n\n              <button\n                style={btnGrad(\"#ef4444\", \"#dc2626\")}\n                onClick={() => {\n                  if (!selectedNodeId) return;\n\n                  const deletedId = selectedNodeId;\n\n                  const updatedNodesBase = nodes.filter((n) => n.id !== deletedId);\n                  const updatedEdges = manualEdges.filter(\n                    (e) => e.source !== deletedId && e.target !== deletedId\n                  );\n\n                  const updatedNodes = updatedNodesBase.map((n) => {\n                    const data = { ...n.data };\n                    let mutated = false;\n\n                    if (data.next === deletedId) {\n                      data.next = \"\";\n                      mutated = true;\n                    }\n                    if (data.options && Object.keys(data.options).length) {\n                      const opts = { ...data.options };\n                      for (const [k, v] of Object.entries(opts)) {\n                        if (v === deletedId) delete opts[k];\n                      }\n                      if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                        data.options = opts;\n                        mutated = true;\n                      }\n                    }\n                    return mutated ? { ...n, data } : n;\n                  });\n\n                  setNodes(updatedNodes);\n                  setEdges(updatedEdges);\n                  setSelectedNodeId(null);\n                  pushToHistory(updatedNodes, updatedEdges);\n                }}\n              >\n                Delete Node\n              </button>\n\n              <button style={btnGrad(\"#10b981\", \"#059669\")} onClick={submitFlow}>\n                Submit Flow\n              </button>\n              <button style={btnGrad(\"#0ea5e9\", \"#0284c7\")} onClick={saveCurrentFlow}>\n                Save Flow\n              </button>\n              <button style={btnGrad(\"#64748b\", \"#475569\")} onClick={createNewFlow}>\n                New Flow\n              </button>\n            </div>\n\n            {/* Undo/Redo (right) — icon-only with labels above */}\n            <div style={{ display: \"flex\", gap: 12, alignItems: \"flex-end\" }}>\n              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                <span style={{ fontSize: 11, color: \"#64748b\", marginBottom: 4 }}>Undo</span>\n                <button\n                  aria-label=\"Undo\"\n                  title=\"Undo\"\n                  style={iconCircleGrad(\"#8b5cf6\", \"#7c3aed\")}\n                  onClick={undo}\n                >\n                  ↺\n                </button>\n              </div>\n              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                <span style={{ fontSize: 11, color: \"#64748b\", marginBottom: 4 }}>Redo</span>\n                <button\n                  aria-label=\"Redo\"\n                  title=\"Redo\"\n                  style={iconCircleGrad(\"#f59e0b\", \"#d97706\")}\n                  onClick={redo}\n                >\n                  ↻\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Inspector column — spacing below header */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 120,\n            left: 10,\n            bottom: 10,\n            width: 350,\n            boxSizing: \"border-box\",\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 28,\n            paddingLeft: 4,\n            scrollbarGutter: \"stable both-edges\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 12,\n            zIndex: 11,\n          }}\n        >\n          <PromptEditor\n            promptSettings={promptSettings}\n            setPromptSettings={setPromptSettings}\n            containerStyle={cardStyle}\n          />\n\n          {selectedNode && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Node: {selectedNode.id}</h4>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, message: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\", height: 60 }}\n              />\n              <label>Type:</label>\n              <select\n                value={selectedNode.data.type}\n                onChange={(e) => {\n                  const newType = e.target.value;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id !== selectedNodeId) return node;\n                    const nd = { ...node, data: { ...node.data, type: newType } };\n                    if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                      nd.data.options = {};\n                    }\n                    return nd;\n                  });\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              >\n                <option value=\"choice\">choice</option>\n                <option value=\"input\">input</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n              <label>Capture Field:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.capture}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, capture: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n              <label>Next Node ID:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.next}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, next: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n\n          {selectedEdge && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Edge</h4>\n              <label>Option Label:</label>\n              <input\n                type=\"text\"\n                value={selectedEdge.label}\n                onChange={(e) => {\n                  const newLabel = e.target.value;\n                  const updatedEdges = manualEdges.map((edge) =>\n                    edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n                  );\n                  const sourceId = selectedEdge.source;\n                  const targetId = selectedEdge.target;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id === sourceId) {\n                      const updated = { ...node };\n                      if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                        const newOptions = { ...updated.data.options };\n                        delete newOptions[selectedEdge.label];\n                        newOptions[newLabel] = targetId;\n                        updated.data.options = newOptions;\n                      } else {\n                        updated.data.next = targetId;\n                      }\n                      return updated;\n                    }\n                    return node;\n                  });\n                  setEdges(updatedEdges);\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, updatedEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Flow canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type),\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={handleEdgesChange}\n          onConnect={(params) => {\n            const sourceNode = nodes.find(n => n.id === params.source);\n            let label = \"\";\n            if (sourceNode && (sourceNode.data.type === \"choice\" || sourceNode.data.type === \"multi_choice\")) {\n              label = window.prompt(\"Enter option key for this connection:\", \"\") || \"\";\n              if (!label) return;\n            }\n            const edgeId = `e${params.source}-${params.target}`;\n            \n            const updatedEdges = addEdge(\n              { ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label },\n              manualEdges\n            );\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel */}\n      <div\n        style={{\n          width: 320,\n          margin: 10,\n          padding: 12,\n          background: \"#fff7ed\",\n          border: \"1px solid #f59e0b\",\n          borderRadius: 10,\n          boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"calc(100vh - 20px)\",\n          boxSizing: \"border-box\",\n          overflow: \"hidden\",\n        }}\n      >\n        <div\n          style={{\n            fontWeight: \"bold\",\n            marginBottom: 8,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            flexShrink: 0,\n          }}\n        >\n          <span>Chat Assistant</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"chat_history.txt\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n              style={btnGrad(\"#6366f1\", \"#4f46e5\")}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        <div\n          style={{\n            flex: 1,\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 6,\n            paddingLeft: 2,\n            paddingTop: 2,\n            background: \"transparent\",\n            borderRadius: 8,\n          }}\n          ref={chatScrollRef}  //  attach scroll ref\n        >\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n              {chatHistory.map((entry, index) => (\n                <div\n                  key={index}\n                  style={{\n                    alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                    background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n                    padding: 8,\n                    borderRadius: 6,\n                    maxWidth: \"90%\",\n                    boxSizing: \"border-box\",\n                    overflowWrap: \"anywhere\",\n                  }}\n                >\n                  {entry.message}\n                </div>\n              ))}\n              {isTyping && <TypingIndicator />} {/* ✅ three moving dots */}\n            </div>\n          ) : (\n            <div style={{ opacity: 0.8 }}>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {chatbotReady && (\n          <div style={{ flexShrink: 0, paddingTop: 8, background: \"transparent\" }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/* ===== Typing Indicator component ===== */\nfunction TypingIndicator() {\n  return (\n    <>\n      <style>{`\n        @keyframes dotPulse {\n          0% { opacity: .2; transform: translateY(0); }\n          50% { opacity: 1; transform: translateY(-2px); }\n          100% { opacity: .2; transform: translateY(0); }\n        }\n        .dot {\n          display: inline-block;\n          width: 6px;\n          height: 6px;\n          margin: 0 2px;\n          border-radius: 50%;\n          background: #92400e;\n          animation: dotPulse 1s infinite ease-in-out;\n        }\n        .dot:nth-child(2) { animation-delay: .15s; }\n        .dot:nth-child(3) { animation-delay: .3s; }\n      `}</style>\n      <div\n        style={{\n          alignSelf: \"flex-start\",\n          background: \"#fde68a\",\n          padding: 8,\n          borderRadius: 6,\n          maxWidth: \"90%\",\n          boxSizing: \"border-box\",\n        }}\n      >\n        <span className=\"dot\" /> <span className=\"dot\" /> <span className=\"dot\" />\n      </div>\n    </>\n  );\n}\n\n/* helper styles — gradients + compact sizes */\nfunction btnGrad(from, to) {\n  return {\n    background: `linear-gradient(180deg, ${from}, ${to})`,\n    color: \"white\",\n    height: 30,\n    padding: \"0 12px\",\n    borderRadius: 8,\n    border: \"1px solid rgba(0,0,0,0.06)\",  // ✅ fixed quotes\n    cursor: \"pointer\",\n    fontWeight: 600,\n    fontSize: 13,\n    boxShadow: \"0 3px 8px rgba(0,0,0,0.08)\",\n  };\n}\nfunction iconCircleGrad(from, to) {\n  return {\n    background: `linear-gradient(180deg, ${from}, ${to})`,\n    color: \"white\",\n    width: 28,\n    height: 28,\n    borderRadius: 999,\n    border: \"1px solid rgba(0,0,0,0.06)\",  // ✅ fixed quotes\n    cursor: \"pointer\",\n    fontWeight: 700,\n    fontSize: 16,\n    lineHeight: \"28px\",\n    textAlign: \"center\",\n    boxShadow: \"0 3px 8px rgba(0,0,0,0.08)\",\n  };\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}