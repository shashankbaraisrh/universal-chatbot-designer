{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// PART 1/3 — App.js (top)\n\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n/* ================================\n   Flow persistence helpers\n   ================================ */\n\nconst FLOWS_KEY = \"mindpeace_flows\"; // map of id -> flow object\nconst ACTIVE_KEY = \"mindpeace_active_flow\"; // id of last active flow\n\nfunction readFlows() {\n  try {\n    return JSON.parse(localStorage.getItem(FLOWS_KEY) || \"{}\");\n  } catch {\n    return {};\n  }\n}\nfunction writeFlows(map) {\n  localStorage.setItem(FLOWS_KEY, JSON.stringify(map));\n}\nfunction setActiveFlowId(id) {\n  localStorage.setItem(ACTIVE_KEY, id);\n}\nfunction getActiveFlowId() {\n  return localStorage.getItem(ACTIVE_KEY);\n}\nfunction computeNextCounterFromNodes(nodesArr) {\n  const maxId = nodesArr.reduce((m, n) => Math.max(m, Number(n.id) || 0), 0);\n  return isFinite(maxId) ? maxId + 1 : 2;\n}\nfunction makeFlowPayload({\n  id,\n  name,\n  nodes,\n  edges,\n  promptSettings,\n  nodeCounter\n}) {\n  return {\n    id,\n    name,\n    nodes,\n    edges,\n    promptSettings,\n    nodeCounter,\n    savedAt: Date.now()\n  };\n}\n\n/* ================================\n   Component\n   ================================ */\n\nexport default function App() {\n  _s();\n  // Hard-disable page scrolling (no browser scrollbar at all)\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt Editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n\n  // Flow switcher UI state\n  const [flowsMeta, setFlowsMeta] = useState([]); // [{id,name,savedAt}]\n  const [activeFlowIdState, setActiveFlowIdState] = useState(null);\n  const [selectedFlowId, setSelectedFlowId] = useState(null);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n\n  // Shared card style (Node/Prompt/Edge)\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\"\n  };\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(({\n      id,\n      data\n    }) => {\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  // PART 2/3 — continue immediately after Part 1\n\n  /* ================================\n     Flow Switcher helpers\n     ================================ */\n  const refreshFlowsMeta = () => {\n    var _list$0$id, _list$;\n    const map = readFlows();\n    const list = Object.values(map).map(f => ({\n      id: f.id,\n      name: f.name || \"(unnamed)\",\n      savedAt: f.savedAt || 0\n    })).sort((a, b) => b.savedAt - a.savedAt);\n    const activeId = getActiveFlowId();\n    setFlowsMeta(list);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId || ((_list$0$id = (_list$ = list[0]) === null || _list$ === void 0 ? void 0 : _list$.id) !== null && _list$0$id !== void 0 ? _list$0$id : null));\n  };\n  const loadFlowById = id => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    setNodes(f.nodes || initialNodes);\n    setEdges(f.edges || []);\n    setPromptSettings(f.promptSettings || promptSettings);\n    nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n\n    // reset runtime/chat state\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n    history.current = [{\n      nodes: f.nodes || initialNodes,\n      edges: f.edges || []\n    }];\n    historyIndex.current = 0;\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n  };\n  const renameFlowById = id => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    const newName = window.prompt(\"Rename flow:\", f.name || \"My Flow\");\n    if (!newName) return;\n    f.name = newName;\n    f.savedAt = Date.now();\n    flows[id] = f;\n    writeFlows(flows);\n    refreshFlowsMeta();\n  };\n  const deleteFlowById = id => {\n    const flows = readFlows();\n    if (!flows[id]) return window.alert(\"Flow not found.\");\n    // ESLint-safe confirm\n    if (!window.confirm(\"Delete this flow permanently?\")) return;\n    delete flows[id];\n    writeFlows(flows);\n\n    // if active was deleted, load another or create a fresh one\n    if (getActiveFlowId() === id) {\n      const remaining = Object.values(flows);\n      if (remaining.length) {\n        const fallback = remaining.sort((a, b) => (b.savedAt || 0) - (a.savedAt || 0))[0];\n        setActiveFlowId(fallback.id);\n        loadFlowById(fallback.id);\n      } else {\n        // No flows left — create a brand new initial flow\n        const newId = String(Date.now());\n        const payload = makeFlowPayload({\n          id: newId,\n          name: \"My First Flow\",\n          nodes: initialNodes,\n          edges: initialEdges,\n          promptSettings,\n          nodeCounter: 2\n        });\n        const map = {};\n        map[newId] = payload;\n        writeFlows(map);\n        setActiveFlowId(newId);\n        loadFlowById(newId);\n      }\n    } else {\n      refreshFlowsMeta();\n    }\n  };\n\n  // Restore last active flow on refresh (or create first)\n  useEffect(() => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId();\n    if (activeId && flows[activeId]) {\n      const f = flows[activeId];\n      setNodes(f.nodes || initialNodes);\n      setEdges(f.edges || []);\n      setPromptSettings(f.promptSettings || promptSettings);\n      nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n      history.current = [{\n        nodes: f.nodes || initialNodes,\n        edges: f.edges || []\n      }];\n      historyIndex.current = 0;\n    } else {\n      const id = String(Date.now());\n      const payload = makeFlowPayload({\n        id,\n        name: \"My First Flow\",\n        nodes: initialNodes,\n        edges: initialEdges,\n        promptSettings,\n        nodeCounter\n      });\n      const map = readFlows();\n      map[id] = payload;\n      writeFlows(map);\n      setActiveFlowId(id);\n    }\n    refreshFlowsMeta();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        window.alert(\"Flow submitted successfully.\");\n      } else {\n        window.alert(\"Submission failed.\");\n      }\n    } catch {\n      window.alert(\"Backend error.\");\n    }\n  };\n\n  /* ================================\n     Save / New Flow (persistence)\n     ================================ */\n  const saveCurrentFlow = () => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId() || String(Date.now());\n    const existing = flows[activeId];\n    let name = existing === null || existing === void 0 ? void 0 : existing.name;\n    if (!name) {\n      name = window.prompt(\"Name this flow:\", \"My Flow\");\n      if (!name) return;\n    }\n    const payload = makeFlowPayload({\n      id: activeId,\n      name,\n      nodes,\n      edges: manualEdges,\n      promptSettings,\n      nodeCounter\n    });\n    flows[activeId] = payload;\n    writeFlows(flows);\n    setActiveFlowId(activeId);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId);\n    refreshFlowsMeta();\n    window.alert(`Saved ✓  (${name})`);\n  };\n  const createNewFlow = () => {\n    const name = window.prompt(\"New flow name:\", \"New Flow\");\n    if (!name) return;\n    const freshNodes = [{\n      id: \"1\",\n      data: {\n        message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: {\n        x: 250,\n        y: 0\n      },\n      type: \"default\"\n    }];\n    const freshEdges = [];\n    nodeCounter = 2;\n    setNodes(freshNodes);\n    setEdges(freshEdges);\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n    history.current = [{\n      nodes: freshNodes,\n      edges: freshEdges\n    }];\n    historyIndex.current = 0;\n    const id = String(Date.now());\n    const flows = readFlows();\n    flows[id] = makeFlowPayload({\n      id,\n      name,\n      nodes: freshNodes,\n      edges: freshEdges,\n      promptSettings,\n      nodeCounter\n    });\n    writeFlows(flows);\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n    window.alert(`New flow created ✓  (${name})`);\n  };\n\n  /* ================================\n     Chat + inputs\n     ================================ */\n\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"40px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\",\n            cursor: \"pointer\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8\n        },\n        children: opts.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            padding: \"8px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\",\n            cursor: \"pointer\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"40px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Edge cleanup\n  const handleEdgesChange = changes => {\n    const removedIds = new Set(changes.filter(c => c.type === \"remove\" && c.id).map(c => c.id));\n    const removedEdges = manualEdges.filter(e => removedIds.has(e.id));\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n    const updatedNodes = nodes.map(n => {\n      let data = {\n        ...n.data\n      };\n      let mutated = false;\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = {\n              ...data.options\n            };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = {\n              ...data.options\n            };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n      return mutated ? {\n        ...n,\n        data\n      } : n;\n    });\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter(e => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n  // PART 3/3 — continue immediately after Part 2\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n      overflow: \"hidden\",\n      overscrollBehavior: \"contain\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          padding: \"8px 12px\",\n          background: \"#ffffffcc\",\n          backdropFilter: \"blur(6px)\",\n          borderBottom: \"1px solid #e5e7eb\",\n          zIndex: 12,\n          boxSizing: \"border-box\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: 8\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"inline-flex\",\n              alignItems: \"center\",\n              gap: 10,\n              padding: \"10px 14px\",\n              background: \"#fff\",\n              borderRadius: 12,\n              border: \"1px solid #e5e7eb\",\n              boxShadow: \"0 6px 14px rgba(0,0,0,0.08)\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: 10,\n                height: 10,\n                borderRadius: \"50%\",\n                background: \"#0284c7\",\n                boxShadow: \"0 0 0 3px rgba(2,132,199,0.15)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontWeight: 700,\n                color: \"#0f172a\"\n              },\n              children: \"Your AI Chatbot Designer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 826,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: 6,\n                color: \"#64748b\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: pill(\"#0ea5e9\"),\n                children: \"Fast\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\xB7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: pill(\"#16a34a\"),\n                children: \"Visual\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\xB7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: pill(\"#7c3aed\"),\n                children: \"Code-Free\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 834,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              gap: 8,\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedFlowId || \"\",\n              onChange: e => setSelectedFlowId(e.target.value),\n              style: {\n                padding: \"6px 8px\",\n                borderRadius: 6,\n                border: \"1px solid #e5e7eb\",\n                background: \"#fff\"\n              },\n              children: [flowsMeta.length === 0 && /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"No flows\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 850,\n                columnNumber: 44\n              }, this), flowsMeta.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: f.id,\n                children: [f.name, \" \", activeFlowIdState === f.id ? \"•\" : \"\"]\n              }, f.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 852,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 840,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"#0ea5e9\"),\n              onClick: () => {\n                if (!selectedFlowId) return;\n                loadFlowById(selectedFlowId);\n              },\n              children: \"Load\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 857,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"#f97316\"),\n              onClick: () => {\n                if (!selectedFlowId) return;\n                renameFlowById(selectedFlowId);\n              },\n              children: \"Rename\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 866,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"#dc2626\"),\n              onClick: () => {\n                if (!selectedFlowId) return;\n                deleteFlowById(selectedFlowId);\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10,\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#38bdf8\"),\n            onClick: () => {\n              const newId = nodeCounter.toString();\n              nodeCounter++;\n              const position = selectedNodeId ? {\n                x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n                y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n              } : {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              };\n              const newNode = {\n                id: newId,\n                data: {\n                  message: `This is node ${newId}`,\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position,\n                type: \"default\"\n              };\n              const updatedNodes = [...nodes, newNode];\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            children: \"Add Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#22c55e\"),\n            onClick: () => {\n              const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n                type: \"application/json\"\n              });\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"conversation_data.json\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            },\n            children: \"Export JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#ef4444\"),\n            onClick: () => {\n              if (!selectedNodeId) return;\n              const deletedId = selectedNodeId;\n              const updatedNodesBase = nodes.filter(n => n.id !== deletedId);\n              const updatedEdges = manualEdges.filter(e => e.source !== deletedId && e.target !== deletedId);\n              const updatedNodes = updatedNodesBase.map(n => {\n                const data = {\n                  ...n.data\n                };\n                let mutated = false;\n                if (data.next === deletedId) {\n                  data.next = \"\";\n                  mutated = true;\n                }\n                if (data.options && Object.keys(data.options).length) {\n                  const opts = {\n                    ...data.options\n                  };\n                  for (const [k, v] of Object.entries(opts)) {\n                    if (v === deletedId) delete opts[k];\n                  }\n                  if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                    data.options = opts;\n                    mutated = true;\n                  }\n                }\n                return mutated ? {\n                  ...n,\n                  data\n                } : n;\n              });\n              setNodes(updatedNodes);\n              setEdges(updatedEdges);\n              setSelectedNodeId(null);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            children: \"Delete Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 938,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#10b981\"),\n            onClick: submitFlow,\n            children: \"Submit Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#0ea5e9\"),\n            onClick: saveCurrentFlow,\n            children: \"Save Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 983,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#6b7280\"),\n            onClick: createNewFlow,\n            children: \"New Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 986,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: \"auto\",\n              display: \"flex\",\n              gap: 10\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"#a855f7\"),\n              onClick: undo,\n              children: \"Undo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 992,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"#f59e0b\"),\n              onClick: redo,\n              children: \"Redo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 995,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 991,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          // header is now 2 rows (~110px)\n          left: 10,\n          bottom: 10,\n          width: 350,\n          boxSizing: \"border-box\",\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 28,\n          paddingLeft: 4,\n          scrollbarGutter: \"stable both-edges\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n          zIndex: 11\n        },\n        children: [/*#__PURE__*/_jsxDEV(PromptEditor, {\n          promptSettings: promptSettings,\n          setPromptSettings: setPromptSettings,\n          containerStyle: cardStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 11\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: [\"Editing Node: \", selectedNode.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1030,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1031,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  message: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1032,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1045,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const newType = e.target.value;\n              const updatedNodes = nodes.map(node => {\n                if (node.id !== selectedNodeId) return node;\n                const nd = {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    type: newType\n                  }\n                };\n                if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                  nd.data.options = {};\n                }\n                return nd;\n              });\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1063,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1064,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1065,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1066,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1067,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1046,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1069,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  capture: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1070,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1084,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  next: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1085,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 13\n        }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: \"Editing Edge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedEdge.label,\n            onChange: e => {\n              const newLabel = e.target.value;\n              const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n                ...edge,\n                label: newLabel\n              } : edge);\n              const sourceId = selectedEdge.source;\n              const targetId = selectedEdge.target;\n              const updatedNodes = nodes.map(node => {\n                if (node.id === sourceId) {\n                  const updated = {\n                    ...node\n                  };\n                  if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                    const newOptions = {\n                      ...updated.data.options\n                    };\n                    delete newOptions[selectedEdge.label];\n                    newOptions[newLabel] = targetId;\n                    updated.data.options = newOptions;\n                  } else {\n                    updated.data.next = targetId;\n                  }\n                  return updated;\n                }\n                return node;\n              });\n              setEdges(updatedEdges);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: handleEdgesChange,\n        onConnect: params => {\n          const sourceNode = nodes.find(n => n.id === params.source);\n          let label = \"\";\n          if (sourceNode && (sourceNode.data.type === \"choice\" || sourceNode.data.type === \"multi_choice\")) {\n            label = window.prompt(\"Enter option key for this connection:\", \"\") || \"\";\n            if (!label) return;\n          }\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 320,\n        margin: 10,\n        padding: 12,\n        background: \"#fff7ed\",\n        border: \"1px solid #f59e0b\",\n        borderRadius: 10,\n        boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"calc(100vh - 20px)\",\n        boxSizing: \"border-box\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 8,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1223,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: {\n            background: \"#6366f1\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"6px\",\n            padding: \"4px 8px\",\n            fontSize: \"12px\",\n            cursor: \"pointer\"\n          },\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 6,\n          paddingLeft: 2,\n          paddingTop: 2,\n          background: \"transparent\",\n          borderRadius: 8\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 8\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\",\n              boxSizing: \"border-box\",\n              overflowWrap: \"anywhere\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1270,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1268,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            opacity: 0.8\n          },\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1287,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1255,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0,\n          paddingTop: 8,\n          background: \"transparent\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1293,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 770,\n    columnNumber: 5\n  }, this);\n}\n\n/* helper styles */\n_s(App, \"AZuoEKg+iGmOg74GCfETlozxCjM=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nfunction btn(bg) {\n  return {\n    background: bg,\n    color: \"white\",\n    borderRadius: 6,\n    padding: \"6px 12px\",\n    border: \"none\",\n    cursor: \"pointer\"\n  };\n}\nfunction pill(color) {\n  return {\n    padding: \"2px 8px\",\n    borderRadius: 999,\n    border: `1px solid ${color}22`,\n    background: `${color}11`,\n    color,\n    fontWeight: 600,\n    fontSize: 12\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","useEffect","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","PromptEditor","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","FLOWS_KEY","ACTIVE_KEY","readFlows","JSON","parse","localStorage","getItem","writeFlows","map","setItem","stringify","setActiveFlowId","getActiveFlowId","computeNextCounterFromNodes","nodesArr","maxId","reduce","m","n","Math","max","Number","isFinite","makeFlowPayload","name","nodes","edges","promptSettings","savedAt","Date","now","App","_s","prevHtmlOverflow","document","documentElement","style","overflow","prevBodyOverflow","body","prevBodyMargin","margin","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","setPromptSettings","system_prompt","gpt_model","flowsMeta","setFlowsMeta","activeFlowIdState","setActiveFlowIdState","selectedFlowId","setSelectedFlowId","history","historyIndex","selectedNode","find","selectedEdge","e","cardStyle","background","padding","border","borderRadius","width","boxSizing","marginRight","boxShadow","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","color","autoGeneratedEdges","existing","Set","source","target","autoEdges","node","_node$data","has","animated","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","forEach","nodeObj","Object","keys","refreshFlowsMeta","_list$0$id","_list$","list","values","f","sort","a","b","activeId","loadFlowById","flows","window","alert","renameFlowById","newName","prompt","deleteFlowById","confirm","remaining","fallback","newId","String","payload","submitFlow","res","fetch","method","headers","ok","_payload$nodes$","firstMsg","sender","saveCurrentFlow","createNewFlow","freshNodes","freshEdges","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","user_inputs","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","cursor","opts","flexDirection","opt","checked","includes","filter","o","join","marginTop","handleEdgesChange","changes","removedIds","c","removedEdges","updatedNodes","mutated","k","v","entries","remainingEdges","overscrollBehavior","top","left","right","backdropFilter","borderBottom","zIndex","alignItems","justifyContent","marginBottom","fontWeight","pill","btn","toString","random","newNode","blob","Blob","url","URL","createObjectURL","link","createElement","href","download","appendChild","click","removeChild","deletedId","updatedNodesBase","updatedEdges","marginLeft","bottom","overflowY","overflowX","paddingRight","paddingLeft","scrollbarGutter","containerStyle","newType","nd","newLabel","edge","sourceId","targetId","updated","newOptions","onConnect","params","sourceNode","edgeId","onNodeClick","_","onEdgeClick","fitView","edgeLabelMode","flexShrink","textContent","fontSize","paddingTop","index","alignSelf","overflowWrap","opacity","_c","bg","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["// PART 1/3 — App.js (top)\n\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\",\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\",\n  },\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n/* ================================\n   Flow persistence helpers\n   ================================ */\n\nconst FLOWS_KEY = \"mindpeace_flows\";          // map of id -> flow object\nconst ACTIVE_KEY = \"mindpeace_active_flow\";   // id of last active flow\n\nfunction readFlows() {\n  try { return JSON.parse(localStorage.getItem(FLOWS_KEY) || \"{}\"); }\n  catch { return {}; }\n}\nfunction writeFlows(map) {\n  localStorage.setItem(FLOWS_KEY, JSON.stringify(map));\n}\nfunction setActiveFlowId(id) {\n  localStorage.setItem(ACTIVE_KEY, id);\n}\nfunction getActiveFlowId() {\n  return localStorage.getItem(ACTIVE_KEY);\n}\nfunction computeNextCounterFromNodes(nodesArr) {\n  const maxId = nodesArr.reduce((m, n) => Math.max(m, Number(n.id) || 0), 0);\n  return (isFinite(maxId) ? maxId + 1 : 2);\n}\nfunction makeFlowPayload({ id, name, nodes, edges, promptSettings, nodeCounter }) {\n  return { id, name, nodes, edges, promptSettings, nodeCounter, savedAt: Date.now() };\n}\n\n/* ================================\n   Component\n   ================================ */\n\nexport default function App() {\n  // Hard-disable page scrolling (no browser scrollbar at all)\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt Editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\",\n  });\n\n  // Flow switcher UI state\n  const [flowsMeta, setFlowsMeta] = useState([]);            // [{id,name,savedAt}]\n  const [activeFlowIdState, setActiveFlowIdState] = useState(null);\n  const [selectedFlowId, setSelectedFlowId] = useState(null);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  // Shared card style (Node/Prompt/Edge)\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n  };\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300,\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\",\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model,\n      },\n      nodes: {},\n    };\n    nodes.forEach(({ id, data }) => {\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n// PART 2/3 — continue immediately after Part 1\n\n  /* ================================\n     Flow Switcher helpers\n     ================================ */\n  const refreshFlowsMeta = () => {\n    const map = readFlows();\n    const list = Object.values(map)\n      .map(f => ({ id: f.id, name: f.name || \"(unnamed)\", savedAt: f.savedAt || 0 }))\n      .sort((a, b) => b.savedAt - a.savedAt);\n    const activeId = getActiveFlowId();\n    setFlowsMeta(list);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId || (list[0]?.id ?? null));\n  };\n\n  const loadFlowById = (id) => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    setNodes(f.nodes || initialNodes);\n    setEdges(f.edges || []);\n    setPromptSettings(f.promptSettings || promptSettings);\n    nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n\n    // reset runtime/chat state\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n\n    history.current = [{ nodes: f.nodes || initialNodes, edges: f.edges || [] }];\n    historyIndex.current = 0;\n\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n  };\n\n  const renameFlowById = (id) => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    const newName = window.prompt(\"Rename flow:\", f.name || \"My Flow\");\n    if (!newName) return;\n    f.name = newName;\n    f.savedAt = Date.now();\n    flows[id] = f;\n    writeFlows(flows);\n    refreshFlowsMeta();\n  };\n\n  const deleteFlowById = (id) => {\n    const flows = readFlows();\n    if (!flows[id]) return window.alert(\"Flow not found.\");\n    // ESLint-safe confirm\n    if (!window.confirm(\"Delete this flow permanently?\")) return;\n\n    delete flows[id];\n    writeFlows(flows);\n\n    // if active was deleted, load another or create a fresh one\n    if (getActiveFlowId() === id) {\n      const remaining = Object.values(flows);\n      if (remaining.length) {\n        const fallback = remaining.sort((a,b) => (b.savedAt||0)-(a.savedAt||0))[0];\n        setActiveFlowId(fallback.id);\n        loadFlowById(fallback.id);\n      } else {\n        // No flows left — create a brand new initial flow\n        const newId = String(Date.now());\n        const payload = makeFlowPayload({\n          id: newId,\n          name: \"My First Flow\",\n          nodes: initialNodes,\n          edges: initialEdges,\n          promptSettings,\n          nodeCounter: 2\n        });\n        const map = {};\n        map[newId] = payload;\n        writeFlows(map);\n        setActiveFlowId(newId);\n        loadFlowById(newId);\n      }\n    } else {\n      refreshFlowsMeta();\n    }\n  };\n\n  // Restore last active flow on refresh (or create first)\n  useEffect(() => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId();\n    if (activeId && flows[activeId]) {\n      const f = flows[activeId];\n      setNodes(f.nodes || initialNodes);\n      setEdges(f.edges || []);\n      setPromptSettings(f.promptSettings || promptSettings);\n      nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n      history.current = [{ nodes: f.nodes || initialNodes, edges: f.edges || [] }];\n      historyIndex.current = 0;\n    } else {\n      const id = String(Date.now());\n      const payload = makeFlowPayload({\n        id,\n        name: \"My First Flow\",\n        nodes: initialNodes,\n        edges: initialEdges,\n        promptSettings,\n        nodeCounter\n      });\n      const map = readFlows();\n      map[id] = payload;\n      writeFlows(map);\n      setActiveFlowId(id);\n    }\n    refreshFlowsMeta();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        window.alert(\"Flow submitted successfully.\");\n      } else {\n        window.alert(\"Submission failed.\");\n      }\n    } catch {\n      window.alert(\"Backend error.\");\n    }\n  };\n\n  /* ================================\n     Save / New Flow (persistence)\n     ================================ */\n  const saveCurrentFlow = () => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId() || String(Date.now());\n    const existing = flows[activeId];\n\n    let name = existing?.name;\n    if (!name) {\n      name = window.prompt(\"Name this flow:\", \"My Flow\");\n      if (!name) return;\n    }\n\n    const payload = makeFlowPayload({\n      id: activeId,\n      name,\n      nodes,\n      edges: manualEdges,\n      promptSettings,\n      nodeCounter\n    });\n\n    flows[activeId] = payload;\n    writeFlows(flows);\n    setActiveFlowId(activeId);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId);\n    refreshFlowsMeta();\n    window.alert(`Saved ✓  (${name})`);\n  };\n\n  const createNewFlow = () => {\n    const name = window.prompt(\"New flow name:\", \"New Flow\");\n    if (!name) return;\n\n    const freshNodes = [{\n      id: \"1\",\n      data: {\n        message:\n          \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\",\n      },\n      position: { x: 250, y: 0 },\n      type: \"default\",\n    }];\n    const freshEdges = [];\n    nodeCounter = 2;\n\n    setNodes(freshNodes);\n    setEdges(freshEdges);\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n\n    history.current = [{ nodes: freshNodes, edges: freshEdges }];\n    historyIndex.current = 0;\n\n    const id = String(Date.now());\n    const flows = readFlows();\n    flows[id] = makeFlowPayload({\n      id, name, nodes: freshNodes, edges: freshEdges, promptSettings, nodeCounter\n    });\n    writeFlows(flows);\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n\n    window.alert(`New flow created ✓  (${name})`);\n  };\n\n  /* ================================\n     Chat + inputs\n     ================================ */\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message,\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #f59e0b\",\n              background: \"#fff7ed\",\n              height: \"40px\",\n              boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n              cursor: \"pointer\",\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n          {opts.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => handleUserResponse(opt)}\n              style={{\n                padding: \"8px\",\n                width: \"100%\",\n                borderRadius: 6,\n                border: \"1px solid #0369a1\",\n                background: \"#0284c7\",\n                color: \"white\",\n                cursor: \"pointer\",\n              }}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div\n              key={opt}\n              style={{\n                background: \"#facc15\",\n                padding: \"4px 8px\",\n                borderRadius: \"4px\",\n                margin: \"4px 0\",\n              }}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\",\n              cursor: \"pointer\",\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #f59e0b\",\n              background: \"#fff7ed\",\n              height: \"40px\",\n              boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n              cursor: \"pointer\",\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // Edge cleanup\n  const handleEdgesChange = (changes) => {\n    const removedIds = new Set(\n      changes.filter((c) => c.type === \"remove\" && c.id).map((c) => c.id)\n    );\n    const removedEdges = manualEdges.filter((e) => removedIds.has(e.id));\n\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n\n    const updatedNodes = nodes.map((n) => {\n      let data = { ...n.data };\n      let mutated = false;\n\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = { ...data.options };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = { ...data.options };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n\n      return mutated ? { ...n, data } : n;\n    });\n\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter((e) => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n// PART 3/3 — continue immediately after Part 2\n\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        overflow: \"hidden\",\n        overscrollBehavior: \"contain\",\n      }}\n    >\n      {/* Left workspace */}\n      <div style={{ flex: 1, position: \"relative\", overflow: \"hidden\" }}>\n        {/* Header: two rows (top: title + flow switcher, bottom: action buttons) */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            padding: \"8px 12px\",\n            background: \"#ffffffcc\",\n            backdropFilter: \"blur(6px)\",\n            borderBottom: \"1px solid #e5e7eb\",\n            zIndex: 12,\n            boxSizing: \"border-box\",\n          }}\n        >\n          {/* Row 1: Title (left) + Flow Switcher (right) */}\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              marginBottom: 8,\n            }}\n          >\n            <div\n              style={{\n                display: \"inline-flex\",\n                alignItems: \"center\",\n                gap: 10,\n                padding: \"10px 14px\",\n                background: \"#fff\",\n                borderRadius: 12,\n                border: \"1px solid #e5e7eb\",\n                boxShadow: \"0 6px 14px rgba(0,0,0,0.08)\",\n              }}\n            >\n              <div\n                style={{\n                  width: 10,\n                  height: 10,\n                  borderRadius: \"50%\",\n                  background: \"#0284c7\",\n                  boxShadow: \"0 0 0 3px rgba(2,132,199,0.15)\",\n                }}\n              />\n              <div style={{ fontWeight: 700, color: \"#0f172a\" }}>\n                Your AI Chatbot Designer\n              </div>\n              <div style={{ display: \"flex\", alignItems: \"center\", gap: 6, color: \"#64748b\" }}>\n                <span style={pill(\"#0ea5e9\")}>Fast</span>\n                <span>·</span>\n                <span style={pill(\"#16a34a\")}>Visual</span>\n                <span>·</span>\n                <span style={pill(\"#7c3aed\")}>Code-Free</span>\n              </div>\n            </div>\n\n            {/* Flow Switcher Block */}\n            <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\n              <select\n                value={selectedFlowId || \"\"}\n                onChange={(e) => setSelectedFlowId(e.target.value)}\n                style={{\n                  padding: \"6px 8px\",\n                  borderRadius: 6,\n                  border: \"1px solid #e5e7eb\",\n                  background: \"#fff\",\n                }}\n              >\n                {flowsMeta.length === 0 && <option value=\"\">No flows</option>}\n                {flowsMeta.map(f => (\n                  <option key={f.id} value={f.id}>\n                    {f.name} {activeFlowIdState === f.id ? \"•\" : \"\"}\n                  </option>\n                ))}\n              </select>\n              <button\n                style={btn(\"#0ea5e9\")}\n                onClick={() => {\n                  if (!selectedFlowId) return;\n                  loadFlowById(selectedFlowId);\n                }}\n              >\n                Load\n              </button>\n              <button\n                style={btn(\"#f97316\")}\n                onClick={() => {\n                  if (!selectedFlowId) return;\n                  renameFlowById(selectedFlowId);\n                }}\n              >\n                Rename\n              </button>\n              <button\n                style={btn(\"#dc2626\")}\n                onClick={() => {\n                  if (!selectedFlowId) return;\n                  deleteFlowById(selectedFlowId);\n                }}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n\n          {/* Row 2: Action Toolbar */}\n          <div style={{ display: \"flex\", gap: 10, alignItems: \"center\" }}>\n            <button\n              style={btn(\"#38bdf8\")}\n              onClick={() => {\n                const newId = nodeCounter.toString();\n                nodeCounter++;\n                const position = selectedNodeId\n                  ? {\n                      x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                      y: nodes.find((n) => n.id === selectedNodeId).position.y + 50,\n                    }\n                  : { x: Math.random() * 400, y: Math.random() * 400 };\n                const newNode = {\n                  id: newId,\n                  data: {\n                    message: `This is node ${newId}`,\n                    type: \"choice\",\n                    options: {},\n                    capture: \"\",\n                    next: \"\",\n                  },\n                  position,\n                  type: \"default\",\n                };\n                const updatedNodes = [...nodes, newNode];\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }}\n            >\n              Add Node\n            </button>\n\n            <button\n              style={btn(\"#22c55e\")}\n              onClick={() => {\n                const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n                  type: \"application/json\",\n                });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"conversation_data.json\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n            >\n              Export JSON\n            </button>\n\n            <button\n              style={btn(\"#ef4444\")}\n              onClick={() => {\n                if (!selectedNodeId) return;\n\n                const deletedId = selectedNodeId;\n\n                const updatedNodesBase = nodes.filter((n) => n.id !== deletedId);\n                const updatedEdges = manualEdges.filter(\n                  (e) => e.source !== deletedId && e.target !== deletedId\n                );\n\n                const updatedNodes = updatedNodesBase.map((n) => {\n                  const data = { ...n.data };\n                  let mutated = false;\n\n                  if (data.next === deletedId) {\n                    data.next = \"\";\n                    mutated = true;\n                  }\n                  if (data.options && Object.keys(data.options).length) {\n                    const opts = { ...data.options };\n                    for (const [k, v] of Object.entries(opts)) {\n                      if (v === deletedId) delete opts[k];\n                    }\n                    if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                      data.options = opts;\n                      mutated = true;\n                    }\n                  }\n                  return mutated ? { ...n, data } : n;\n                });\n\n                setNodes(updatedNodes);\n                setEdges(updatedEdges);\n                setSelectedNodeId(null);\n                pushToHistory(updatedNodes, updatedEdges);\n              }}\n            >\n              Delete Node\n            </button>\n\n            <button style={btn(\"#10b981\")} onClick={submitFlow}>\n              Submit Flow\n            </button>\n            <button style={btn(\"#0ea5e9\")} onClick={saveCurrentFlow}>\n              Save Flow\n            </button>\n            <button style={btn(\"#6b7280\")} onClick={createNewFlow}>\n              New Flow\n            </button>\n\n            {/* Undo / Redo */}\n            <div style={{ marginLeft: \"auto\", display: \"flex\", gap: 10 }}>\n              <button style={btn(\"#a855f7\")} onClick={undo}>\n                Undo\n              </button>\n              <button style={btn(\"#f59e0b\")} onClick={redo}>\n                Redo\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Inspector column */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 110,               // header is now 2 rows (~110px)\n            left: 10,\n            bottom: 10,\n            width: 350,\n            boxSizing: \"border-box\",\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 28,\n            paddingLeft: 4,\n            scrollbarGutter: \"stable both-edges\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 12,\n            zIndex: 11,\n          }}\n        >\n          <PromptEditor\n            promptSettings={promptSettings}\n            setPromptSettings={setPromptSettings}\n            containerStyle={cardStyle}\n          />\n\n          {selectedNode && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Node: {selectedNode.id}</h4>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, message: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\", height: 60 }}\n              />\n              <label>Type:</label>\n              <select\n                value={selectedNode.data.type}\n                onChange={(e) => {\n                  const newType = e.target.value;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id !== selectedNodeId) return node;\n                    const nd = { ...node, data: { ...node.data, type: newType } };\n                    if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                      nd.data.options = {};\n                    }\n                    return nd;\n                  });\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              >\n                <option value=\"choice\">choice</option>\n                <option value=\"input\">input</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n              <label>Capture Field:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.capture}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, capture: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n              <label>Next Node ID:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.next}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, next: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n\n          {selectedEdge && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Edge</h4>\n              <label>Option Label:</label>\n              <input\n                type=\"text\"\n                value={selectedEdge.label}\n                onChange={(e) => {\n                  const newLabel = e.target.value;\n                  const updatedEdges = manualEdges.map((edge) =>\n                    edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n                  );\n                  const sourceId = selectedEdge.source;\n                  const targetId = selectedEdge.target;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id === sourceId) {\n                      const updated = { ...node };\n                      if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                        const newOptions = { ...updated.data.options };\n                        delete newOptions[selectedEdge.label];\n                        newOptions[newLabel] = targetId;\n                        updated.data.options = newOptions;\n                      } else {\n                        updated.data.next = targetId;\n                      }\n                      return updated;\n                    }\n                    return node;\n                  });\n                  setEdges(updatedEdges);\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, updatedEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Flow canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type),\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={handleEdgesChange}\n          onConnect={(params) => {\n            const sourceNode = nodes.find(n => n.id === params.source);\n            let label = \"\";\n            if (sourceNode && (sourceNode.data.type === \"choice\" || sourceNode.data.type === \"multi_choice\")) {\n              label = window.prompt(\"Enter option key for this connection:\", \"\") || \"\";\n              if (!label) return;\n            }\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge(\n              { ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label },\n              manualEdges\n            );\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel — single color, only vertical scroll inside messages */}\n      <div\n        style={{\n          width: 320,\n          margin: 10,\n          padding: 12,\n          background: \"#fff7ed\",\n          border: \"1px solid #f59e0b\",\n          borderRadius: 10,\n          boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"calc(100vh - 20px)\",\n          boxSizing: \"border-box\",\n          overflow: \"hidden\",\n        }}\n      >\n        <div\n          style={{\n            fontWeight: \"bold\",\n            marginBottom: 8,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            flexShrink: 0,\n          }}\n        >\n          <span>MindPeace Chat</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"chat_history.txt\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n              style={{\n                background: \"#6366f1\",\n                color: \"white\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                padding: \"4px 8px\",\n                fontSize: \"12px\",\n                cursor: \"pointer\",\n              }}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        {/* messages area — ONLY this scrolls vertically */}\n        <div\n          style={{\n            flex: 1,\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 6,\n            paddingLeft: 2,\n            paddingTop: 2,\n            background: \"transparent\",\n            borderRadius: 8,\n          }}\n        >\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n              {chatHistory.map((entry, index) => (\n                <div\n                  key={index}\n                  style={{\n                    alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                    background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n                    padding: 8,\n                    borderRadius: 6,\n                    maxWidth: \"90%\",\n                    boxSizing: \"border-box\",\n                    overflowWrap: \"anywhere\",\n                  }}\n                >\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div style={{ opacity: 0.8 }}>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {/* input area */}\n        {chatbotReady && (\n          <div style={{ flexShrink: 0, paddingTop: 8, background: \"transparent\" }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/* helper styles */\nfunction btn(bg) {\n  return {\n    background: bg,\n    color: \"white\",\n    borderRadius: 6,\n    padding: \"6px 12px\",\n    border: \"none\",\n    cursor: \"pointer\",\n  };\n}\n\nfunction pill(color) {\n  return {\n    padding: \"2px 8px\",\n    borderRadius: 999,\n    border: `1px solid ${color}22`,\n    background: `${color}11`,\n    color,\n    fontWeight: 600,\n    fontSize: 12,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}