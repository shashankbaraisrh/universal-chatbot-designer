{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  type: \"default\",\n  position: {\n    x: 250,\n    y: 0\n  },\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {\n      yes: \"2\",\n      no: \"3\"\n    },\n    capture: \"\",\n    next: \"\"\n  }\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [gptMode, setGptMode] = useState(false);\n  const chatRef = useRef();\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a friendly mental health support assistant. Stick to your persona. Use the user's name and problems if shared.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const contextSummary = Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\", \");\n        const finalPrompt = contextSummary ? `User info: ${contextSummary}. Continue supporting empathetically.` : \"Continue supporting empathetically.\";\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: finalPrompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch (err) {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this));\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this), opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n            }\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(inputValue),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  const exportChat = () => {\n    const content = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\");\n    const blob = new Blob([content], {\n      type: \"text/plain\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"mindpeace_chat.txt\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitFlow,\n        style: {\n          margin: 10\n        },\n        children: \"Submit Flow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => setEdges(eds => addEdge({\n          ...params,\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          }\n        }, eds)),\n        onNodeClick: (_, node) => setSelectedNodeId(node.id),\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 300,\n        borderLeft: \"1px solid #ccc\",\n        padding: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatRef,\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          height: \"80%\",\n          marginBottom: 10\n        },\n        children: chatHistory.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: msg.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n            padding: 8,\n            margin: 4,\n            borderRadius: 6\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [msg.sender === \"user\" ? \"You\" : \"MindPeace\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this), \" \", msg.message]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), chatbotReady && renderChatInput(), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportChat,\n        style: {\n          marginTop: 10\n        },\n        children: \"Export Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"W34udIV9fLnI6PT+DmphBx64MLA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","type","position","x","y","data","message","options","yes","no","capture","next","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","gptMode","setGptMode","chatRef","getExportJSON","output","settings","system_prompt","gpt_model","forEach","node","nodeObj","Object","keys","length","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","map","entry","role","content","contextSummary","entries","k","v","join","finalPrompt","chat_history","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","children","value","onChange","e","target","onKeyDown","key","fileName","_jsxFileName","lineNumber","columnNumber","onClick","opt","checked","includes","filter","o","exportChat","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","style","display","height","flex","margin","onConnect","params","eds","markerEnd","ArrowClosed","onNodeClick","_","fitView","width","borderLeft","padding","ref","overflowY","marginBottom","msg","idx","background","borderRadius","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    type: \"default\",\n    position: { x: 250, y: 0 },\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {\n        yes: \"2\",\n        no: \"3\"\n      },\n      capture: \"\",\n      next: \"\"\n    }\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [gptMode, setGptMode] = useState(false);\n  const chatRef = useRef();\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a friendly mental health support assistant. Stick to your persona. Use the user's name and problems if shared.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    if (gptMode) {\n      try {\n        const contextSummary = Object.entries(userInputs)\n          .map(([k, v]) => `${k}: ${v}`)\n          .join(\", \");\n\n        const finalPrompt = contextSummary\n          ? `User info: ${contextSummary}. Continue supporting empathetically.`\n          : \"Continue supporting empathetically.\";\n\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: finalPrompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch (err) {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button key={opt} onClick={() => handleUserResponse(opt)}>\n          {opt}\n        </button>\n      ));\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div key={opt}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n              }\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)}\n          />\n          <button onClick={() => handleUserResponse(inputValue)}>Submit</button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const exportChat = () => {\n    const content = chatHistory\n      .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n      .join(\"\\n\");\n\n    const blob = new Blob([content], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"mindpeace_chat.txt\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\" }}>\n      <div style={{ flex: 1 }}>\n        <button onClick={submitFlow} style={{ margin: 10 }}>\n          Submit Flow\n        </button>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) =>\n            setEdges((eds) =>\n              addEdge({ ...params, markerEnd: { type: MarkerType.ArrowClosed } }, eds)\n            )\n          }\n          onNodeClick={(_, node) => setSelectedNodeId(node.id)}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n      <div style={{ width: 300, borderLeft: \"1px solid #ccc\", padding: 10 }}>\n        <h3>MindPeace Chat</h3>\n        <div\n          ref={chatRef}\n          style={{ flex: 1, overflowY: \"auto\", height: \"80%\", marginBottom: 10 }}\n        >\n          {chatHistory.map((msg, idx) => (\n            <div\n              key={idx}\n              style={{\n                background: msg.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n                padding: 8,\n                margin: 4,\n                borderRadius: 6\n              }}\n            >\n              <b>{msg.sender === \"user\" ? \"You\" : \"MindPeace\"}:</b> {msg.message}\n            </div>\n          ))}\n        </div>\n        {chatbotReady && renderChatInput()}\n        {chatbotReady && (\n          <button onClick={exportChat} style={{ marginTop: 10 }}>\n            Export Chat\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,SAAS,IACdC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,OAAO,EACPC,UAAU,QACL,WAAW;AAClB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC;EAC1BC,IAAI,EAAE;IACJC,OAAO,EACL,oHAAoH;IACtHL,IAAI,EAAE,QAAQ;IACdM,OAAO,EAAE;MACPC,GAAG,EAAE,GAAG;MACRC,EAAE,EAAE;IACN,CAAC;IACDC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE;EACR;AACF,CAAC,CACF;AAED,MAAMC,YAAY,GAAG,EAAE;AACvB,IAAIC,WAAW,GAAG,CAAC;AAEnB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGzB,aAAa,CAACM,YAAY,CAAC;EACpE,MAAM,CAACoB,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAG3B,aAAa,CAACkB,YAAY,CAAC;EACpE,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACuC,aAAa,EAAEC,gBAAgB,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACyC,aAAa,EAAEC,gBAAgB,CAAC,GAAG1C,QAAQ,CAAC,GAAG,CAAC;EACvD,MAAM,CAAC2C,WAAW,EAAEC,cAAc,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC6C,UAAU,EAAEC,aAAa,CAAC,GAAG9C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAAC+C,UAAU,EAAEC,aAAa,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiD,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACmD,OAAO,EAAEC,UAAU,CAAC,GAAGpD,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMqD,OAAO,GAAGpD,MAAM,CAAC,CAAC;EAExB,MAAMqD,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,MAAM,GAAG;MACbC,QAAQ,EAAE;QACRC,aAAa,EACX,mIAAmI;QACrIC,SAAS,EAAE;MACb,CAAC;MACD7B,KAAK,EAAE,CAAC;IACV,CAAC;IACDA,KAAK,CAAC8B,OAAO,CAAEC,IAAI,IAAK;MACtB,MAAM;QAAE/C,EAAE;QAAEK;MAAK,CAAC,GAAG0C,IAAI;MACzB,MAAM;QAAEzC,OAAO;QAAEL,IAAI;QAAEM,OAAO;QAAEG,OAAO;QAAEC;MAAK,CAAC,GAAGN,IAAI;MACtD,MAAM2C,OAAO,GAAG;QAAE1C,OAAO;QAAEL;MAAK,CAAC;MACjC,IAAIM,OAAO,IAAI0C,MAAM,CAACC,IAAI,CAAC3C,OAAO,CAAC,CAAC4C,MAAM,GAAG,CAAC,EAAEH,OAAO,CAACzC,OAAO,GAAGA,OAAO;MACzE,IAAIG,OAAO,EAAEsC,OAAO,CAACtC,OAAO,GAAGA,OAAO;MACtC,IAAIC,IAAI,EAAEqC,OAAO,CAACrC,IAAI,GAAGA,IAAI;MAC7B+B,MAAM,CAAC1B,KAAK,CAAChB,EAAE,CAAC,GAAGgD,OAAO;IAC5B,CAAC,CAAC;IACF,OAAON,MAAM;EACf,CAAC;EAED,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,OAAO,GAAGZ,aAAa,CAAC,CAAC;IAC/B,IAAI;MACF,MAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QACtDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAC9B,CAAC,CAAC;MACF,IAAIC,GAAG,CAACO,EAAE,EAAE;QAAA,IAAAC,eAAA;QACV,MAAMC,QAAQ,GAAG,EAAAD,eAAA,GAAAT,OAAO,CAACrC,KAAK,CAAC,GAAG,CAAC,cAAA8C,eAAA,uBAAlBA,eAAA,CAAoBxD,OAAO,KAAI,cAAc;QAC9DqB,gBAAgB,CAAC0B,OAAO,CAAC;QACzB5B,eAAe,CAAC,IAAI,CAAC;QACrBM,cAAc,CAAC,CAAC;UAAEiC,MAAM,EAAE,KAAK;UAAE1D,OAAO,EAAEyD;QAAS,CAAC,CAAC,CAAC;QACtD9B,aAAa,CAAC,CAAC,CAAC,CAAC;QACjBE,aAAa,CAAC,EAAE,CAAC;QACjBN,gBAAgB,CAAC,GAAG,CAAC;QACrBU,UAAU,CAAC,KAAK,CAAC;QACjB0B,KAAK,CAAC,8BAA8B,CAAC;MACvC,CAAC,MAAMA,KAAK,CAAC,oBAAoB,CAAC;IACpC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZD,KAAK,CAAC,gBAAgB,CAAC;IACzB;EACF,CAAC;EAED,MAAME,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;IAAA,IAAAC,oBAAA,EAAAC,oBAAA;IAC7C,MAAMC,cAAc,GAAG,CAAC,GAAGzC,WAAW,EAAE;MAAEkC,MAAM,EAAE,MAAM;MAAE1D,OAAO,EAAE8D;IAAS,CAAC,CAAC;IAC9ErC,cAAc,CAACwC,cAAc,CAAC;IAE9B,MAAMC,gBAAgB,GAAGD,cAAc,CAACE,GAAG,CAAEC,KAAK,KAAM;MACtDC,IAAI,EAAED,KAAK,CAACV,MAAM,KAAK,MAAM,GAAG,MAAM,GAAG,WAAW;MACpDY,OAAO,EAAEF,KAAK,CAACpE;IACjB,CAAC,CAAC,CAAC;IAEH,IAAIgC,OAAO,EAAE;MACX,IAAI;QACF,MAAMuC,cAAc,GAAG5B,MAAM,CAAC6B,OAAO,CAAC9C,UAAU,CAAC,CAC9CyC,GAAG,CAAC,CAAC,CAACM,CAAC,EAAEC,CAAC,CAAC,KAAK,GAAGD,CAAC,KAAKC,CAAC,EAAE,CAAC,CAC7BC,IAAI,CAAC,IAAI,CAAC;QAEb,MAAMC,WAAW,GAAGL,cAAc,GAC9B,cAAcA,cAAc,uCAAuC,GACnE,qCAAqC;QAEzC,MAAMvB,GAAG,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACpDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBuB,YAAY,EAAEX,gBAAgB;YAC9B5B,aAAa,EAAEsC,WAAW;YAC1BrC,SAAS,EAAEnB,aAAa,CAACiB,QAAQ,CAACE;UACpC,CAAC;QACH,CAAC,CAAC;QACF,MAAMxC,IAAI,GAAG,MAAMiD,GAAG,CAAC8B,IAAI,CAAC,CAAC;QAC7B,MAAMC,QAAQ,GAAGhF,IAAI,CAACiF,KAAK,IAAI,uBAAuB;QACtDvD,cAAc,CAAEwD,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;UAAEvB,MAAM,EAAE,KAAK;UAAE1D,OAAO,EAAE+E;QAAS,CAAC,CAAC,CAAC;MAC3E,CAAC,CAAC,OAAOnB,GAAG,EAAE;QACZnC,cAAc,CAAEwD,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;UAAEvB,MAAM,EAAE,KAAK;UAAE1D,OAAO,EAAE;QAAwB,CAAC,CAAC,CAAC;MAC1F;MACA;IACF;IAEA,MAAMkF,WAAW,GAAG9D,aAAa,CAACV,KAAK,CAACY,aAAa,CAAC;IACtD,MAAM6D,SAAS,GAAG;MAAE,GAAGzD;IAAW,CAAC;IACnC,IAAIwD,WAAW,CAAC9E,OAAO,EAAE+E,SAAS,CAACD,WAAW,CAAC9E,OAAO,CAAC,GAAG0D,QAAQ;IAElE,IAAIsB,MAAM,GAAGF,WAAW,CAAC7E,IAAI,MAAA0D,oBAAA,GAAImB,WAAW,CAACjF,OAAO,cAAA8D,oBAAA,uBAAnBA,oBAAA,CAAsBD,QAAQ,CAAC;IAChE,MAAMuB,QAAQ,IAAArB,oBAAA,GAAG5C,aAAa,CAACV,KAAK,cAAAsD,oBAAA,uBAAnBA,oBAAA,CAAsBoB,MAAM,CAAC;IAE9C,IAAI,CAACC,QAAQ,EAAE;MACb5D,cAAc,CAAC,CAAC,GAAGwC,cAAc,EAAE;QAAEP,MAAM,EAAE,KAAK;QAAE1D,OAAO,EAAE;MAAyB,CAAC,CAAC,CAAC;MACzFuB,gBAAgB,CAAC,IAAI,CAAC;MACtB;IACF;IAEA,IAAI8D,QAAQ,CAAC1F,IAAI,KAAK,KAAK,EAAE;MAC3B,MAAMK,OAAO,GAAGqF,QAAQ,CAACrF,OAAO,IAAI,iBAAiB;MACrD,IAAI;QACF,MAAMgD,GAAG,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACpDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBuB,YAAY,EAAE,CAAC,GAAGX,gBAAgB,EAAE;cAAEG,IAAI,EAAE,MAAM;cAAEC,OAAO,EAAER;YAAS,CAAC,CAAC;YACxExB,aAAa,EAAElB,aAAa,CAACiB,QAAQ,CAACC,aAAa;YACnDC,SAAS,EAAEnB,aAAa,CAACiB,QAAQ,CAACE;UACpC,CAAC;QACH,CAAC,CAAC;QACF,MAAMxC,IAAI,GAAG,MAAMiD,GAAG,CAAC8B,IAAI,CAAC,CAAC;QAC7B,MAAMC,QAAQ,GAAGhF,IAAI,CAACiF,KAAK,IAAI,uBAAuB;QACtDvD,cAAc,CAAC,CACb,GAAGwC,cAAc,EACjB;UAAEP,MAAM,EAAE,KAAK;UAAE1D;QAAQ,CAAC,EAC1B;UAAE0D,MAAM,EAAE,KAAK;UAAE1D,OAAO,EAAE+E;QAAS,CAAC,CACrC,CAAC;QACFxD,gBAAgB,CAAC,IAAI,CAAC;QACtBU,UAAU,CAAC,IAAI,CAAC;QAChBN,aAAa,CAACwD,SAAS,CAAC;MAC1B,CAAC,CAAC,OAAOvB,GAAG,EAAE;QACZnC,cAAc,CAAC,CACb,GAAGwC,cAAc,EACjB;UAAEP,MAAM,EAAE,KAAK;UAAE1D;QAAQ,CAAC,EAC1B;UAAE0D,MAAM,EAAE,KAAK;UAAE1D,OAAO,EAAE;QAAwB,CAAC,CACpD,CAAC;QACFuB,gBAAgB,CAAC,IAAI,CAAC;QACtBU,UAAU,CAAC,IAAI,CAAC;MAClB;IACF,CAAC,MAAM;MACLN,aAAa,CAACwD,SAAS,CAAC;MACxB1D,cAAc,CAAC,CAAC,GAAGwC,cAAc,EAAE;QAAEP,MAAM,EAAE,KAAK;QAAE1D,OAAO,EAAEqF,QAAQ,CAACrF;MAAQ,CAAC,CAAC,CAAC;MACjFuB,gBAAgB,CAAC6D,MAAM,CAAC;IAC1B;EACF,CAAC;EAED,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAAClE,aAAa,IAAK,CAACE,aAAa,IAAI,CAACU,OAAQ,EAAE,OAAO,IAAI;IAE/D,IAAIA,OAAO,EAAE;MACX,oBACExC,OAAA;QAAA+F,QAAA,gBACE/F,OAAA;UACEgG,KAAK,EAAE5D,UAAW;UAClB6D,QAAQ,EAAGC,CAAC,IAAK7D,aAAa,CAAC6D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC/CI,SAAS,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIhC,kBAAkB,CAACjC,UAAU;QAAE;UAAAkE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvE,CAAC,eACFzG,OAAA;UACE0G,OAAO,EAAEA,CAAA,KAAM;YACbrC,kBAAkB,CAACjC,UAAU,CAAC;YAC9BC,aAAa,CAAC,EAAE,CAAC;UACnB,CAAE;UAAA0D,QAAA,EACH;QAED;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAEV;IAEA,MAAMxD,IAAI,GAAGrB,aAAa,CAACV,KAAK,CAACY,aAAa,CAAC;IAC/C,IAAImB,IAAI,CAAC9C,IAAI,KAAK,QAAQ,EAAE;MAC1B,OAAOgD,MAAM,CAACC,IAAI,CAACH,IAAI,CAACxC,OAAO,IAAI,CAAC,CAAC,CAAC,CAACkE,GAAG,CAAEgC,GAAG,iBAC7C3G,OAAA;QAAkB0G,OAAO,EAAEA,CAAA,KAAMrC,kBAAkB,CAACsC,GAAG,CAAE;QAAAZ,QAAA,EACtDY;MAAG,GADOA,GAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAER,CACT,CAAC;IACJ;IAEA,IAAIxD,IAAI,CAAC9C,IAAI,KAAK,cAAc,EAAE;MAChC,oBACEH,OAAA;QAAA+F,QAAA,GACG5C,MAAM,CAACC,IAAI,CAACH,IAAI,CAACxC,OAAO,IAAI,CAAC,CAAC,CAAC,CAACkE,GAAG,CAAEgC,GAAG,iBACvC3G,OAAA;UAAA+F,QAAA,eACE/F,OAAA;YAAA+F,QAAA,gBACE/F,OAAA;cACEG,IAAI,EAAC,UAAU;cACfyG,OAAO,EAAEtE,oBAAoB,CAACuE,QAAQ,CAACF,GAAG,CAAE;cAC5CV,QAAQ,EAAEA,CAAA,KACR1D,uBAAuB,CAAEkD,IAAI,IAC3BA,IAAI,CAACoB,QAAQ,CAACF,GAAG,CAAC,GACdlB,IAAI,CAACqB,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKJ,GAAG,CAAC,GAC7B,CAAC,GAAGlB,IAAI,EAAEkB,GAAG,CACnB;YACD;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,EACDE,GAAG;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC;QAAC,GAdAE,GAAG;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAeR,CACN,CAAC,eACFzG,OAAA;UACE0G,OAAO,EAAEA,CAAA,KAAM;YACb,IAAIpE,oBAAoB,CAACe,MAAM,GAAG,CAAC,EAAE;cACnCgB,kBAAkB,CAAC/B,oBAAoB,CAAC6C,IAAI,CAAC,IAAI,CAAC,CAAC;cACnD5C,uBAAuB,CAAC,EAAE,CAAC;YAC7B;UACF,CAAE;UAAAwD,QAAA,EACH;QAED;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAEV;IAEA,IAAIxD,IAAI,CAAC9C,IAAI,KAAK,OAAO,EAAE;MACzB,oBACEH,OAAA;QAAA+F,QAAA,gBACE/F,OAAA;UACEgG,KAAK,EAAE5D,UAAW;UAClB6D,QAAQ,EAAGC,CAAC,IAAK7D,aAAa,CAAC6D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC/CI,SAAS,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIhC,kBAAkB,CAACjC,UAAU;QAAE;UAAAkE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvE,CAAC,eACFzG,OAAA;UAAQ0G,OAAO,EAAEA,CAAA,KAAMrC,kBAAkB,CAACjC,UAAU,CAAE;UAAA2D,QAAA,EAAC;QAAM;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC;IAEV;IAEA,OAAO,IAAI;EACb,CAAC;EAED,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMlC,OAAO,GAAG9C,WAAW,CACxB2C,GAAG,CAAEC,KAAK,IAAK,GAAGA,KAAK,CAACV,MAAM,KAAK,MAAM,GAAG,KAAK,GAAG,WAAW,KAAKU,KAAK,CAACpE,OAAO,EAAE,CAAC,CACpF2E,IAAI,CAAC,IAAI,CAAC;IAEb,MAAM8B,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACpC,OAAO,CAAC,EAAE;MAAE3E,IAAI,EAAE;IAAa,CAAC,CAAC;IACxD,MAAMgH,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;IACrC,MAAMK,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACrCF,CAAC,CAACG,IAAI,GAAGN,GAAG;IACZG,CAAC,CAACI,QAAQ,GAAG,oBAAoB;IACjCJ,CAAC,CAACK,KAAK,CAAC,CAAC;IACTP,GAAG,CAACQ,eAAe,CAACT,GAAG,CAAC;EAC1B,CAAC;EAED,oBACEnH,OAAA;IAAK6H,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAhC,QAAA,gBAC/C/F,OAAA;MAAK6H,KAAK,EAAE;QAAEG,IAAI,EAAE;MAAE,CAAE;MAAAjC,QAAA,gBACtB/F,OAAA;QAAQ0G,OAAO,EAAEpD,UAAW;QAACuE,KAAK,EAAE;UAAEI,MAAM,EAAE;QAAG,CAAE;QAAAlC,QAAA,EAAC;MAEpD;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTzG,OAAA,CAACT,SAAS;QACR2B,KAAK,EAAEA,KAAM;QACbG,KAAK,EAAEA,KAAM;QACbD,aAAa,EAAEA,aAAc;QAC7BG,aAAa,EAAEA,aAAc;QAC7B2G,SAAS,EAAGC,MAAM,IAChB7G,QAAQ,CAAE8G,GAAG,IACXvI,OAAO,CAAC;UAAE,GAAGsI,MAAM;UAAEE,SAAS,EAAE;YAAElI,IAAI,EAAEL,UAAU,CAACwI;UAAY;QAAE,CAAC,EAAEF,GAAG,CACzE,CACD;QACDG,WAAW,EAAEA,CAACC,CAAC,EAAEvF,IAAI,KAAKxB,iBAAiB,CAACwB,IAAI,CAAC/C,EAAE,CAAE;QACrDuI,OAAO;QAAA1C,QAAA,gBAEP/F,OAAA,CAACR,OAAO;UAAA8G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXzG,OAAA,CAACP,QAAQ;UAAA6G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACZzG,OAAA,CAACN,UAAU;UAAA4G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACNzG,OAAA;MAAK6H,KAAK,EAAE;QAAEa,KAAK,EAAE,GAAG;QAAEC,UAAU,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAG,CAAE;MAAA7C,QAAA,gBACpE/F,OAAA;QAAA+F,QAAA,EAAI;MAAc;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBzG,OAAA;QACE6I,GAAG,EAAEnG,OAAQ;QACbmF,KAAK,EAAE;UAAEG,IAAI,EAAE,CAAC;UAAEc,SAAS,EAAE,MAAM;UAAEf,MAAM,EAAE,KAAK;UAAEgB,YAAY,EAAE;QAAG,CAAE;QAAAhD,QAAA,EAEtE/D,WAAW,CAAC2C,GAAG,CAAC,CAACqE,GAAG,EAAEC,GAAG,kBACxBjJ,OAAA;UAEE6H,KAAK,EAAE;YACLqB,UAAU,EAAEF,GAAG,CAAC9E,MAAM,KAAK,MAAM,GAAG,SAAS,GAAG,SAAS;YACzD0E,OAAO,EAAE,CAAC;YACVX,MAAM,EAAE,CAAC;YACTkB,YAAY,EAAE;UAChB,CAAE;UAAApD,QAAA,gBAEF/F,OAAA;YAAA+F,QAAA,GAAIiD,GAAG,CAAC9E,MAAM,KAAK,MAAM,GAAG,KAAK,GAAG,WAAW,EAAC,GAAC;UAAA;YAAAoC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,KAAC,EAACuC,GAAG,CAACxI,OAAO;QAAA,GAR7DyI,GAAG;UAAA3C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASL,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EACL/E,YAAY,IAAIoE,eAAe,CAAC,CAAC,EACjCpE,YAAY,iBACX1B,OAAA;QAAQ0G,OAAO,EAAEM,UAAW;QAACa,KAAK,EAAE;UAAEuB,SAAS,EAAE;QAAG,CAAE;QAAArD,QAAA,EAAC;MAEvD;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACxF,EAAA,CAzSuBD,GAAG;EAAA,QACgBrB,aAAa,EACbC,aAAa;AAAA;AAAAyJ,EAAA,GAFhCrI,GAAG;AAAA,IAAAqI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}