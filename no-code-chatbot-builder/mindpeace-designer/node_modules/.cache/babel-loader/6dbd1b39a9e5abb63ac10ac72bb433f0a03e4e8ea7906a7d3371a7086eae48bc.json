{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  the[inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt settings (editable via Prompt Editor)\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n\n    // GPT Mode\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8\n        },\n        children: opts.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            padding: \"8px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Clean up node/edge mappings when edges are removed\n  const handleEdgesChange = changes => {\n    const removedIds = new Set(changes.filter(c => c.type === \"remove\" && c.id).map(c => c.id));\n    const removedEdges = manualEdges.filter(e => removedIds.has(e.id));\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n    const updatedNodes = nodes.map(n => {\n      let data = {\n        ...n.data\n      };\n      let mutated = false;\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = {\n              ...data.options\n            };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = {\n              ...data.options\n            };\n            let changed = false;\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) {\n                delete opts[k];\n                changed = true;\n              }\n            }\n            if (changed) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n      return mutated ? {\n        ...n,\n        data\n      } : n;\n    });\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter(e => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const newId = nodeCounter.toString();\n            nodeCounter++;\n            const position = selectedNodeId ? {\n              x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n              y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n            } : {\n              x: Math.random() * 400,\n              y: Math.random() * 400\n            };\n            const newNode = {\n              id: newId,\n              data: {\n                message: `This is node ${newId}`,\n                type: \"choice\",\n                options: {},\n                capture: \"\",\n                next: \"\"\n              },\n              position,\n              type: \"default\"\n            };\n            const updatedNodes = [...nodes, newNode];\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n              type: \"application/json\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"conversation_data.json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            if (!selectedNodeId) return;\n            const deletedId = selectedNodeId;\n\n            // Remove the node and its edges\n            const updatedNodesBase = nodes.filter(n => n.id !== deletedId);\n            const updatedEdges = manualEdges.filter(e => e.source !== deletedId && e.target !== deletedId);\n\n            // Scrub references to the deleted node from remaining nodes\n            const updatedNodes = updatedNodesBase.map(n => {\n              const data = {\n                ...n.data\n              };\n              let mutated = false;\n              if (data.next === deletedId) {\n                data.next = \"\";\n                mutated = true;\n              }\n              if (data.options && Object.keys(data.options).length) {\n                const opts = {\n                  ...data.options\n                };\n                let changed = false;\n                for (const [k, v] of Object.entries(opts)) {\n                  if (v === deletedId) {\n                    delete opts[k];\n                    changed = true;\n                  }\n                }\n                if (changed) {\n                  data.options = opts;\n                  mutated = true;\n                }\n              }\n              return mutated ? {\n                ...n,\n                data\n              } : n;\n            });\n            setNodes(updatedNodes);\n            setEdges(updatedEdges);\n            setSelectedNodeId(null);\n            pushToHistory(updatedNodes, updatedEdges);\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          bottom: 10,\n          width: 330,\n          // wider column\n          boxSizing: \"border-box\",\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 20,\n          // real gap so scrollbar never overlaps\n          paddingLeft: 4,\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n          zIndex: 11\n        },\n        children: [selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#fff7ed\",\n            padding: 12,\n            border: \"1px solid #f59e0b\",\n            borderRadius: 10,\n            width: \"100%\",\n            marginRight: 6,\n            // tiny space from scrollbar\n            boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Editing Node: \", selectedNode.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  message: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const newType = e.target.value;\n              const updatedNodes = nodes.map(node => {\n                if (node.id !== selectedNodeId) return node;\n                const nd = {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    type: newType\n                  }\n                };\n                if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                  nd.data.options = {};\n                }\n                return nd;\n              });\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 755,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 757,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  capture: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  next: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 6\n          },\n          children: /*#__PURE__*/_jsxDEV(PromptEditor, {\n            promptSettings: promptSettings,\n            setPromptSettings: setPromptSettings\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 11\n        }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#f9fafb\",\n            padding: 12,\n            border: \"1px solid #ccc\",\n            borderRadius: 8,\n            width: \"100%\",\n            marginRight: 6,\n            // space from scrollbar\n            boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Editing Edge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 812,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedEdge.label,\n            onChange: e => {\n              const newLabel = e.target.value;\n              const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n                ...edge,\n                label: newLabel\n              } : edge);\n              const sourceId = selectedEdge.source;\n              const targetId = selectedEdge.target;\n              const updatedNodes = nodes.map(node => {\n                if (node.id === sourceId) {\n                  const updated = {\n                    ...node\n                  };\n                  if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                    const newOptions = {\n                      ...updated.data.options\n                    };\n                    delete newOptions[selectedEdge.label];\n                    newOptions[newLabel] = targetId;\n                    updated.data.options = newOptions;\n                  } else {\n                    updated.data.next = targetId;\n                  }\n                  return updated;\n                }\n                return node;\n              });\n              setEdges(updatedEdges);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: handleEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: {\n            background: \"#6366f1\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"6px\",\n            padding: \"4px 8px\",\n            fontSize: \"12px\",\n            cursor: \"pointer\"\n          },\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          marginBottom: 10,\n          paddingRight: 4\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 957,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 955,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0,\n          maxHeight: 220,\n          overflowY: \"auto\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 900,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 487,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Uc2Q1fdopUoRze+MayP24lHgH8c=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","PromptEditor","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","the","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","promptSettings","setPromptSettings","system_prompt","gpt_model","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","color","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","user_inputs","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","opts","flexDirection","opt","width","margin","checked","includes","filter","o","join","marginTop","handleEdgesChange","changes","removedIds","c","removedEdges","updatedNodes","mutated","changed","k","v","entries","remainingEdges","textAlign","fontSize","fontWeight","zIndex","top","left","newId","toString","Math","random","newNode","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","deletedId","updatedNodesBase","updatedEdges","right","bottom","boxSizing","overflowY","overflowX","paddingRight","paddingLeft","marginRight","newType","nd","newLabel","edge","sourceId","targetId","updated","newOptions","onConnect","params","prompt","edgeId","onNodeClick","_","onEdgeClick","fitView","edgeLabelMode","borderLeft","marginBottom","justifyContent","alignItems","flexShrink","textContent","cursor","index","alignSelf","maxHeight","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  the [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt settings (editable via Prompt Editor)\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    // GPT Mode\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n          {opts.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => handleUserResponse(opt)}\n              style={{\n                padding: \"8px\",\n                width: \"100%\",\n                borderRadius: 6,\n                border: \"1px solid #0369a1\",\n                background: \"#0284c7\",\n                color: \"white\"\n              }}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div\n              key={opt}\n              style={{\n                background: \"#facc15\",\n                padding: \"4px 8px\",\n                borderRadius: \"4px\",\n                margin: \"4px 0\"\n              }}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\"\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // Clean up node/edge mappings when edges are removed\n  const handleEdgesChange = (changes) => {\n    const removedIds = new Set(\n      changes.filter((c) => c.type === \"remove\" && c.id).map((c) => c.id)\n    );\n    const removedEdges = manualEdges.filter((e) => removedIds.has(e.id));\n\n    onEdgesChange(changes);\n\n    if (!removedEdges.length) return;\n\n    const updatedNodes = nodes.map((n) => {\n      let data = { ...n.data };\n      let mutated = false;\n\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = { ...data.options };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = { ...data.options };\n            let changed = false;\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) {\n                delete opts[k];\n                changed = true;\n              }\n            }\n            if (changed) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n\n      return mutated ? { ...n, data } : n;\n    });\n\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter((e) => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Panel */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div\n          style={{\n            textAlign: \"center\",\n            padding: \"12px\",\n            background: \"#f1f5f9\",\n            boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n            borderRadius: \"8px\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\",\n            fontFamily: \"Segoe UI, sans-serif\",\n            width: \"fit-content\",\n            margin: \"10px auto\",\n            zIndex: 20,\n            position: \"relative\"\n          }}\n        >\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Top Left Buttons */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 60,\n            left: 10,\n            zIndex: 10,\n            display: \"flex\",\n            gap: \"10px\"\n          }}\n        >\n          <button\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            }}\n            onClick={() => {\n              const newId = nodeCounter.toString();\n              nodeCounter++;\n              const position = selectedNodeId\n                ? {\n                    x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                    y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n                  }\n                : { x: Math.random() * 400, y: Math.random() * 400 };\n              const newNode = {\n                id: newId,\n                data: {\n                  message: `This is node ${newId}`,\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position,\n                type: \"default\"\n              };\n              const updatedNodes = [...nodes, newNode];\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            }}\n          >\n            Add Node\n          </button>\n\n          <button\n            style={{\n              background: \"#22c55e\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            }}\n            onClick={() => {\n              const blob = new Blob(\n                [JSON.stringify(getExportJSON(), null, 2)],\n                { type: \"application/json\" }\n              );\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"conversation_data.json\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            }}\n          >\n            Export JSON\n          </button>\n\n          <button\n            style={{\n              background: \"#ef4444\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            }}\n            onClick={() => {\n              if (!selectedNodeId) return;\n\n              const deletedId = selectedNodeId;\n\n              // Remove the node and its edges\n              const updatedNodesBase = nodes.filter((n) => n.id !== deletedId);\n              const updatedEdges = manualEdges.filter(\n                (e) => e.source !== deletedId && e.target !== deletedId\n              );\n\n              // Scrub references to the deleted node from remaining nodes\n              const updatedNodes = updatedNodesBase.map((n) => {\n                const data = { ...n.data };\n                let mutated = false;\n\n                if (data.next === deletedId) {\n                  data.next = \"\";\n                  mutated = true;\n                }\n\n                if (data.options && Object.keys(data.options).length) {\n                  const opts = { ...data.options };\n                  let changed = false;\n                  for (const [k, v] of Object.entries(opts)) {\n                    if (v === deletedId) {\n                      delete opts[k];\n                      changed = true;\n                    }\n                  }\n                  if (changed) {\n                    data.options = opts;\n                    mutated = true;\n                  }\n                }\n\n                return mutated ? { ...n, data } : n;\n              });\n\n              setNodes(updatedNodes);\n              setEdges(updatedEdges);\n              setSelectedNodeId(null);\n              pushToHistory(updatedNodes, updatedEdges);\n            }}\n          >\n            Delete Node\n          </button>\n\n          <button\n            style={{\n              background: \"#10b981\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            }}\n            onClick={submitFlow}\n          >\n            Submit Flow\n          </button>\n        </div>\n\n        {/* Top Right Buttons */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 60,\n            right: 10,\n            zIndex: 10,\n            display: \"flex\",\n            gap: \"10px\"\n          }}\n        >\n          <button\n            style={{\n              background: \"#a855f7\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            }}\n            onClick={undo}\n          >\n            Undo\n          </button>\n          <button\n            style={{\n              background: \"#f59e0b\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            }}\n            onClick={redo}\n          >\n            Redo\n          </button>\n        </div>\n\n        {/* INSPECTOR COLUMN (Node, Prompt, Edge) */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 110,\n            left: 10,\n            bottom: 10,\n            width: 330,                 // wider column\n            boxSizing: \"border-box\",\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 20,           // real gap so scrollbar never overlaps\n            paddingLeft: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 12,\n            zIndex: 11\n          }}\n        >\n          {selectedNode && (\n            <div\n              style={{\n                background: \"#fff7ed\",\n                padding: 12,\n                border: \"1px solid #f59e0b\",\n                borderRadius: 10,\n                width: \"100%\",\n                marginRight: 6,         // tiny space from scrollbar\n                boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\"\n              }}\n            >\n              <h4>Editing Node: {selectedNode.id}</h4>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, message: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\", height: 60 }}\n              />\n              <label>Type:</label>\n              <select\n                value={selectedNode.data.type}\n                onChange={(e) => {\n                  const newType = e.target.value;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id !== selectedNodeId) return node;\n                    const nd = { ...node, data: { ...node.data, type: newType } };\n                    if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                      nd.data.options = {};\n                    }\n                    return nd;\n                  });\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              >\n                <option value=\"choice\">choice</option>\n                <option value=\"input\">input</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n              <label>Capture Field:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.capture}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, capture: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n              <label>Next Node ID:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.next}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, next: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n\n          <div style={{ marginRight: 6 }}>\n            <PromptEditor\n              promptSettings={promptSettings}\n              setPromptSettings={setPromptSettings}\n            />\n          </div>\n\n          {selectedEdge && (\n            <div\n              style={{\n                background: \"#f9fafb\",\n                padding: 12,\n                border: \"1px solid #ccc\",\n                borderRadius: 8,\n                width: \"100%\",\n                marginRight: 6,         // space from scrollbar\n                boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\"\n              }}\n            >\n              <h4>Editing Edge</h4>\n              <label>Option Label:</label>\n              <input\n                type=\"text\"\n                value={selectedEdge.label}\n                onChange={(e) => {\n                  const newLabel = e.target.value;\n                  const updatedEdges = manualEdges.map((edge) =>\n                    edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n                  );\n                  const sourceId = selectedEdge.source;\n                  const targetId = selectedEdge.target;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id === sourceId) {\n                      const updated = { ...node };\n                      if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                        const newOptions = { ...updated.data.options };\n                        delete newOptions[selectedEdge.label];\n                        newOptions[newLabel] = targetId;\n                        updated.data.options = newOptions;\n                      } else {\n                        updated.data.next = targetId;\n                      }\n                      return updated;\n                    }\n                    return node;\n                  });\n                  setEdges(updatedEdges);\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, updatedEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* React Flow Canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={handleEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge(\n              { ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label },\n              manualEdges\n            );\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel */}\n      <div\n        style={{\n          width: \"320px\",\n          padding: 20,\n          borderLeft: \"1px solid #ddd\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"relative\",\n          height: \"100vh\",\n          boxSizing: \"border-box\"\n        }}\n      >\n        <div\n          style={{\n            fontWeight: \"bold\",\n            marginBottom: 10,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            flexShrink: 0\n          }}\n        >\n          <span>MindPeace Chat</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"chat_history.txt\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n              style={{\n                background: \"#6366f1\",\n                color: \"white\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                padding: \"4px 8px\",\n                fontSize: \"12px\",\n                cursor: \"pointer\"\n              }}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        <div style={{ flex: 1, overflowY: \"auto\", marginBottom: 10, paddingRight: 4 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div\n                  key={index}\n                  style={{\n                    alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                    background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n                    padding: 8,\n                    borderRadius: 6,\n                    maxWidth: \"90%\"\n                  }}\n                >\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {chatbotReady && (\n          <div style={{ flexShrink: 0, maxHeight: 220, overflowY: \"auto\" }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}