{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, applyNodeChanges, applyEdgeChanges, useReactFlow } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {};\nlet nodeId = 1;\nfunction App() {\n  _s();\n  var _nodes$find, _nodes$find2, _nodes$find3, _nodes$find4, _edges$find;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [manualEdges, setManualEdges] = useState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [submittedFlow, setSubmittedFlow] = useState({\n    settings: {\n      system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    },\n    nodes: [],\n    edges: []\n  });\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), []);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n  const onConnect = useCallback(params => {\n    const newEdge = {\n      ...params,\n      id: `${params.source}-${params.target}`,\n      label: \"\",\n      type: \"default\"\n    };\n    setEdges(eds => [...eds, newEdge]);\n    setManualEdges(eds => [...eds, newEdge]);\n    const sourceNode = nodes.find(n => n.id === params.source);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceNode.id) {\n        if (!node.data.options) node.data.options = {};\n        node.data.options[\"Option\"] = params.target;\n      }\n      return node;\n    });\n    setNodes(updatedNodes);\n  }, [nodes]);\n  const addNode = () => {\n    const newNode = {\n      id: `${++nodeId}`,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label: `Node ${nodeId}`,\n        message: \"\",\n        type: \"text\"\n      },\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes(nds => nds.filter(n => n.id !== selectedNodeId));\n    setEdges(eds => eds.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (id, field, value) => {\n    setNodes(nds => nds.map(n => {\n      if (n.id === id) {\n        n.data = {\n          ...n.data,\n          [field]: value\n        };\n      }\n      return n;\n    }));\n  };\n  const updateEdgeLabel = (id, value) => {\n    setEdges(eds => eds.map(e => {\n      if (e.id === id) {\n        return {\n          ...e,\n          label: value\n        };\n      }\n      return e;\n    }));\n    setManualEdges(eds => eds.map(e => {\n      if (e.id === id) {\n        return {\n          ...e,\n          label: value\n        };\n      }\n      return e;\n    }));\n  };\n  const handleExport = () => {\n    const exportData = {\n      settings: submittedFlow.settings,\n      nodes: nodes.map(n => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture,\n        next: n.data.next,\n        options: n.data.options,\n        expected_inputs: n.data.expected_inputs,\n        input_mapping: n.data.input_mapping,\n        follow_up_prompt: n.data.follow_up_prompt,\n        follow_up_capture: n.data.follow_up_capture,\n        gpt: n.data.gpt,\n        end: n.data.end\n      })),\n      edges: edges.map(e => ({\n        source: e.source,\n        target: e.target,\n        label: e.label\n      }))\n    };\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.download = \"conversation_data.json\";\n    link.href = url;\n    link.click();\n  };\n  const handleSubmitFlow = () => {\n    const exportData = {\n      settings: submittedFlow.settings,\n      nodes: nodes.map(n => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture,\n        next: n.data.next,\n        options: n.data.options,\n        expected_inputs: n.data.expected_inputs,\n        input_mapping: n.data.input_mapping,\n        follow_up_prompt: n.data.follow_up_prompt,\n        follow_up_capture: n.data.follow_up_capture,\n        gpt: n.data.gpt,\n        end: n.data.end\n      })),\n      edges: edges.map(e => ({\n        source: e.source,\n        target: e.target,\n        label: e.label\n      }))\n    };\n    setSubmittedFlow(exportData);\n    setChatbotReady(true);\n    const startNode = nodes.find(n => n.data.type !== \"gpt\");\n    if (startNode) {\n      setCurrentNodeId(startNode.id);\n      setChatHistory([{\n        sender: \"bot\",\n        text: startNode.data.message\n      }]);\n    }\n  };\n  const renderChatInput = () => {\n    const currentNode = nodes.find(n => n.id === currentNodeId);\n    if (!currentNode) return null;\n    if (currentNode.data.type === \"multi_choice\" && currentNode.data.options) {\n      const options = Object.entries(currentNode.data.options);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [options.map(([label, target]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: label,\n            checked: multiChoiceSelection.includes(label),\n            onChange: () => {\n              if (multiChoiceSelection.includes(label)) {\n                setMultiChoiceSelection(multiChoiceSelection.filter(l => l !== label));\n              } else {\n                setMultiChoiceSelection([...multiChoiceSelection, label]);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: label,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this)]\n        }, label, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setChatHistory(prev => [...prev, {\n              sender: \"user\",\n              text: multiChoiceSelection.join(\", \")\n            }]);\n            const targetNodeId = options[0][1]; // just use first option's target for now\n            setCurrentNodeId(targetNodeId);\n            const targetNode = nodes.find(n => n.id === targetNodeId);\n            if (targetNode) {\n              setChatHistory(prev => [...prev, {\n                sender: \"bot\",\n                text: targetNode.data.message\n              }]);\n            }\n            setMultiChoiceSelection([]);\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this);\n    }\n    if (currentNode.data.type === \"choice\" && currentNode.data.options) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Object.entries(currentNode.data.options).map(([label, target]) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setChatHistory(prev => [...prev, {\n              sender: \"user\",\n              text: label\n            }]);\n            setCurrentNodeId(target);\n            const targetNode = nodes.find(n => n.id === target);\n            if (targetNode) {\n              setChatHistory(prev => [...prev, {\n                sender: \"bot\",\n                text: targetNode.data.message\n              }]);\n            }\n          },\n          children: label\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        const userInput = inputValue.trim();\n        if (!userInput) return;\n        setChatHistory(prev => [...prev, {\n          sender: \"user\",\n          text: userInput\n        }]);\n        setInputValue(\"\");\n        const current = nodes.find(n => n.id === currentNodeId);\n        if (!current) return;\n        if (current.data.capture) {\n          setUserInputs({\n            ...userInputs,\n            [current.data.capture]: userInput\n          });\n        }\n        const nextNodeId = current.data.next;\n        const nextNode = nodes.find(n => n.id === nextNodeId);\n        if (nextNode) {\n          setCurrentNodeId(nextNodeId);\n          if (nextNode.data.type === \"gpt\") {\n            fetchGPTResponse({\n              ...userInputs,\n              [current.data.capture]: userInput\n            });\n          } else {\n            setChatHistory(prev => [...prev, {\n              sender: \"bot\",\n              text: nextNode.data.message\n            }]);\n          }\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        placeholder: \"Type your answer...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this);\n  };\n  const updatePrompt = e => {\n    setSubmittedFlow(prev => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        system_prompt: e.target.value\n      }\n    }));\n  };\n  const updateModel = e => {\n    setSubmittedFlow(prev => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        gpt_model: e.target.value\n      }\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70%\",\n        height: \"100%\",\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: \"center\",\n          margin: \"10px\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          marginBottom: \"10px\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#007bff\",\n            color: \"white\"\n          },\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#dc3545\",\n            color: \"white\"\n          },\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#28a745\",\n            color: \"white\"\n          },\n          onClick: handleExport,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#17a2b8\",\n            color: \"white\"\n          },\n          onClick: handleSubmitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: (_, node) => setSelectedNodeId(node.id),\n        onEdgeClick: (_, edge) => setSelectedEdgeId(edge.id),\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), selectedNodeId && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 50,\n          left: 10,\n          background: \"#f0f0f0\",\n          padding: 10,\n          borderRadius: 8\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Node Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: ((_nodes$find = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.message) || \"\",\n          onChange: e => updateNodeField(selectedNodeId, \"message\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: ((_nodes$find2 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find2 === void 0 ? void 0 : _nodes$find2.data.type) || \"\",\n          onChange: e => updateNodeField(selectedNodeId, \"type\", e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"text\",\n            children: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ((_nodes$find3 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find3 === void 0 ? void 0 : _nodes$find3.data.capture) || \"\",\n          onChange: e => updateNodeField(selectedNodeId, \"capture\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ((_nodes$find4 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find4 === void 0 ? void 0 : _nodes$find4.data.next) || \"\",\n          onChange: e => updateNodeField(selectedNodeId, \"next\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this), selectedEdgeId && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 50,\n          right: 10,\n          background: \"#f0f0f0\",\n          padding: 10,\n          borderRadius: 8\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Edge Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ((_edges$find = edges.find(e => e.id === selectedEdgeId)) === null || _edges$find === void 0 ? void 0 : _edges$find.label) || \"\",\n          onChange: e => updateEdgeLabel(selectedEdgeId, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"30%\",\n        height: \"100%\",\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\",\n        overflowY: \"auto\"\n      },\n      children: chatbotReady ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"MindPeace Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxHeight: \"80vh\",\n            overflowY: \"auto\",\n            marginBottom: \"10px\"\n          },\n          children: chatHistory.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: msg.sender === \"bot\" ? \"#e1f5fe\" : \"#c8e6c9\",\n              padding: \"8px\",\n              margin: \"5px 0\",\n              borderRadius: \"10px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [msg.sender === \"bot\" ? \"MindPeace\" : \"You\", \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 19\n            }, this), \" \", msg.text]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this), renderChatInput()]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Prompt Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"System Prompt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: submittedFlow.settings.system_prompt,\n          onChange: updatePrompt,\n          rows: 6,\n          style: {\n            width: \"100%\",\n            marginBottom: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Model:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: submittedFlow.settings.gpt_model,\n          onChange: updateModel,\n          style: {\n            width: \"100%\",\n            marginBottom: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt-3.5-turbo\",\n            children: \"gpt-3.5-turbo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt-4\",\n            children: \"gpt-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lrWNESreGmtosMMNd+wRj6Bxj4A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","ReactFlow","addEdge","Background","Controls","MiniMap","applyNodeChanges","applyEdgeChanges","useReactFlow","jsxDEV","_jsxDEV","Fragment","_Fragment","nodeTypes","nodeId","App","_s","_nodes$find","_nodes$find2","_nodes$find3","_nodes$find4","_edges$find","nodes","setNodes","edges","setEdges","manualEdges","setManualEdges","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","chatHistory","setChatHistory","currentNodeId","setCurrentNodeId","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","submittedFlow","setSubmittedFlow","settings","system_prompt","gpt_model","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","newEdge","id","source","target","label","type","sourceNode","find","n","updatedNodes","map","node","data","options","addNode","newNode","position","x","Math","random","y","message","deleteNode","filter","e","updateNodeField","field","value","updateEdgeLabel","handleExport","exportData","capture","next","expected_inputs","input_mapping","follow_up_prompt","follow_up_capture","gpt","end","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","download","href","click","handleSubmitFlow","startNode","sender","text","renderChatInput","currentNode","Object","entries","children","checked","includes","onChange","l","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onClick","prev","join","targetNodeId","targetNode","onSubmit","preventDefault","userInput","trim","current","nextNodeId","nextNode","fetchGPTResponse","placeholder","updatePrompt","updateModel","style","display","height","fontFamily","width","textAlign","margin","justifyContent","marginBottom","gap","backgroundColor","color","onNodeClick","_","onEdgeClick","edge","fitView","top","left","background","padding","borderRadius","right","borderLeft","overflowY","maxHeight","msg","idx","rows","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport ReactFlow, {\n  addEdge,\n  Background,\n  Controls,\n  MiniMap,\n  applyNodeChanges,\n  applyEdgeChanges,\n  useReactFlow\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst nodeTypes = {};\n\nlet nodeId = 1;\n\nfunction App() {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [manualEdges, setManualEdges] = useState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [submittedFlow, setSubmittedFlow] = useState({\n    settings: {\n      system_prompt:\n        \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    },\n    nodes: [],\n    edges: []\n  });\n\n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    []\n  );\n\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  const onConnect = useCallback(\n    (params) => {\n      const newEdge = {\n        ...params,\n        id: `${params.source}-${params.target}`,\n        label: \"\",\n        type: \"default\"\n      };\n      setEdges((eds) => [...eds, newEdge]);\n      setManualEdges((eds) => [...eds, newEdge]);\n\n      const sourceNode = nodes.find((n) => n.id === params.source);\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === sourceNode.id) {\n          if (!node.data.options) node.data.options = {};\n          node.data.options[\"Option\"] = params.target;\n        }\n        return node;\n      });\n      setNodes(updatedNodes);\n    },\n    [nodes]\n  );\n\n  const addNode = () => {\n    const newNode = {\n      id: `${++nodeId}`,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label: `Node ${nodeId}`,\n        message: \"\",\n        type: \"text\"\n      },\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes((nds) => nds.filter((n) => n.id !== selectedNodeId));\n    setEdges((eds) => eds.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (id, field, value) => {\n    setNodes((nds) =>\n      nds.map((n) => {\n        if (n.id === id) {\n          n.data = {\n            ...n.data,\n            [field]: value\n          };\n        }\n        return n;\n      })\n    );\n  };\n\n  const updateEdgeLabel = (id, value) => {\n    setEdges((eds) =>\n      eds.map((e) => {\n        if (e.id === id) {\n          return {\n            ...e,\n            label: value\n          };\n        }\n        return e;\n      })\n    );\n    setManualEdges((eds) =>\n      eds.map((e) => {\n        if (e.id === id) {\n          return {\n            ...e,\n            label: value\n          };\n        }\n        return e;\n      })\n    );\n  };\n  const handleExport = () => {\n    const exportData = {\n      settings: submittedFlow.settings,\n      nodes: nodes.map((n) => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture,\n        next: n.data.next,\n        options: n.data.options,\n        expected_inputs: n.data.expected_inputs,\n        input_mapping: n.data.input_mapping,\n        follow_up_prompt: n.data.follow_up_prompt,\n        follow_up_capture: n.data.follow_up_capture,\n        gpt: n.data.gpt,\n        end: n.data.end\n      })),\n      edges: edges.map((e) => ({\n        source: e.source,\n        target: e.target,\n        label: e.label\n      }))\n    };\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.download = \"conversation_data.json\";\n    link.href = url;\n    link.click();\n  };\n\n  const handleSubmitFlow = () => {\n    const exportData = {\n      settings: submittedFlow.settings,\n      nodes: nodes.map((n) => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture,\n        next: n.data.next,\n        options: n.data.options,\n        expected_inputs: n.data.expected_inputs,\n        input_mapping: n.data.input_mapping,\n        follow_up_prompt: n.data.follow_up_prompt,\n        follow_up_capture: n.data.follow_up_capture,\n        gpt: n.data.gpt,\n        end: n.data.end\n      })),\n      edges: edges.map((e) => ({\n        source: e.source,\n        target: e.target,\n        label: e.label\n      }))\n    };\n    setSubmittedFlow(exportData);\n    setChatbotReady(true);\n    const startNode = nodes.find((n) => n.data.type !== \"gpt\");\n    if (startNode) {\n      setCurrentNodeId(startNode.id);\n      setChatHistory([{ sender: \"bot\", text: startNode.data.message }]);\n    }\n  };\n\n  const renderChatInput = () => {\n    const currentNode = nodes.find((n) => n.id === currentNodeId);\n    if (!currentNode) return null;\n\n    if (currentNode.data.type === \"multi_choice\" && currentNode.data.options) {\n      const options = Object.entries(currentNode.data.options);\n      return (\n        <div>\n          {options.map(([label, target]) => (\n            <div key={label}>\n              <input\n                type=\"checkbox\"\n                id={label}\n                checked={multiChoiceSelection.includes(label)}\n                onChange={() => {\n                  if (multiChoiceSelection.includes(label)) {\n                    setMultiChoiceSelection(multiChoiceSelection.filter((l) => l !== label));\n                  } else {\n                    setMultiChoiceSelection([...multiChoiceSelection, label]);\n                  }\n                }}\n              />\n              <label htmlFor={label}>{label}</label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              setChatHistory((prev) => [...prev, { sender: \"user\", text: multiChoiceSelection.join(\", \") }]);\n              const targetNodeId = options[0][1]; // just use first option's target for now\n              setCurrentNodeId(targetNodeId);\n              const targetNode = nodes.find((n) => n.id === targetNodeId);\n              if (targetNode) {\n                setChatHistory((prev) => [...prev, { sender: \"bot\", text: targetNode.data.message }]);\n              }\n              setMultiChoiceSelection([]);\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (currentNode.data.type === \"choice\" && currentNode.data.options) {\n      return (\n        <div>\n          {Object.entries(currentNode.data.options).map(([label, target]) => (\n            <button\n              key={label}\n              onClick={() => {\n                setChatHistory((prev) => [...prev, { sender: \"user\", text: label }]);\n                setCurrentNodeId(target);\n                const targetNode = nodes.find((n) => n.id === target);\n                if (targetNode) {\n                  setChatHistory((prev) => [...prev, { sender: \"bot\", text: targetNode.data.message }]);\n                }\n              }}\n            >\n              {label}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const userInput = inputValue.trim();\n          if (!userInput) return;\n          setChatHistory((prev) => [...prev, { sender: \"user\", text: userInput }]);\n          setInputValue(\"\");\n          const current = nodes.find((n) => n.id === currentNodeId);\n          if (!current) return;\n          if (current.data.capture) {\n            setUserInputs({ ...userInputs, [current.data.capture]: userInput });\n          }\n\n          const nextNodeId = current.data.next;\n          const nextNode = nodes.find((n) => n.id === nextNodeId);\n          if (nextNode) {\n            setCurrentNodeId(nextNodeId);\n            if (nextNode.data.type === \"gpt\") {\n              fetchGPTResponse({ ...userInputs, [current.data.capture]: userInput });\n            } else {\n              setChatHistory((prev) => [...prev, { sender: \"bot\", text: nextNode.data.message }]);\n            }\n          }\n        }}\n      >\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder=\"Type your answer...\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    );\n  };\n\n  const updatePrompt = (e) => {\n    setSubmittedFlow((prev) => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        system_prompt: e.target.value\n      }\n    }));\n  };\n\n  const updateModel = (e) => {\n    setSubmittedFlow((prev) => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        gpt_model: e.target.value\n      }\n    }));\n  };\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", fontFamily: \"Arial, sans-serif\" }}>\n      <div style={{ width: \"70%\", height: \"100%\", position: \"relative\" }}>\n        <h2 style={{ textAlign: \"center\", margin: \"10px\" }}>Your AI Chatbot Designer — Fast. Visual. Code-Free</h2>\n        <div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: \"10px\", gap: \"10px\" }}>\n          <button style={{ backgroundColor: \"#007bff\", color: \"white\" }} onClick={addNode}>Add Node</button>\n          <button style={{ backgroundColor: \"#dc3545\", color: \"white\" }} onClick={deleteNode}>Delete Node</button>\n          <button style={{ backgroundColor: \"#28a745\", color: \"white\" }} onClick={handleExport}>Export JSON</button>\n          <button style={{ backgroundColor: \"#17a2b8\", color: \"white\" }} onClick={handleSubmitFlow}>Submit Flow</button>\n        </div>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={(_, node) => setSelectedNodeId(node.id)}\n          onEdgeClick={(_, edge) => setSelectedEdgeId(edge.id)}\n          fitView\n        >\n          <Background />\n          <MiniMap />\n          <Controls />\n        </ReactFlow>\n        {selectedNodeId && (\n          <div style={{ position: \"absolute\", top: 50, left: 10, background: \"#f0f0f0\", padding: 10, borderRadius: 8 }}>\n            <h4>Node Editor</h4>\n            <label>Message:</label>\n            <textarea\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.message || \"\"}\n              onChange={(e) => updateNodeField(selectedNodeId, \"message\", e.target.value)}\n            />\n            <br />\n            <label>Type:</label>\n            <select\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.type || \"\"}\n              onChange={(e) => updateNodeField(selectedNodeId, \"type\", e.target.value)}\n            >\n              <option value=\"text\">text</option>\n              <option value=\"choice\">choice</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n            </select>\n            <br />\n            <label>Capture:</label>\n            <input\n              type=\"text\"\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.capture || \"\"}\n              onChange={(e) => updateNodeField(selectedNodeId, \"capture\", e.target.value)}\n            />\n            <br />\n            <label>Next Node ID:</label>\n            <input\n              type=\"text\"\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.next || \"\"}\n              onChange={(e) => updateNodeField(selectedNodeId, \"next\", e.target.value)}\n            />\n          </div>\n        )}\n        {selectedEdgeId && (\n          <div style={{ position: \"absolute\", top: 50, right: 10, background: \"#f0f0f0\", padding: 10, borderRadius: 8 }}>\n            <h4>Edge Editor</h4>\n            <label>Label:</label>\n            <input\n              type=\"text\"\n              value={edges.find((e) => e.id === selectedEdgeId)?.label || \"\"}\n              onChange={(e) => updateEdgeLabel(selectedEdgeId, e.target.value)}\n            />\n          </div>\n        )}\n      </div>\n\n      <div style={{ width: \"30%\", height: \"100%\", padding: \"10px\", borderLeft: \"1px solid #ccc\", overflowY: \"auto\" }}>\n        {chatbotReady ? (\n          <>\n            <h3>MindPeace Chatbot</h3>\n            <div style={{ maxHeight: \"80vh\", overflowY: \"auto\", marginBottom: \"10px\" }}>\n              {chatHistory.map((msg, idx) => (\n                <div\n                  key={idx}\n                  style={{\n                    backgroundColor: msg.sender === \"bot\" ? \"#e1f5fe\" : \"#c8e6c9\",\n                    padding: \"8px\",\n                    margin: \"5px 0\",\n                    borderRadius: \"10px\"\n                  }}\n                >\n                  <strong>{msg.sender === \"bot\" ? \"MindPeace\" : \"You\"}:</strong> {msg.text}\n                </div>\n              ))}\n            </div>\n            {renderChatInput()}\n          </>\n        ) : (\n          <>\n            <h3>Prompt Settings</h3>\n            <label>System Prompt:</label>\n            <textarea\n              value={submittedFlow.settings.system_prompt}\n              onChange={updatePrompt}\n              rows={6}\n              style={{ width: \"100%\", marginBottom: \"10px\" }}\n            />\n            <label>Model:</label>\n            <select\n              value={submittedFlow.settings.gpt_model}\n              onChange={updateModel}\n              style={{ width: \"100%\", marginBottom: \"10px\" }}\n            >\n              <option value=\"gpt-3.5-turbo\">gpt-3.5-turbo</option>\n              <option value=\"gpt-4\">gpt-4</option>\n            </select>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}