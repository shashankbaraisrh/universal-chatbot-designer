{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, useEdgesState, useNodesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport CustomEdge from './CustomEdge';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  position: {\n    x: 250,\n    y: 5\n  },\n  data: {\n    label: 'Start Node',\n    message: 'Hello! Do you want to continue? (Yes/No)',\n    capture: '',\n    next: '',\n    end: false,\n    expected_inputs: '',\n    input_mapping: '',\n    follow_up_prompt: '',\n    follow_up_capture: '',\n    gpt: {\n      enabled: false\n    }\n  },\n  type: 'default'\n}];\nconst initialEdges = [];\nfunction App() {\n  _s();\n  var _selectedNode$data$gp, _selectedEdge$data;\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const [systemPrompt, setSystemPrompt] = useState(`You are MindPeace, a friendly, compassionate mental health support assistant. \nYour role is to listen, validate, and gently guide the user to talk about their feelings, stress, anxiety, or mental well-being. \nYou must refuse to answer any question unrelated to mental health. If asked about such unrelated topics (like sports, weather, celebrities, trivia, general knowledge), politely explain that you are here only to help them with their mental health and invite them to share how they feel. \nIf the user asks for links or resources specifically about mental health topics (like relaxation exercises, meditation, breathing techniques), you must share at least 2 specific example YouTube links in your reply. Do not just suggest search terms. \nAlways address the user by their first name only in normal conversation. \nIf the user asks about their name or full name, respond politely with their full stored name. \nIf the user asks about any other personal information (like email, age), do NOT reveal it. Instead, explain you must protect their privacy due to GDPR. \nYou also remember user's shared problems. If the user asks 'what problems did I share with you?', list all their problems. \nIMPORTANT: Each time you reply, check if the user's latest message includes NEW mental health issues. \nIf so, you MUST also output a JSON with a 'new_problems' list of any newly detected issues in the format: \n{'new_problems': [{'type': 'Panic Attacks', 'details': 'seeing ex girlfriend triggers panic'}]} \nAlso include your normal human-friendly reply in a 'reply' field. \nAlways return valid JSON with 'reply' and optional 'new_problems'.`);\n  const edgeTypes = {\n    custom: CustomEdge\n  };\n  const onConnect = useCallback(params => setEdges(eds => addEdge({\n    ...params,\n    data: {\n      label: 'Option'\n    },\n    type: 'custom'\n  }, eds)), [setEdges]);\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n    const updatedValue = field === 'end' || field === 'gpt' ? value : typeof value === 'string' ? value.trim() : value;\n    setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: field === 'gpt' ? {\n          enabled: value.enabled\n        } : updatedValue,\n        label: field === 'message' ? updatedValue.slice(0, 20) + (updatedValue.length > 20 ? '...' : '') : node.data.label\n      }\n    } : node));\n    setSelectedNode(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: field === 'gpt' ? {\n          enabled: value.enabled\n        } : updatedValue,\n        label: field === 'message' ? updatedValue.slice(0, 20) + (updatedValue.length > 20 ? '...' : '') : prev.data.label\n      }\n    }));\n  };\n  const handleEdgeLabelChange = value => {\n    if (!selectedEdge) return;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      data: {\n        ...edge.data,\n        label: value.trim()\n      }\n    } : edge));\n    setSelectedEdge(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        label: value.trim()\n      }\n    }));\n  };\n  const addNewNode = () => {\n    const newId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newId,\n      position: {\n        x: 100,\n        y: 100\n      },\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false,\n        expected_inputs: '',\n        input_mapping: '',\n        follow_up_prompt: '',\n        follow_up_capture: '',\n        gpt: {\n          enabled: false\n        }\n      },\n      type: 'default'\n    };\n    setNodes(nds => nds.concat(newNode));\n  };\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeIdToDelete = selectedNode.id;\n    setNodes(nds => nds.filter(node => node.id !== nodeIdToDelete));\n    setEdges(eds => eds.filter(edge => edge.source !== nodeIdToDelete && edge.target !== nodeIdToDelete));\n    setSelectedNode(null);\n  };\n  const exportJSON = () => {\n    const conversationTree = {\n      settings: {\n        default_gpt_model: 'gpt-3.5-turbo',\n        default_system_prompt: systemPrompt,\n        context_includes: ['history', 'user_state', 'problems']\n      },\n      variables: {\n        name: '',\n        first_name: '',\n        email: '',\n        age: '',\n        problem_type: '',\n        problem_details: '',\n        intensity: '',\n        problems: []\n      },\n      nodes: {}\n    };\n    const optionsMap = {};\n    edges.forEach(edge => {\n      var _edge$data;\n      if (!optionsMap[edge.source]) {\n        optionsMap[edge.source] = {};\n      }\n      optionsMap[edge.source][((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.label) || 'Option'] = edge.target;\n    });\n    nodes.forEach(node => {\n      const {\n        message,\n        capture,\n        next,\n        end,\n        expected_inputs,\n        input_mapping,\n        follow_up_prompt,\n        follow_up_capture,\n        gpt\n      } = node.data;\n      const nodeData = {\n        message: message || ''\n      };\n      if (optionsMap[node.id]) nodeData.options = optionsMap[node.id];\n      if (capture) nodeData.capture = capture;\n      if (next) nodeData.next = next;\n      if (end) nodeData.end = true;\n      if (expected_inputs) nodeData.expected_inputs = expected_inputs.split(',').map(s => s.trim());\n      if (input_mapping) {\n        try {\n          nodeData.input_mapping = JSON.parse(input_mapping);\n        } catch {\n          console.warn('Invalid JSON in input_mapping for node', node.id);\n        }\n      }\n      if (follow_up_prompt) nodeData.follow_up_prompt = follow_up_prompt;\n      if (follow_up_capture) nodeData.follow_up_capture = follow_up_capture;\n      if (gpt !== null && gpt !== void 0 && gpt.enabled) nodeData.gpt = {\n        enabled: true\n      };\n      conversationTree.nodes[node.id] = nodeData;\n    });\n    const json = JSON.stringify(conversationTree, null, 2);\n    const blob = new Blob([json], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeTypes: edgeTypes,\n        defaultEdgeOptions: {\n          type: 'custom'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), (selectedNode || selectedEdge) && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 320,\n        padding: 12,\n        background: '#f4f4f4'\n      },\n      children: [selectedNode && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Node Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => handleFieldChange('message', e.target.value),\n          rows: 3,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.capture,\n          onChange: e => handleFieldChange('capture', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.next,\n          onChange: e => handleFieldChange('next', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Expected Inputs (comma separated):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.expected_inputs,\n          onChange: e => handleFieldChange('expected_inputs', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Input Mapping (JSON):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.input_mapping,\n          onChange: e => handleFieldChange('input_mapping', e.target.value),\n          rows: 3,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Follow-up Prompt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.follow_up_prompt,\n          onChange: e => handleFieldChange('follow_up_prompt', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Follow-up Capture:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: selectedNode.data.follow_up_capture,\n          onChange: e => handleFieldChange('follow_up_capture', e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: ((_selectedNode$data$gp = selectedNode.data.gpt) === null || _selectedNode$data$gp === void 0 ? void 0 : _selectedNode$data$gp.enabled) || false,\n            onChange: e => handleFieldChange('gpt', {\n              enabled: e.target.checked\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 17\n          }, this), ' ', \"Enable GPT\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedNode.data.end,\n            onChange: e => handleFieldChange('end', e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 17\n          }, this), ' ', \"End Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), selectedEdge && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edge Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: ((_selectedEdge$data = selectedEdge.data) === null || _selectedEdge$data === void 0 ? void 0 : _selectedEdge$data.label) || '',\n          onChange: e => handleEdgeLabelChange(e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 10,\n        left: 10,\n        zIndex: 10,\n        display: 'flex',\n        gap: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteSelectedNode,\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        children: \"Export JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Vd4xhhj8/oYvvLunV2G8k9Hp0b4=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","Controls","MiniMap","useEdgesState","useNodesState","CustomEdge","jsxDEV","_jsxDEV","Fragment","_Fragment","initialNodes","id","position","x","y","data","label","message","capture","next","end","expected_inputs","input_mapping","follow_up_prompt","follow_up_capture","gpt","enabled","type","initialEdges","App","_s","_selectedNode$data$gp","_selectedEdge$data","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedEdge","setSelectedEdge","systemPrompt","setSystemPrompt","edgeTypes","custom","onConnect","params","eds","onNodeClick","event","node","onEdgeClick","edge","stopPropagation","handleFieldChange","field","value","updatedValue","trim","nds","map","slice","length","prev","handleEdgeLabelChange","addNewNode","newId","toString","newNode","concat","deleteSelectedNode","nodeIdToDelete","filter","source","target","exportJSON","conversationTree","settings","default_gpt_model","default_system_prompt","context_includes","variables","name","first_name","email","age","problem_type","problem_details","intensity","problems","optionsMap","forEach","_edge$data","nodeData","options","split","s","JSON","parse","console","warn","json","stringify","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","style","display","height","children","flex","fitView","defaultEdgeOptions","fileName","_jsxFileName","lineNumber","columnNumber","width","padding","background","onChange","e","rows","checked","top","left","zIndex","gap","onClick","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Background,\n  Controls,\n  MiniMap,\n  useEdgesState,\n  useNodesState\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport CustomEdge from './CustomEdge';\n\nconst initialNodes = [\n  {\n    id: '1',\n    position: { x: 250, y: 5 },\n    data: {\n      label: 'Start Node',\n      message: 'Hello! Do you want to continue? (Yes/No)',\n      capture: '',\n      next: '',\n      end: false,\n      expected_inputs: '',\n      input_mapping: '',\n      follow_up_prompt: '',\n      follow_up_capture: '',\n      gpt: { enabled: false }\n    },\n    type: 'default'\n  }\n];\n\nconst initialEdges = [];\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const [systemPrompt, setSystemPrompt] = useState(\n    `You are MindPeace, a friendly, compassionate mental health support assistant. \nYour role is to listen, validate, and gently guide the user to talk about their feelings, stress, anxiety, or mental well-being. \nYou must refuse to answer any question unrelated to mental health. If asked about such unrelated topics (like sports, weather, celebrities, trivia, general knowledge), politely explain that you are here only to help them with their mental health and invite them to share how they feel. \nIf the user asks for links or resources specifically about mental health topics (like relaxation exercises, meditation, breathing techniques), you must share at least 2 specific example YouTube links in your reply. Do not just suggest search terms. \nAlways address the user by their first name only in normal conversation. \nIf the user asks about their name or full name, respond politely with their full stored name. \nIf the user asks about any other personal information (like email, age), do NOT reveal it. Instead, explain you must protect their privacy due to GDPR. \nYou also remember user's shared problems. If the user asks 'what problems did I share with you?', list all their problems. \nIMPORTANT: Each time you reply, check if the user's latest message includes NEW mental health issues. \nIf so, you MUST also output a JSON with a 'new_problems' list of any newly detected issues in the format: \n{'new_problems': [{'type': 'Panic Attacks', 'details': 'seeing ex girlfriend triggers panic'}]} \nAlso include your normal human-friendly reply in a 'reply' field. \nAlways return valid JSON with 'reply' and optional 'new_problems'.`\n  );\n\n  const edgeTypes = { custom: CustomEdge };\n\n  const onConnect = useCallback(\n    (params) =>\n      setEdges((eds) =>\n        addEdge({ ...params, data: { label: 'Option' }, type: 'custom' }, eds)\n      ),\n    [setEdges]\n  );\n\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n\n    const updatedValue =\n      field === 'end' || field === 'gpt'\n        ? value\n        : typeof value === 'string'\n        ? value.trim()\n        : value;\n\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNode.id\n          ? {\n              ...node,\n              data: {\n                ...node.data,\n                [field]: field === 'gpt' ? { enabled: value.enabled } : updatedValue,\n                label:\n                  field === 'message'\n                    ? updatedValue.slice(0, 20) + (updatedValue.length > 20 ? '...' : '')\n                    : node.data.label\n              }\n            }\n          : node\n      )\n    );\n\n    setSelectedNode((prev) => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: field === 'gpt' ? { enabled: value.enabled } : updatedValue,\n        label:\n          field === 'message'\n            ? updatedValue.slice(0, 20) + (updatedValue.length > 20 ? '...' : '')\n            : prev.data.label\n      }\n    }));\n  };\n\n  const handleEdgeLabelChange = (value) => {\n    if (!selectedEdge) return;\n\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdge.id\n          ? { ...edge, data: { ...edge.data, label: value.trim() } }\n          : edge\n      )\n    );\n\n    setSelectedEdge((prev) => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        label: value.trim()\n      }\n    }));\n  };\n\n  const addNewNode = () => {\n    const newId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newId,\n      position: { x: 100, y: 100 },\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false,\n        expected_inputs: '',\n        input_mapping: '',\n        follow_up_prompt: '',\n        follow_up_capture: '',\n        gpt: { enabled: false }\n      },\n      type: 'default'\n    };\n    setNodes((nds) => nds.concat(newNode));\n  };\n\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeIdToDelete = selectedNode.id;\n\n    setNodes((nds) => nds.filter((node) => node.id !== nodeIdToDelete));\n    setEdges((eds) =>\n      eds.filter(\n        (edge) => edge.source !== nodeIdToDelete && edge.target !== nodeIdToDelete\n      )\n    );\n    setSelectedNode(null);\n  };\n\n  const exportJSON = () => {\n    const conversationTree = {\n      settings: {\n        default_gpt_model: 'gpt-3.5-turbo',\n        default_system_prompt: systemPrompt,\n        context_includes: ['history', 'user_state', 'problems']\n      },\n      variables: {\n        name: '',\n        first_name: '',\n        email: '',\n        age: '',\n        problem_type: '',\n        problem_details: '',\n        intensity: '',\n        problems: []\n      },\n      nodes: {}\n    };\n\n    const optionsMap = {};\n\n    edges.forEach((edge) => {\n      if (!optionsMap[edge.source]) {\n        optionsMap[edge.source] = {};\n      }\n      optionsMap[edge.source][edge.data?.label || 'Option'] = edge.target;\n    });\n\n    nodes.forEach((node) => {\n      const {\n        message,\n        capture,\n        next,\n        end,\n        expected_inputs,\n        input_mapping,\n        follow_up_prompt,\n        follow_up_capture,\n        gpt\n      } = node.data;\n\n      const nodeData = { message: message || '' };\n\n      if (optionsMap[node.id]) nodeData.options = optionsMap[node.id];\n      if (capture) nodeData.capture = capture;\n      if (next) nodeData.next = next;\n      if (end) nodeData.end = true;\n      if (expected_inputs)\n        nodeData.expected_inputs = expected_inputs\n          .split(',')\n          .map((s) => s.trim());\n      if (input_mapping) {\n        try {\n          nodeData.input_mapping = JSON.parse(input_mapping);\n        } catch {\n          console.warn('Invalid JSON in input_mapping for node', node.id);\n        }\n      }\n      if (follow_up_prompt) nodeData.follow_up_prompt = follow_up_prompt;\n      if (follow_up_capture) nodeData.follow_up_capture = follow_up_capture;\n      if (gpt?.enabled) nodeData.gpt = { enabled: true };\n\n      conversationTree.nodes[node.id] = nodeData;\n    });\n\n    const json = JSON.stringify(conversationTree, null, 2);\n    const blob = new Blob([json], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <div style={{ flex: 1 }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeTypes={edgeTypes}\n          defaultEdgeOptions={{ type: 'custom' }}\n        >\n          <Background />\n          <Controls />\n          <MiniMap />\n        </ReactFlow>\n      </div>\n\n      {(selectedNode || selectedEdge) && (\n        <div style={{ width: 320, padding: 12, background: '#f4f4f4' }}>\n          {selectedNode && (\n            <>\n              <h3>Node Editor</h3>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => handleFieldChange('message', e.target.value)}\n                rows={3}\n                style={{ width: '100%' }}\n              />\n              <label>Capture:</label>\n              <input\n                value={selectedNode.data.capture}\n                onChange={(e) => handleFieldChange('capture', e.target.value)}\n                style={{ width: '100%' }}\n              />\n              <label>Next Node:</label>\n              <input\n                value={selectedNode.data.next}\n                onChange={(e) => handleFieldChange('next', e.target.value)}\n                style={{ width: '100%' }}\n              />\n              <label>Expected Inputs (comma separated):</label>\n              <input\n                value={selectedNode.data.expected_inputs}\n                onChange={(e) =>\n                  handleFieldChange('expected_inputs', e.target.value)\n                }\n                style={{ width: '100%' }}\n              />\n              <label>Input Mapping (JSON):</label>\n              <textarea\n                value={selectedNode.data.input_mapping}\n                onChange={(e) =>\n                  handleFieldChange('input_mapping', e.target.value)\n                }\n                rows={3}\n                style={{ width: '100%' }}\n              />\n              <label>Follow-up Prompt:</label>\n              <input\n                value={selectedNode.data.follow_up_prompt}\n                onChange={(e) =>\n                  handleFieldChange('follow_up_prompt', e.target.value)\n                }\n                style={{ width: '100%' }}\n              />\n              <label>Follow-up Capture:</label>\n              <input\n                value={selectedNode.data.follow_up_capture}\n                onChange={(e) =>\n                  handleFieldChange('follow_up_capture', e.target.value)\n                }\n                style={{ width: '100%' }}\n              />\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={selectedNode.data.gpt?.enabled || false}\n                  onChange={(e) =>\n                    handleFieldChange('gpt', { enabled: e.target.checked })\n                  }\n                />{' '}\n                Enable GPT\n              </label>\n              <br />\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={selectedNode.data.end}\n                  onChange={(e) => handleFieldChange('end', e.target.checked)}\n                />{' '}\n                End Node\n              </label>\n            </>\n          )}\n          {selectedEdge && (\n            <>\n              <h3>Edge Editor</h3>\n              <label>Label:</label>\n              <input\n                value={selectedEdge.data?.label || ''}\n                onChange={(e) => handleEdgeLabelChange(e.target.value)}\n                style={{ width: '100%' }}\n              />\n            </>\n          )}\n        </div>\n      )}\n\n      <div\n        style={{\n          position: 'absolute',\n          top: 10,\n          left: 10,\n          zIndex: 10,\n          display: 'flex',\n          gap: 10\n        }}\n      >\n        <button onClick={addNewNode}>Add Node</button>\n        <button onClick={deleteSelectedNode}>Delete Node</button>\n        <button onClick={exportJSON}>Export JSON</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}