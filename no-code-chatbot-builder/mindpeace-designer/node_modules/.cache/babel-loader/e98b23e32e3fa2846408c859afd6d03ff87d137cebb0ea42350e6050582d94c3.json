{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DEFAULT_SETTINGS = {\n  system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n  gpt_model: \"gpt-3.5-turbo\"\n};\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === selectedNodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        };\n      }\n      return node;\n    }));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge));\n    setNodes(nds => nds.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: DEFAULT_SETTINGS,\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const importJSON = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const json = JSON.parse(e.target.result);\n        const importedNodes = json.nodes || {};\n        const nodeList = Object.entries(importedNodes).map(([id, data], index) => ({\n          id,\n          type: \"default\",\n          position: {\n            x: 100 + index * 50,\n            y: 100 + index * 50\n          },\n          data: {\n            message: data.message || \"\",\n            type: data.type || \"choice\",\n            options: data.options || {},\n            capture: data.capture || \"\",\n            next: data.next || \"\"\n          }\n        }));\n        const edgeList = [];\n        for (const [id, node] of Object.entries(importedNodes)) {\n          if (node.options) {\n            for (const [label, targetId] of Object.entries(node.options)) {\n              edgeList.push({\n                id: `e${id}-${targetId}`,\n                source: id,\n                target: targetId,\n                label,\n                markerEnd: {\n                  type: MarkerType.ArrowClosed\n                }\n              });\n            }\n          } else if (node.next) {\n            edgeList.push({\n              id: `e${id}-${node.next}`,\n              source: id,\n              target: node.next,\n              label: \"next\",\n              markerEnd: {\n                type: MarkerType.ArrowClosed\n              }\n            });\n          }\n        }\n        setNodes(nodeList);\n        setEdges(edgeList);\n        nodeCounter = nodeList.length + 1;\n      } catch (err) {\n        alert(\"Invalid JSON file!\");\n        console.error(err);\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 10\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportJSON,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 100,\n        zIndex: 10\n      },\n      children: \"Export JSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 210,\n        zIndex: 10,\n        background: \"#eee\",\n        padding: \"4px 8px\",\n        borderRadius: \"4px\",\n        cursor: \"pointer\"\n      },\n      children: [\"Import JSON\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".json\",\n        onChange: importJSON,\n        style: {\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), (selectedNode || selectedEdge) && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 50,\n        left: 10,\n        zIndex: 10,\n        background: \"white\",\n        padding: 10,\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        width: \"300px\"\n      },\n      children: [selectedNode && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => updateNodeField(\"message\", e.target.value),\n            style: {\n              width: \"100%\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => updateNodeField(\"type\", e.target.value),\n            style: {\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => updateNodeField(\"capture\", e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => updateNodeField(\"next\", e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), selectedEdge && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Option Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedEdge.label,\n          onChange: e => updateEdgeLabel(e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data,\n          label: n.data.message\n        }\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0U4sC/rZ4xB9VFjcH5OY5Ry2Myk=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","Fragment","_Fragment","DEFAULT_SETTINGS","system_prompt","gpt_model","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","selectedNode","find","n","id","selectedEdge","e","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","data","next","has","push","animated","type","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","eds","nds","updated","options","addNode","newId","toString","newNode","message","capture","position","x","Math","random","y","onNodeClick","_","onEdgeClick","edge","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","newOptions","exportJSON","output","settings","forEach","nodeObj","Object","keys","length","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","importJSON","event","file","files","reader","FileReader","onload","json","parse","result","importedNodes","nodeList","entries","index","edgeList","err","alert","console","error","readAsText","width","height","children","onClick","top","left","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","background","padding","borderRadius","cursor","accept","onChange","display","border","edges","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst DEFAULT_SETTINGS = {\n  system_prompt:\n    \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n  gpt_model: \"gpt-3.5-turbo\"\n};\n\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(\n      manualEdges.map((e) => `${e.source}->${e.target}`)\n    );\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      setEdges((eds) =>\n        addEdge(\n          {\n            ...params,\n            id: edgeId,\n            markerEnd: { type: MarkerType.ArrowClosed },\n            label\n          },\n          eds\n        )\n      );\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === params.source) {\n            const updated = { ...node };\n            if (\n              node.data.type === \"choice\" ||\n              node.data.type === \"multi_choice\"\n            ) {\n              updated.data.options = {\n                ...updated.data.options,\n                [label]: params.target\n              };\n            } else {\n              updated.data.next = params.target;\n            }\n            return updated;\n          }\n          return node;\n        })\n      );\n    },\n    [setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === selectedNodeId) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              [field]: value\n            }\n          };\n        }\n        return node;\n      })\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n      )\n    );\n\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === sourceId) {\n          const updated = { ...node };\n          if (\n            updated.data.type === \"choice\" ||\n            updated.data.type === \"multi_choice\"\n          ) {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = targetId;\n            updated.data.options = newOptions;\n          } else {\n            updated.data.next = targetId;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: DEFAULT_SETTINGS,\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const importJSON = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const json = JSON.parse(e.target.result);\n        const importedNodes = json.nodes || {};\n\n        const nodeList = Object.entries(importedNodes).map(([id, data], index) => ({\n          id,\n          type: \"default\",\n          position: { x: 100 + index * 50, y: 100 + index * 50 },\n          data: {\n            message: data.message || \"\",\n            type: data.type || \"choice\",\n            options: data.options || {},\n            capture: data.capture || \"\",\n            next: data.next || \"\"\n          }\n        }));\n\n        const edgeList = [];\n        for (const [id, node] of Object.entries(importedNodes)) {\n          if (node.options) {\n            for (const [label, targetId] of Object.entries(node.options)) {\n              edgeList.push({\n                id: `e${id}-${targetId}`,\n                source: id,\n                target: targetId,\n                label,\n                markerEnd: { type: MarkerType.ArrowClosed }\n              });\n            }\n          } else if (node.next) {\n            edgeList.push({\n              id: `e${id}-${node.next}`,\n              source: id,\n              target: node.next,\n              label: \"next\",\n              markerEnd: { type: MarkerType.ArrowClosed }\n            });\n          }\n        }\n\n        setNodes(nodeList);\n        setEdges(edgeList);\n        nodeCounter = nodeList.length + 1;\n      } catch (err) {\n        alert(\"Invalid JSON file!\");\n        console.error(err);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <button onClick={addNode} style={{ position: \"absolute\", top: 10, left: 10, zIndex: 10 }}>\n        Add Node\n      </button>\n      <button onClick={exportJSON} style={{ position: \"absolute\", top: 10, left: 100, zIndex: 10 }}>\n        Export JSON\n      </button>\n      <label\n        style={{\n          position: \"absolute\",\n          top: 10,\n          left: 210,\n          zIndex: 10,\n          background: \"#eee\",\n          padding: \"4px 8px\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        }}\n      >\n        Import JSON\n        <input\n          type=\"file\"\n          accept=\".json\"\n          onChange={importJSON}\n          style={{ display: \"none\" }}\n        />\n      </label>\n\n      {(selectedNode || selectedEdge) && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: 50,\n            left: 10,\n            zIndex: 10,\n            background: \"white\",\n            padding: 10,\n            border: \"1px solid #ccc\",\n            borderRadius: \"8px\",\n            width: \"300px\"\n          }}\n        >\n          {selectedNode && (\n            <>\n              <h4>Editing Node: {selectedNode.id}</h4>\n              <div>\n                <label>Message:</label>\n                <textarea\n                  value={selectedNode.data.message}\n                  onChange={(e) => updateNodeField(\"message\", e.target.value)}\n                  style={{ width: \"100%\", height: 60 }}\n                />\n              </div>\n              <div>\n                <label>Type:</label>\n                <select\n                  value={selectedNode.data.type}\n                  onChange={(e) => updateNodeField(\"type\", e.target.value)}\n                  style={{ width: \"100%\" }}\n                >\n                  <option value=\"choice\">choice</option>\n                  <option value=\"input\">input</option>\n                  <option value=\"multi_choice\">multi_choice</option>\n                  <option value=\"gpt\">gpt</option>\n                  <option value=\"end\">end</option>\n                </select>\n              </div>\n              <div>\n                <label>Capture Field:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.capture}\n                  onChange={(e) => updateNodeField(\"capture\", e.target.value)}\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n              <div>\n                <label>Next Node ID:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.next}\n                  onChange={(e) => updateNodeField(\"next\", e.target.value)}\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n            </>\n          )}\n          {selectedEdge && (\n            <>\n              <h4>Editing Edge</h4>\n              <label>Option Label:</label>\n              <input\n                type=\"text\"\n                value={selectedEdge.label}\n                onChange={(e) => updateEdgeLabel(e.target.value)}\n                style={{ width: \"100%\" }}\n              />\n            </>\n          )}\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({\n          ...n,\n          data: { ...n.data, label: n.data.message }\n        }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}