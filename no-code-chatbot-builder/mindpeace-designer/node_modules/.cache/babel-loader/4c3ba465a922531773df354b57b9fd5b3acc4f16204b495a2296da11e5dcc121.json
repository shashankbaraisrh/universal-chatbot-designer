{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [edgeLabelInput, setEdgeLabelInput] = useState(\"\");\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const newEdge = {\n      ...params,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label: \"\" // Start with empty label\n    };\n    setEdges(eds => addEdge(newEdge, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            \"\": params.target // placeholder key\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === selectedNodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        };\n      }\n      return node;\n    }));\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 10\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportJSON,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 100,\n        zIndex: 10\n      },\n      children: \"Export JSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 50,\n        left: 10,\n        zIndex: 10,\n        background: \"white\",\n        padding: 10,\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        width: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Editing Node: \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), selectedEdgeId && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 300,\n        left: 10,\n        zIndex: 10,\n        background: \"white\",\n        padding: 10,\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        width: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Editing Edge: \", selectedEdgeId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: edgeLabelInput,\n          onChange: e => setEdgeLabelInput(e.target.value),\n          style: {\n            width: \"100%\",\n            marginTop: 5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            marginTop: 10\n          },\n          onClick: () => {\n            setEdges(eds => eds.map(edge => edge.id === selectedEdgeId ? {\n              ...edge,\n              label: edgeLabelInput\n            } : edge));\n            const edge = manualEdges.find(e => e.id === selectedEdgeId);\n            if (edge) {\n              setNodes(nds => nds.map(node => {\n                if (node.id === edge.source) {\n                  const updated = {\n                    ...node\n                  };\n                  if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                    const newOptions = {\n                      ...updated.data.options\n                    };\n                    const oldLabel = Object.keys(newOptions).find(k => newOptions[k] === edge.target);\n                    if (oldLabel) delete newOptions[oldLabel];\n                    newOptions[edgeLabelInput] = edge.target;\n                    updated.data.options = newOptions;\n                  } else {\n                    updated.data.next = edge.target;\n                  }\n                  return updated;\n                }\n                return node;\n              }));\n            }\n            setSelectedEdgeId(null);\n            setEdgeLabelInput(\"\");\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            marginLeft: 10\n          },\n          onClick: () => {\n            setSelectedEdgeId(null);\n            setEdgeLabelInput(\"\");\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data,\n          label: n.data.message\n        }\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: (_, edge) => {\n        setSelectedEdgeId(edge.id);\n        setEdgeLabelInput(edge.label || \"\");\n        setSelectedNodeId(null);\n      },\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"N+jRua+5mEILPaH/i+QMfSRMd2w=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","edgeLabelInput","setEdgeLabelInput","selectedNode","find","n","autoGeneratedEdges","existingConnections","Set","map","e","source","target","autoEdges","node","_node$data","has","push","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","newEdge","eds","nds","updated","addNode","newId","toString","newNode","Math","random","onNodeClick","_","updateNodeField","field","value","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","length","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","width","height","children","onClick","top","left","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","background","padding","border","borderRadius","onChange","marginTop","edge","newOptions","oldLabel","k","marginLeft","edges","onEdgeClick","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [edgeLabelInput, setEdgeLabelInput] = useState(\"\");\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(\n      manualEdges.map((e) => `${e.source}->${e.target}`)\n    );\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const newEdge = {\n        ...params,\n        markerEnd: { type: MarkerType.ArrowClosed },\n        label: \"\" // Start with empty label\n      };\n\n      setEdges((eds) => addEdge(newEdge, eds));\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === params.source) {\n            const updated = { ...node };\n            if (\n              updated.data.type === \"choice\" ||\n              updated.data.type === \"multi_choice\"\n            ) {\n              updated.data.options = {\n                ...updated.data.options,\n                \"\": params.target // placeholder key\n              };\n            } else {\n              updated.data.next = params.target;\n            }\n            return updated;\n          }\n          return node;\n        })\n      );\n    },\n    [setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === selectedNodeId) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              [field]: value\n            }\n          };\n        }\n        return node;\n      })\n    );\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <button onClick={addNode} style={{ position: \"absolute\", top: 10, left: 10, zIndex: 10 }}>\n        Add Node\n      </button>\n      <button onClick={exportJSON} style={{ position: \"absolute\", top: 10, left: 100, zIndex: 10 }}>\n        Export JSON\n      </button>\n\n      {selectedNode && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: 50,\n            left: 10,\n            zIndex: 10,\n            background: \"white\",\n            padding: 10,\n            border: \"1px solid #ccc\",\n            borderRadius: \"8px\",\n            width: \"300px\"\n          }}\n        >\n          <h4>Editing Node: {selectedNode.id}</h4>\n          <div>\n            <label>Message:</label>\n            <textarea\n              value={selectedNode.data.message}\n              onChange={(e) => updateNodeField(\"message\", e.target.value)}\n              style={{ width: \"100%\", height: 60 }}\n            />\n          </div>\n          <div>\n            <label>Type:</label>\n            <select\n              value={selectedNode.data.type}\n              onChange={(e) => updateNodeField(\"type\", e.target.value)}\n              style={{ width: \"100%\" }}\n            >\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n          </div>\n          <div>\n            <label>Capture Field:</label>\n            <input\n              type=\"text\"\n              value={selectedNode.data.capture}\n              onChange={(e) => updateNodeField(\"capture\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n          <div>\n            <label>Next Node ID:</label>\n            <input\n              type=\"text\"\n              value={selectedNode.data.next}\n              onChange={(e) => updateNodeField(\"next\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        </div>\n      )}\n\n      {selectedEdgeId && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: 300,\n            left: 10,\n            zIndex: 10,\n            background: \"white\",\n            padding: 10,\n            border: \"1px solid #ccc\",\n            borderRadius: \"8px\",\n            width: \"300px\"\n          }}\n        >\n          <h4>Editing Edge: {selectedEdgeId}</h4>\n          <div>\n            <label>Label:</label>\n            <input\n              type=\"text\"\n              value={edgeLabelInput}\n              onChange={(e) => setEdgeLabelInput(e.target.value)}\n              style={{ width: \"100%\", marginTop: 5 }}\n            />\n            <button\n              style={{ marginTop: 10 }}\n              onClick={() => {\n                setEdges((eds) =>\n                  eds.map((edge) =>\n                    edge.id === selectedEdgeId\n                      ? { ...edge, label: edgeLabelInput }\n                      : edge\n                  )\n                );\n\n                const edge = manualEdges.find((e) => e.id === selectedEdgeId);\n                if (edge) {\n                  setNodes((nds) =>\n                    nds.map((node) => {\n                      if (node.id === edge.source) {\n                        const updated = { ...node };\n                        if (\n                          updated.data.type === \"choice\" ||\n                          updated.data.type === \"multi_choice\"\n                        ) {\n                          const newOptions = { ...updated.data.options };\n                          const oldLabel = Object.keys(newOptions).find(\n                            (k) => newOptions[k] === edge.target\n                          );\n                          if (oldLabel) delete newOptions[oldLabel];\n                          newOptions[edgeLabelInput] = edge.target;\n                          updated.data.options = newOptions;\n                        } else {\n                          updated.data.next = edge.target;\n                        }\n                        return updated;\n                      }\n                      return node;\n                    })\n                  );\n                }\n\n                setSelectedEdgeId(null);\n                setEdgeLabelInput(\"\");\n              }}\n            >\n              Save\n            </button>\n            <button\n              style={{ marginLeft: 10 }}\n              onClick={() => {\n                setSelectedEdgeId(null);\n                setEdgeLabelInput(\"\");\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({\n          ...n,\n          data: { ...n.data, label: n.data.message }\n        }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={(_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setEdgeLabelInput(edge.label || \"\");\n          setSelectedNodeId(null);\n        }}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}