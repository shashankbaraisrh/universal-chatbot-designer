{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [ongoingChat, setOngoingChat] = useState(false);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setOngoingChat(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    if (!submittedFlow || !currentNodeId && !ongoingChat) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    if (!ongoingChat) {\n      var _currentNode$options, _submittedFlow$nodes;\n      const currentNode = submittedFlow.nodes[currentNodeId];\n      const newInputs = {\n        ...userInputs\n      };\n      if (currentNode.capture) newInputs[currentNode.capture] = response;\n      let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n      const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n      if (!nextNode) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: \"Conversation complete.\"\n        }]);\n        setCurrentNodeId(null);\n        return;\n      }\n      if (nextNode.type === \"gpt\") {\n        const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n        try {\n          const res = await fetch(\"http://localhost:5000/chat\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              message: response,\n              summary: summaryText,\n              system_prompt: submittedFlow.settings.system_prompt,\n              gpt_model: submittedFlow.settings.gpt_model\n            })\n          });\n          const data = await res.json();\n          const gptReply = data.reply || \"No response from GPT.\";\n          setChatHistory([...updatedHistory, {\n            sender: \"bot\",\n            message: nextNode.message\n          }, {\n            sender: \"bot\",\n            message: gptReply\n          }]);\n          setUserInputs(newInputs);\n          setCurrentNodeId(null);\n          setOngoingChat(true);\n        } catch (err) {\n          setChatHistory([...updatedHistory, {\n            sender: \"bot\",\n            message: nextNode.message\n          }, {\n            sender: \"bot\",\n            message: \"Error contacting GPT.\"\n          }]);\n          setCurrentNodeId(null);\n        }\n      } else {\n        setUserInputs(newInputs);\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }]);\n        setCurrentNodeId(nextId);\n      }\n    } else {\n      try {\n        const summaryText = Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n    }\n    setInputValue(\"\");\n  };\n  const renderChatInput = () => {\n    if (!chatbotReady) return null;\n    if (currentNodeId) {\n      const node = submittedFlow.nodes[currentNodeId];\n      if (node.type === \"choice\" || node.type === \"multi_choice\") {\n        return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            padding: \"8px\",\n            margin: \"4px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            background: \"#e0f2fe\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this));\n      }\n      if (node.type === \"input\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: inputValue,\n            onChange: e => setInputValue(e.target.value),\n            onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n            style: {\n              width: \"100%\",\n              padding: 8,\n              marginBottom: 8,\n              borderRadius: 6,\n              border: \"1px solid #ccc\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUserResponse(inputValue),\n            style: {\n              width: \"100%\",\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"8px 12px\",\n              border: \"none\"\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this);\n      }\n      return null;\n    } else if (ongoingChat) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // (The rest of your layout, node editor panel, edge editor panel, ReactFlow canvas, buttons, and chat panel remains same — already confirmed working in your last version. If you'd like, I will now paste that too.)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      fontFamily: \"Segoe UI, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          padding: \"10px 20px\",\n          background: \"#f3f4f6\",\n          borderBottom: \"1px solid #ccc\",\n          margin: 0\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 20,\n          zIndex: 10,\n          display: \"flex\",\n          gap: 8\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#3b82f6\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 14px\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\"\n          },\n          onClick: () => alert(\"Add Node functionality goes here.\"),\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 14px\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\"\n          },\n          onClick: () => console.log(\"Export JSON:\", getExportJSON()),\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 14px\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\"\n          },\n          onClick: () => alert(\"Delete Node functionality goes here.\"),\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#6366f1\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 14px\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 14px\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 14px\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 120,\n          left: 20,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          border: \"1px solid #ccc\",\n          padding: 12,\n          borderRadius: 6,\n          width: 300\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Node Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const newNodes = nodes.map(n => n.id === selectedNode.id ? {\n                ...n,\n                data: {\n                  ...n.data,\n                  message: e.target.value\n                }\n              } : n);\n              setNodes(newNodes);\n            },\n            rows: 3,\n            style: {\n              width: \"100%\",\n              marginBottom: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const newNodes = nodes.map(n => n.id === selectedNode.id ? {\n                ...n,\n                data: {\n                  ...n.data,\n                  type: e.target.value\n                }\n              } : n);\n              setNodes(newNodes);\n            },\n            style: {\n              width: \"100%\",\n              marginBottom: 8\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"Choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"Input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"Multi Choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"GPT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"End\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: selectedNode.data.next || \"\",\n            onChange: e => {\n              const newNodes = nodes.map(n => n.id === selectedNode.id ? {\n                ...n,\n                data: {\n                  ...n.data,\n                  next: e.target.value\n                }\n              } : n);\n              setNodes(newNodes);\n            },\n            style: {\n              width: \"100%\",\n              marginBottom: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: selectedNode.data.capture || \"\",\n            onChange: e => {\n              const newNodes = nodes.map(n => n.id === selectedNode.id ? {\n                ...n,\n                data: {\n                  ...n.data,\n                  capture: e.target.value\n                }\n              } : n);\n              setNodes(newNodes);\n            },\n            style: {\n              width: \"100%\",\n              marginBottom: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"100%\",\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes.map(node => ({\n            ...node,\n            data: {\n              ...node.data,\n              label: node.data.message\n            },\n            style: getNodeStyle(node.data.type)\n          })),\n          edges: allEdges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onNodeClick: (_, node) => setSelectedNodeId(node.id),\n          onEdgeClick: (_, edge) => setSelectedEdgeId(edge.id),\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 400,\n        borderLeft: \"1px solid #ccc\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        background: \"#f3f4f6\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"12px\",\n          background: \"#075e54\",\n          color: \"white\",\n          fontWeight: \"bold\"\n        },\n        children: \"\\uD83D\\uDCAC MindPeace Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          padding: 10\n        },\n        children: chatHistory.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            alignSelf: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n            backgroundColor: msg.sender === \"user\" ? \"#d9fdd3\" : \"#ffffff\",\n            color: \"#111\",\n            borderRadius: \"16px\",\n            padding: \"10px 14px\",\n            marginBottom: 8,\n            maxWidth: \"80%\",\n            boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\n            wordBreak: \"break-word\"\n          },\n          children: msg.message\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 10,\n          borderTop: \"1px solid #ccc\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+Ma8OP8Le4SO7hHksoOUpCTq32o=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","ongoingChat","setOngoingChat","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","updatedHistory","_currentNode$options","_submittedFlow$nodes","currentNode","newInputs","nextId","nextNode","summaryText","entries","k","v","join","summary","json","gptReply","reply","renderChatInput","opt","onClick","margin","width","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","onKeyDown","key","marginBottom","color","display","height","flex","borderBottom","top","left","zIndex","gap","backgroundColor","fontWeight","cursor","console","log","rows","onNodeClick","_","onEdgeClick","edge","fitView","borderLeft","flexDirection","overflowY","msg","i","alignSelf","wordBreak","borderTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const [ongoingChat, setOngoingChat] = useState(false);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setOngoingChat(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow || (!currentNodeId && !ongoingChat)) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n\n    if (!ongoingChat) {\n      const currentNode = submittedFlow.nodes[currentNodeId];\n      const newInputs = { ...userInputs };\n      if (currentNode.capture) newInputs[currentNode.capture] = response;\n      let nextId = currentNode.next || currentNode.options?.[response];\n      const nextNode = submittedFlow.nodes?.[nextId];\n\n      if (!nextNode) {\n        setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n        setCurrentNodeId(null);\n        return;\n      }\n\n      if (nextNode.type === \"gpt\") {\n        const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n        try {\n          const res = await fetch(\"http://localhost:5000/chat\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              message: response,\n              summary: summaryText,\n              system_prompt: submittedFlow.settings.system_prompt,\n              gpt_model: submittedFlow.settings.gpt_model\n            })\n          });\n          const data = await res.json();\n          const gptReply = data.reply || \"No response from GPT.\";\n          setChatHistory([\n            ...updatedHistory,\n            { sender: \"bot\", message: nextNode.message },\n            { sender: \"bot\", message: gptReply }\n          ]);\n          setUserInputs(newInputs);\n          setCurrentNodeId(null);\n          setOngoingChat(true);\n        } catch (err) {\n          setChatHistory([\n            ...updatedHistory,\n            { sender: \"bot\", message: nextNode.message },\n            { sender: \"bot\", message: \"Error contacting GPT.\" }\n          ]);\n          setCurrentNodeId(null);\n        }\n      } else {\n        setUserInputs(newInputs);\n        setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n        setCurrentNodeId(nextId);\n      }\n    } else {\n      try {\n        const summaryText = Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, { sender: \"bot\", message: gptReply }]);\n      } catch (err) {\n        setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n    }\n\n    setInputValue(\"\");\n  };\n\n  const renderChatInput = () => {\n    if (!chatbotReady) return null;\n\n    if (currentNodeId) {\n      const node = submittedFlow.nodes[currentNodeId];\n      if (node.type === \"choice\" || node.type === \"multi_choice\") {\n        return Object.keys(node.options || {}).map((opt) => (\n          <button key={opt} onClick={() => handleUserResponse(opt)} style={{ padding: \"8px\", margin: \"4px\", width: \"100%\", borderRadius: 6, border: \"1px solid #ccc\", background: \"#e0f2fe\" }}>\n            {opt}\n          </button>\n        ));\n      }\n\n      if (node.type === \"input\") {\n        return (\n          <div>\n            <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)} style={{ width: \"100%\", padding: 8, marginBottom: 8, borderRadius: 6, border: \"1px solid #ccc\" }} />\n            <button onClick={() => handleUserResponse(inputValue)} style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}>\n              Submit\n            </button>\n          </div>\n        );\n      }\n\n      return null;\n    } else if (ongoingChat) {\n      return (\n        <div>\n          <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)} style={{ width: \"100%\", padding: 8, marginBottom: 8, borderRadius: 6, border: \"1px solid #ccc\" }} />\n          <button onClick={() => handleUserResponse(inputValue)} style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}>\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // (The rest of your layout, node editor panel, edge editor panel, ReactFlow canvas, buttons, and chat panel remains same — already confirmed working in your last version. If you'd like, I will now paste that too.)\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", fontFamily: \"Segoe UI, sans-serif\" }}>\n      {/* Left side - Main canvas */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <h2 style={{ padding: \"10px 20px\", background: \"#f3f4f6\", borderBottom: \"1px solid #ccc\", margin: 0 }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </h2>\n\n        {/* Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 20, zIndex: 10, display: \"flex\", gap: 8 }}>\n          <button style={{ backgroundColor: \"#3b82f6\", color: \"white\", borderRadius: 6, padding: \"8px 14px\", border: \"none\", fontWeight: \"bold\", cursor: \"pointer\" }} onClick={() => alert(\"Add Node functionality goes here.\")}>\n            Add Node\n          </button>\n          <button style={{ backgroundColor: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"8px 14px\", border: \"none\", fontWeight: \"bold\", cursor: \"pointer\" }} onClick={() => console.log(\"Export JSON:\", getExportJSON())}>\n            Export JSON\n          </button>\n          <button style={{ backgroundColor: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"8px 14px\", border: \"none\", fontWeight: \"bold\", cursor: \"pointer\" }} onClick={() => alert(\"Delete Node functionality goes here.\")}>\n            Delete Node\n          </button>\n          <button style={{ backgroundColor: \"#6366f1\", color: \"white\", borderRadius: 6, padding: \"8px 14px\", border: \"none\", fontWeight: \"bold\", cursor: \"pointer\" }} onClick={submitFlow}>\n            Submit Flow\n          </button>\n          <button style={{ backgroundColor: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"8px 14px\", border: \"none\", fontWeight: \"bold\", cursor: \"pointer\" }} onClick={undo}>\n            Undo\n          </button>\n          <button style={{ backgroundColor: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"8px 14px\", border: \"none\", fontWeight: \"bold\", cursor: \"pointer\" }} onClick={redo}>\n            Redo\n          </button>\n        </div>\n\n        {/* Node Editor */}\n        {selectedNode && (\n          <div style={{ position: \"absolute\", top: 120, left: 20, zIndex: 10, background: \"#f9fafb\", border: \"1px solid #ccc\", padding: 12, borderRadius: 6, width: 300 }}>\n            <h4>Node Editor</h4>\n            <div>\n              <label>Message</label>\n              <textarea value={selectedNode.data.message} onChange={(e) => {\n                const newNodes = nodes.map((n) =>\n                  n.id === selectedNode.id ? { ...n, data: { ...n.data, message: e.target.value } } : n\n                );\n                setNodes(newNodes);\n              }} rows={3} style={{ width: \"100%\", marginBottom: 8 }} />\n              <label>Type</label>\n              <select value={selectedNode.data.type} onChange={(e) => {\n                const newNodes = nodes.map((n) =>\n                  n.id === selectedNode.id ? { ...n, data: { ...n.data, type: e.target.value } } : n\n                );\n                setNodes(newNodes);\n              }} style={{ width: \"100%\", marginBottom: 8 }}>\n                <option value=\"choice\">Choice</option>\n                <option value=\"input\">Input</option>\n                <option value=\"multi_choice\">Multi Choice</option>\n                <option value=\"gpt\">GPT</option>\n                <option value=\"end\">End</option>\n              </select>\n              <label>Next Node ID</label>\n              <input value={selectedNode.data.next || \"\"} onChange={(e) => {\n                const newNodes = nodes.map((n) =>\n                  n.id === selectedNode.id ? { ...n, data: { ...n.data, next: e.target.value } } : n\n                );\n                setNodes(newNodes);\n              }} style={{ width: \"100%\", marginBottom: 8 }} />\n              <label>Capture Field</label>\n              <input value={selectedNode.data.capture || \"\"} onChange={(e) => {\n                const newNodes = nodes.map((n) =>\n                  n.id === selectedNode.id ? { ...n, data: { ...n.data, capture: e.target.value } } : n\n                );\n                setNodes(newNodes);\n              }} style={{ width: \"100%\", marginBottom: 8 }} />\n            </div>\n          </div>\n        )}\n\n        {/* Flow Canvas */}\n        <div style={{ height: \"100%\", width: \"100%\" }}>\n          <ReactFlow\n            nodes={nodes.map((node) => ({\n              ...node,\n              data: {\n                ...node.data,\n                label: node.data.message\n              },\n              style: getNodeStyle(node.data.type)\n            }))}\n            edges={allEdges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onNodeClick={(_, node) => setSelectedNodeId(node.id)}\n            onEdgeClick={(_, edge) => setSelectedEdgeId(edge.id)}\n            fitView\n          >\n            <MiniMap />\n            <Controls />\n            <Background />\n          </ReactFlow>\n        </div>\n      </div>\n\n      {/* Right side - Chatbot panel */}\n      <div style={{ width: 400, borderLeft: \"1px solid #ccc\", display: \"flex\", flexDirection: \"column\", background: \"#f3f4f6\" }}>\n        <div style={{ padding: \"12px\", background: \"#075e54\", color: \"white\", fontWeight: \"bold\" }}>\n          💬 MindPeace Assistant\n        </div>\n        <div style={{ flex: 1, overflowY: \"auto\", padding: 10 }}>\n          {chatHistory.map((msg, i) => (\n            <div key={i} style={{\n              alignSelf: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              backgroundColor: msg.sender === \"user\" ? \"#d9fdd3\" : \"#ffffff\",\n              color: \"#111\",\n              borderRadius: \"16px\",\n              padding: \"10px 14px\",\n              marginBottom: 8,\n              maxWidth: \"80%\",\n              boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\n              wordBreak: \"break-word\"\n            }}>\n              {msg.message}\n            </div>\n          ))}\n        </div>\n        <div style={{ padding: 10, borderTop: \"1px solid #ccc\" }}>\n          {renderChatInput()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACxD,OAAOC,SAAS,IACdC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,OAAO,EACPC,UAAU,QACL,WAAW;AAClB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE;IACJC,OAAO,EACL,oHAAoH;IACtHC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE,CAAC,CAAC;IACXC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE;EACR,CAAC;EACDC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC;EAC1BN,IAAI,EAAE;AACR,CAAC,CACF;AAED,MAAMO,YAAY,GAAG,EAAE;AACvB,IAAIC,WAAW,GAAG,CAAC;AAEnB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGvB,aAAa,CAACM,YAAY,CAAC;EACpE,MAAM,CAACkB,WAAW,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGzB,aAAa,CAACgB,YAAY,CAAC;EAC1E,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACoC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACsC,YAAY,EAAEC,eAAe,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACwC,aAAa,EAAEC,gBAAgB,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC0C,aAAa,EAAEC,gBAAgB,CAAC,GAAG3C,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC4C,WAAW,EAAEC,cAAc,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC8C,UAAU,EAAEC,aAAa,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACgD,UAAU,EAAEC,aAAa,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM,CAACkD,WAAW,EAAEC,cAAc,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMoD,OAAO,GAAGlD,MAAM,CAAC,CAAC;IAAE0B,KAAK,EAAEf,YAAY;IAAEwC,KAAK,EAAE7B;EAAa,CAAC,CAAC,CAAC;EACtE,MAAM8B,YAAY,GAAGpD,MAAM,CAAC,CAAC,CAAC;EAE9B,MAAMqD,YAAY,GAAG3B,KAAK,CAAC4B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC3C,EAAE,KAAKoB,cAAc,CAAC;EAC/D,MAAMwB,YAAY,GAAG3B,WAAW,CAACyB,IAAI,CAAEG,CAAC,IAAKA,CAAC,CAAC7C,EAAE,KAAKsB,cAAc,CAAC;EAErE,MAAMwB,aAAa,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC5C,MAAMC,YAAY,GAAG;MAAEnC,KAAK,EAAEiC,QAAQ;MAAER,KAAK,EAAES;IAAS,CAAC;IACzD,MAAME,UAAU,GAAGZ,OAAO,CAACa,OAAO,CAACC,KAAK,CAAC,CAAC,EAAEZ,YAAY,CAACW,OAAO,GAAG,CAAC,CAAC;IACrED,UAAU,CAACG,IAAI,CAACJ,YAAY,CAAC;IAC7BX,OAAO,CAACa,OAAO,GAAGD,UAAU;IAC5BV,YAAY,CAACW,OAAO,EAAE;EACxB,CAAC;EAED,MAAMG,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAId,YAAY,CAACW,OAAO,GAAG,CAAC,EAAE;MAC5BX,YAAY,CAACW,OAAO,EAAE;MACtB,MAAM;QAAErC,KAAK;QAAEyB;MAAM,CAAC,GAAGD,OAAO,CAACa,OAAO,CAACX,YAAY,CAACW,OAAO,CAAC;MAC9DpC,QAAQ,CAACD,KAAK,CAAC;MACfI,QAAQ,CAACqB,KAAK,CAAC;IACjB;EACF,CAAC;EAED,MAAMgB,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIf,YAAY,CAACW,OAAO,GAAGb,OAAO,CAACa,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;MACrDhB,YAAY,CAACW,OAAO,EAAE;MACtB,MAAM;QAAErC,KAAK;QAAEyB;MAAM,CAAC,GAAGD,OAAO,CAACa,OAAO,CAACX,YAAY,CAACW,OAAO,CAAC;MAC9DpC,QAAQ,CAACD,KAAK,CAAC;MACfI,QAAQ,CAACqB,KAAK,CAAC;IACjB;EACF,CAAC;EAED,MAAMkB,YAAY,GAAItD,IAAI,IAAK;IAC7B,MAAMuD,SAAS,GAAG;MAChBC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,kBAAkB;MAC7BC,UAAU,EAAE,UAAU;MACtBC,QAAQ,EAAE,YAAY;MACtBC,UAAU,EAAE,sBAAsB;MAClCC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE;IACZ,CAAC;IACD,QAAQ/D,IAAI;MACV,KAAK,QAAQ;QACX,OAAO;UAAE,GAAGuD,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,OAAO;QACV,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,cAAc;QACjB,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,KAAK;QACR,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,KAAK;QACR,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E;QACE,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;IAC/E;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAGlF,OAAO,CAAC,MAAM;IACvC,MAAMmF,mBAAmB,GAAG,IAAIC,GAAG,CAACtD,WAAW,CAACuD,GAAG,CAAE3B,CAAC,IAAK,GAAGA,CAAC,CAAC4B,MAAM,KAAK5B,CAAC,CAAC6B,MAAM,EAAE,CAAC,CAAC;IACvF,MAAMC,SAAS,GAAG,EAAE;IACpB,KAAK,MAAMC,IAAI,IAAI9D,KAAK,EAAE;MAAA,IAAA+D,UAAA;MACxB,MAAMH,MAAM,IAAAG,UAAA,GAAGD,IAAI,CAAC3E,IAAI,cAAA4E,UAAA,uBAATA,UAAA,CAAWvE,IAAI;MAC9B,IAAIoE,MAAM,IAAI,CAACJ,mBAAmB,CAACQ,GAAG,CAAC,GAAGF,IAAI,CAAC5E,EAAE,KAAK0E,MAAM,EAAE,CAAC,EAAE;QAC/DC,SAAS,CAACtB,IAAI,CAAC;UACbrD,EAAE,EAAE,QAAQ4E,IAAI,CAAC5E,EAAE,IAAI0E,MAAM,EAAE;UAC/BD,MAAM,EAAEG,IAAI,CAAC5E,EAAE;UACf0E,MAAM;UACNK,QAAQ,EAAE,KAAK;UACf5E,IAAI,EAAE,SAAS;UACf6E,KAAK,EAAE;YAAEC,eAAe,EAAE,KAAK;YAAEC,MAAM,EAAE;UAAO,CAAC;UACjDC,SAAS,EAAE;YAAEhF,IAAI,EAAEP,UAAU,CAACwF;UAAY,CAAC;UAC3CC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;IACF;IACA,OAAOV,SAAS;EAClB,CAAC,EAAE,CAAC7D,KAAK,EAAEG,WAAW,CAAC,CAAC;EAExB,MAAMqE,QAAQ,GAAG,CAAC,GAAGrE,WAAW,EAAE,GAAGoD,kBAAkB,CAAC;EAExD,MAAMkB,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,MAAM,GAAG;MACbC,QAAQ,EAAE;QACRC,aAAa,EACX,4JAA4J;QAC9JC,SAAS,EAAE;MACb,CAAC;MACD7E,KAAK,EAAE,CAAC;IACV,CAAC;IACDA,KAAK,CAAC8E,OAAO,CAAEhB,IAAI,IAAK;MACtB,MAAM;QAAE5E,EAAE;QAAEC;MAAK,CAAC,GAAG2E,IAAI;MACzB,MAAM;QAAE1E,OAAO;QAAEC,IAAI;QAAEC,OAAO;QAAEC,OAAO;QAAEC;MAAK,CAAC,GAAGL,IAAI;MACtD,MAAM4F,OAAO,GAAG;QAAE3F,OAAO;QAAEC;MAAK,CAAC;MACjC,IAAIC,OAAO,IAAI0F,MAAM,CAACC,IAAI,CAAC3F,OAAO,CAAC,CAACoD,MAAM,GAAG,CAAC,EAAEqC,OAAO,CAACzF,OAAO,GAAGA,OAAO;MACzE,IAAIC,OAAO,EAAEwF,OAAO,CAACxF,OAAO,GAAGA,OAAO;MACtC,IAAIC,IAAI,EAAEuF,OAAO,CAACvF,IAAI,GAAGA,IAAI;MAC7BkF,MAAM,CAAC1E,KAAK,CAACd,EAAE,CAAC,GAAG6F,OAAO;IAC5B,CAAC,CAAC;IACF,OAAOL,MAAM;EACf,CAAC;EAED,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,OAAO,GAAGV,aAAa,CAAC,CAAC;IAC/B,IAAI;MACF,MAAMW,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QACtDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAC9B,CAAC,CAAC;MACF,IAAIC,GAAG,CAACO,EAAE,EAAE;QAAA,IAAAC,eAAA;QACV,MAAMC,QAAQ,GAAG,EAAAD,eAAA,GAAAT,OAAO,CAACnF,KAAK,CAAC,GAAG,CAAC,cAAA4F,eAAA,uBAAlBA,eAAA,CAAoBxG,OAAO,KAAI,cAAc;QAC9DyB,gBAAgB,CAACsE,OAAO,CAAC;QACzBxE,eAAe,CAAC,IAAI,CAAC;QACrBM,cAAc,CAAC,CAAC;UAAE6E,MAAM,EAAE,KAAK;UAAE1G,OAAO,EAAEyG;QAAS,CAAC,CAAC,CAAC;QACtD1E,aAAa,CAAC,CAAC,CAAC,CAAC;QACjBE,aAAa,CAAC,EAAE,CAAC;QACjBN,gBAAgB,CAAC,GAAG,CAAC;QACrBQ,cAAc,CAAC,KAAK,CAAC;QACrBwE,KAAK,CAAC,8BAA8B,CAAC;MACvC,CAAC,MAAMA,KAAK,CAAC,oBAAoB,CAAC;IACpC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZD,KAAK,CAAC,gBAAgB,CAAC;IACzB;EACF,CAAC;EAED,MAAME,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;IAC7C,IAAI,CAACtF,aAAa,IAAK,CAACE,aAAa,IAAI,CAACQ,WAAY,EAAE;IAExD,MAAM6E,cAAc,GAAG,CAAC,GAAGnF,WAAW,EAAE;MAAE8E,MAAM,EAAE,MAAM;MAAE1G,OAAO,EAAE8G;IAAS,CAAC,CAAC;IAE9E,IAAI,CAAC5E,WAAW,EAAE;MAAA,IAAA8E,oBAAA,EAAAC,oBAAA;MAChB,MAAMC,WAAW,GAAG1F,aAAa,CAACZ,KAAK,CAACc,aAAa,CAAC;MACtD,MAAMyF,SAAS,GAAG;QAAE,GAAGrF;MAAW,CAAC;MACnC,IAAIoF,WAAW,CAAC/G,OAAO,EAAEgH,SAAS,CAACD,WAAW,CAAC/G,OAAO,CAAC,GAAG2G,QAAQ;MAClE,IAAIM,MAAM,GAAGF,WAAW,CAAC9G,IAAI,MAAA4G,oBAAA,GAAIE,WAAW,CAAChH,OAAO,cAAA8G,oBAAA,uBAAnBA,oBAAA,CAAsBF,QAAQ,CAAC;MAChE,MAAMO,QAAQ,IAAAJ,oBAAA,GAAGzF,aAAa,CAACZ,KAAK,cAAAqG,oBAAA,uBAAnBA,oBAAA,CAAsBG,MAAM,CAAC;MAE9C,IAAI,CAACC,QAAQ,EAAE;QACbxF,cAAc,CAAC,CAAC,GAAGkF,cAAc,EAAE;UAAEL,MAAM,EAAE,KAAK;UAAE1G,OAAO,EAAE;QAAyB,CAAC,CAAC,CAAC;QACzF2B,gBAAgB,CAAC,IAAI,CAAC;QACtB;MACF;MAEA,IAAI0F,QAAQ,CAACpH,IAAI,KAAK,KAAK,EAAE;QAC3B,MAAMqH,WAAW,GAAG1B,MAAM,CAAC2B,OAAO,CAACJ,SAAS,CAAC,CAAC7C,GAAG,CAAC,CAAC,CAACkD,CAAC,EAAEC,CAAC,CAAC,KAAK,GAAGD,CAAC,KAAKC,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;QACtF,IAAI;UACF,MAAM1B,GAAG,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;YACpDC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACnBtG,OAAO,EAAE8G,QAAQ;cACjBa,OAAO,EAAEL,WAAW;cACpB9B,aAAa,EAAEhE,aAAa,CAAC+D,QAAQ,CAACC,aAAa;cACnDC,SAAS,EAAEjE,aAAa,CAAC+D,QAAQ,CAACE;YACpC,CAAC;UACH,CAAC,CAAC;UACF,MAAM1F,IAAI,GAAG,MAAMiG,GAAG,CAAC4B,IAAI,CAAC,CAAC;UAC7B,MAAMC,QAAQ,GAAG9H,IAAI,CAAC+H,KAAK,IAAI,uBAAuB;UACtDjG,cAAc,CAAC,CACb,GAAGkF,cAAc,EACjB;YAAEL,MAAM,EAAE,KAAK;YAAE1G,OAAO,EAAEqH,QAAQ,CAACrH;UAAQ,CAAC,EAC5C;YAAE0G,MAAM,EAAE,KAAK;YAAE1G,OAAO,EAAE6H;UAAS,CAAC,CACrC,CAAC;UACF9F,aAAa,CAACoF,SAAS,CAAC;UACxBxF,gBAAgB,CAAC,IAAI,CAAC;UACtBQ,cAAc,CAAC,IAAI,CAAC;QACtB,CAAC,CAAC,OAAOyE,GAAG,EAAE;UACZ/E,cAAc,CAAC,CACb,GAAGkF,cAAc,EACjB;YAAEL,MAAM,EAAE,KAAK;YAAE1G,OAAO,EAAEqH,QAAQ,CAACrH;UAAQ,CAAC,EAC5C;YAAE0G,MAAM,EAAE,KAAK;YAAE1G,OAAO,EAAE;UAAwB,CAAC,CACpD,CAAC;UACF2B,gBAAgB,CAAC,IAAI,CAAC;QACxB;MACF,CAAC,MAAM;QACLI,aAAa,CAACoF,SAAS,CAAC;QACxBtF,cAAc,CAAC,CAAC,GAAGkF,cAAc,EAAE;UAAEL,MAAM,EAAE,KAAK;UAAE1G,OAAO,EAAEqH,QAAQ,CAACrH;QAAQ,CAAC,CAAC,CAAC;QACjF2B,gBAAgB,CAACyF,MAAM,CAAC;MAC1B;IACF,CAAC,MAAM;MACL,IAAI;QACF,MAAME,WAAW,GAAG1B,MAAM,CAAC2B,OAAO,CAACzF,UAAU,CAAC,CAACwC,GAAG,CAAC,CAAC,CAACkD,CAAC,EAAEC,CAAC,CAAC,KAAK,GAAGD,CAAC,KAAKC,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;QACvF,MAAM1B,GAAG,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACpDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBtG,OAAO,EAAE8G,QAAQ;YACjBa,OAAO,EAAEL,WAAW;YACpB9B,aAAa,EAAEhE,aAAa,CAAC+D,QAAQ,CAACC,aAAa;YACnDC,SAAS,EAAEjE,aAAa,CAAC+D,QAAQ,CAACE;UACpC,CAAC;QACH,CAAC,CAAC;QACF,MAAM1F,IAAI,GAAG,MAAMiG,GAAG,CAAC4B,IAAI,CAAC,CAAC;QAC7B,MAAMC,QAAQ,GAAG9H,IAAI,CAAC+H,KAAK,IAAI,uBAAuB;QACtDjG,cAAc,CAAC,CAAC,GAAGkF,cAAc,EAAE;UAAEL,MAAM,EAAE,KAAK;UAAE1G,OAAO,EAAE6H;QAAS,CAAC,CAAC,CAAC;MAC3E,CAAC,CAAC,OAAOjB,GAAG,EAAE;QACZ/E,cAAc,CAAC,CAAC,GAAGkF,cAAc,EAAE;UAAEL,MAAM,EAAE,KAAK;UAAE1G,OAAO,EAAE;QAAwB,CAAC,CAAC,CAAC;MAC1F;IACF;IAEAiC,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;EAED,MAAM8F,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACzG,YAAY,EAAE,OAAO,IAAI;IAE9B,IAAII,aAAa,EAAE;MACjB,MAAMgD,IAAI,GAAGlD,aAAa,CAACZ,KAAK,CAACc,aAAa,CAAC;MAC/C,IAAIgD,IAAI,CAACzE,IAAI,KAAK,QAAQ,IAAIyE,IAAI,CAACzE,IAAI,KAAK,cAAc,EAAE;QAC1D,OAAO2F,MAAM,CAACC,IAAI,CAACnB,IAAI,CAACxE,OAAO,IAAI,CAAC,CAAC,CAAC,CAACoE,GAAG,CAAE0D,GAAG,iBAC7CpI,OAAA;UAAkBqI,OAAO,EAAEA,CAAA,KAAMpB,kBAAkB,CAACmB,GAAG,CAAE;UAAClD,KAAK,EAAE;YAAEpB,OAAO,EAAE,KAAK;YAAEwE,MAAM,EAAE,KAAK;YAAEC,KAAK,EAAE,MAAM;YAAE1E,YAAY,EAAE,CAAC;YAAES,MAAM,EAAE,gBAAgB;YAAED,UAAU,EAAE;UAAU,CAAE;UAAAmE,QAAA,EACjLJ;QAAG,GADOA,GAAG;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAER,CACT,CAAC;MACJ;MAEA,IAAI9D,IAAI,CAACzE,IAAI,KAAK,OAAO,EAAE;QACzB,oBACEL,OAAA;UAAAwI,QAAA,gBACExI,OAAA;YAAO6I,KAAK,EAAEzG,UAAW;YAAC0G,QAAQ,EAAG/F,CAAC,IAAKV,aAAa,CAACU,CAAC,CAAC6B,MAAM,CAACiE,KAAK,CAAE;YAACE,SAAS,EAAGhG,CAAC,IAAKA,CAAC,CAACiG,GAAG,KAAK,OAAO,IAAI/B,kBAAkB,CAAC7E,UAAU,CAAE;YAAC8C,KAAK,EAAE;cAAEqD,KAAK,EAAE,MAAM;cAAEzE,OAAO,EAAE,CAAC;cAAEmF,YAAY,EAAE,CAAC;cAAEpF,YAAY,EAAE,CAAC;cAAES,MAAM,EAAE;YAAiB;UAAE;YAAAmE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACrP5I,OAAA;YAAQqI,OAAO,EAAEA,CAAA,KAAMpB,kBAAkB,CAAC7E,UAAU,CAAE;YAAC8C,KAAK,EAAE;cAAEqD,KAAK,EAAE,MAAM;cAAElE,UAAU,EAAE,SAAS;cAAE6E,KAAK,EAAE,OAAO;cAAErF,YAAY,EAAE,CAAC;cAAEC,OAAO,EAAE,UAAU;cAAEQ,MAAM,EAAE;YAAO,CAAE;YAAAkE,QAAA,EAAC;UAE9K;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAEV;MAEA,OAAO,IAAI;IACb,CAAC,MAAM,IAAItG,WAAW,EAAE;MACtB,oBACEtC,OAAA;QAAAwI,QAAA,gBACExI,OAAA;UAAO6I,KAAK,EAAEzG,UAAW;UAAC0G,QAAQ,EAAG/F,CAAC,IAAKV,aAAa,CAACU,CAAC,CAAC6B,MAAM,CAACiE,KAAK,CAAE;UAACE,SAAS,EAAGhG,CAAC,IAAKA,CAAC,CAACiG,GAAG,KAAK,OAAO,IAAI/B,kBAAkB,CAAC7E,UAAU,CAAE;UAAC8C,KAAK,EAAE;YAAEqD,KAAK,EAAE,MAAM;YAAEzE,OAAO,EAAE,CAAC;YAAEmF,YAAY,EAAE,CAAC;YAAEpF,YAAY,EAAE,CAAC;YAAES,MAAM,EAAE;UAAiB;QAAE;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrP5I,OAAA;UAAQqI,OAAO,EAAEA,CAAA,KAAMpB,kBAAkB,CAAC7E,UAAU,CAAE;UAAC8C,KAAK,EAAE;YAAEqD,KAAK,EAAE,MAAM;YAAElE,UAAU,EAAE,SAAS;YAAE6E,KAAK,EAAE,OAAO;YAAErF,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE;UAAO,CAAE;UAAAkE,QAAA,EAAC;QAE9K;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAEV;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;;EAEA,oBACE5I,OAAA;IAAKkF,KAAK,EAAE;MAAEiE,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,OAAO;MAAElF,UAAU,EAAE;IAAuB,CAAE;IAAAsE,QAAA,gBAEnFxI,OAAA;MAAKkF,KAAK,EAAE;QAAEmE,IAAI,EAAE,CAAC;QAAE5I,QAAQ,EAAE;MAAW,CAAE;MAAA+H,QAAA,gBAC5CxI,OAAA;QAAIkF,KAAK,EAAE;UAAEpB,OAAO,EAAE,WAAW;UAAEO,UAAU,EAAE,SAAS;UAAEiF,YAAY,EAAE,gBAAgB;UAAEhB,MAAM,EAAE;QAAE,CAAE;QAAAE,QAAA,EAAC;MAEvG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAGL5I,OAAA;QAAKkF,KAAK,EAAE;UAAEzE,QAAQ,EAAE,UAAU;UAAE8I,GAAG,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE,EAAE;UAAEN,OAAO,EAAE,MAAM;UAAEO,GAAG,EAAE;QAAE,CAAE;QAAAlB,QAAA,gBAC3FxI,OAAA;UAAQkF,KAAK,EAAE;YAAEyE,eAAe,EAAE,SAAS;YAAET,KAAK,EAAE,OAAO;YAAErF,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE,MAAM;YAAEsF,UAAU,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAU,CAAE;UAACxB,OAAO,EAAEA,CAAA,KAAMtB,KAAK,CAAC,mCAAmC,CAAE;UAAAyB,QAAA,EAAC;QAEvN;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5I,OAAA;UAAQkF,KAAK,EAAE;YAAEyE,eAAe,EAAE,SAAS;YAAET,KAAK,EAAE,OAAO;YAAErF,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE,MAAM;YAAEsF,UAAU,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAU,CAAE;UAACxB,OAAO,EAAEA,CAAA,KAAMyB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEtE,aAAa,CAAC,CAAC,CAAE;UAAA+C,QAAA,EAAC;QAEzN;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5I,OAAA;UAAQkF,KAAK,EAAE;YAAEyE,eAAe,EAAE,SAAS;YAAET,KAAK,EAAE,OAAO;YAAErF,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE,MAAM;YAAEsF,UAAU,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAU,CAAE;UAACxB,OAAO,EAAEA,CAAA,KAAMtB,KAAK,CAAC,sCAAsC,CAAE;UAAAyB,QAAA,EAAC;QAE1N;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5I,OAAA;UAAQkF,KAAK,EAAE;YAAEyE,eAAe,EAAE,SAAS;YAAET,KAAK,EAAE,OAAO;YAAErF,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE,MAAM;YAAEsF,UAAU,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAU,CAAE;UAACxB,OAAO,EAAEnC,UAAW;UAAAsC,QAAA,EAAC;QAEjL;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5I,OAAA;UAAQkF,KAAK,EAAE;YAAEyE,eAAe,EAAE,SAAS;YAAET,KAAK,EAAE,OAAO;YAAErF,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE,MAAM;YAAEsF,UAAU,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAU,CAAE;UAACxB,OAAO,EAAE7E,IAAK;UAAAgF,QAAA,EAAC;QAE3K;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5I,OAAA;UAAQkF,KAAK,EAAE;YAAEyE,eAAe,EAAE,SAAS;YAAET,KAAK,EAAE,OAAO;YAAErF,YAAY,EAAE,CAAC;YAAEC,OAAO,EAAE,UAAU;YAAEQ,MAAM,EAAE,MAAM;YAAEsF,UAAU,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAU,CAAE;UAACxB,OAAO,EAAE5E,IAAK;UAAA+E,QAAA,EAAC;QAE3K;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAGLjG,YAAY,iBACX3C,OAAA;QAAKkF,KAAK,EAAE;UAAEzE,QAAQ,EAAE,UAAU;UAAE8I,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE,EAAE;UAAEpF,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE,gBAAgB;UAAER,OAAO,EAAE,EAAE;UAAED,YAAY,EAAE,CAAC;UAAE0E,KAAK,EAAE;QAAI,CAAE;QAAAC,QAAA,gBAC9JxI,OAAA;UAAAwI,QAAA,EAAI;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpB5I,OAAA;UAAAwI,QAAA,gBACExI,OAAA;YAAAwI,QAAA,EAAO;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtB5I,OAAA;YAAU6I,KAAK,EAAElG,YAAY,CAACxC,IAAI,CAACC,OAAQ;YAAC0I,QAAQ,EAAG/F,CAAC,IAAK;cAC3D,MAAME,QAAQ,GAAGjC,KAAK,CAAC0D,GAAG,CAAE7B,CAAC,IAC3BA,CAAC,CAAC3C,EAAE,KAAKyC,YAAY,CAACzC,EAAE,GAAG;gBAAE,GAAG2C,CAAC;gBAAE1C,IAAI,EAAE;kBAAE,GAAG0C,CAAC,CAAC1C,IAAI;kBAAEC,OAAO,EAAE2C,CAAC,CAAC6B,MAAM,CAACiE;gBAAM;cAAE,CAAC,GAAGhG,CACtF,CAAC;cACD5B,QAAQ,CAACgC,QAAQ,CAAC;YACpB,CAAE;YAAC+G,IAAI,EAAE,CAAE;YAAC9E,KAAK,EAAE;cAAEqD,KAAK,EAAE,MAAM;cAAEU,YAAY,EAAE;YAAE;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACzD5I,OAAA;YAAAwI,QAAA,EAAO;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACnB5I,OAAA;YAAQ6I,KAAK,EAAElG,YAAY,CAACxC,IAAI,CAACE,IAAK;YAACyI,QAAQ,EAAG/F,CAAC,IAAK;cACtD,MAAME,QAAQ,GAAGjC,KAAK,CAAC0D,GAAG,CAAE7B,CAAC,IAC3BA,CAAC,CAAC3C,EAAE,KAAKyC,YAAY,CAACzC,EAAE,GAAG;gBAAE,GAAG2C,CAAC;gBAAE1C,IAAI,EAAE;kBAAE,GAAG0C,CAAC,CAAC1C,IAAI;kBAAEE,IAAI,EAAE0C,CAAC,CAAC6B,MAAM,CAACiE;gBAAM;cAAE,CAAC,GAAGhG,CACnF,CAAC;cACD5B,QAAQ,CAACgC,QAAQ,CAAC;YACpB,CAAE;YAACiC,KAAK,EAAE;cAAEqD,KAAK,EAAE,MAAM;cAAEU,YAAY,EAAE;YAAE,CAAE;YAAAT,QAAA,gBAC3CxI,OAAA;cAAQ6I,KAAK,EAAC,QAAQ;cAAAL,QAAA,EAAC;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtC5I,OAAA;cAAQ6I,KAAK,EAAC,OAAO;cAAAL,QAAA,EAAC;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACpC5I,OAAA;cAAQ6I,KAAK,EAAC,cAAc;cAAAL,QAAA,EAAC;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAClD5I,OAAA;cAAQ6I,KAAK,EAAC,KAAK;cAAAL,QAAA,EAAC;YAAG;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAChC5I,OAAA;cAAQ6I,KAAK,EAAC,KAAK;cAAAL,QAAA,EAAC;YAAG;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACT5I,OAAA;YAAAwI,QAAA,EAAO;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC3B5I,OAAA;YAAO6I,KAAK,EAAElG,YAAY,CAACxC,IAAI,CAACK,IAAI,IAAI,EAAG;YAACsI,QAAQ,EAAG/F,CAAC,IAAK;cAC3D,MAAME,QAAQ,GAAGjC,KAAK,CAAC0D,GAAG,CAAE7B,CAAC,IAC3BA,CAAC,CAAC3C,EAAE,KAAKyC,YAAY,CAACzC,EAAE,GAAG;gBAAE,GAAG2C,CAAC;gBAAE1C,IAAI,EAAE;kBAAE,GAAG0C,CAAC,CAAC1C,IAAI;kBAAEK,IAAI,EAAEuC,CAAC,CAAC6B,MAAM,CAACiE;gBAAM;cAAE,CAAC,GAAGhG,CACnF,CAAC;cACD5B,QAAQ,CAACgC,QAAQ,CAAC;YACpB,CAAE;YAACiC,KAAK,EAAE;cAAEqD,KAAK,EAAE,MAAM;cAAEU,YAAY,EAAE;YAAE;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAChD5I,OAAA;YAAAwI,QAAA,EAAO;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5B5I,OAAA;YAAO6I,KAAK,EAAElG,YAAY,CAACxC,IAAI,CAACI,OAAO,IAAI,EAAG;YAACuI,QAAQ,EAAG/F,CAAC,IAAK;cAC9D,MAAME,QAAQ,GAAGjC,KAAK,CAAC0D,GAAG,CAAE7B,CAAC,IAC3BA,CAAC,CAAC3C,EAAE,KAAKyC,YAAY,CAACzC,EAAE,GAAG;gBAAE,GAAG2C,CAAC;gBAAE1C,IAAI,EAAE;kBAAE,GAAG0C,CAAC,CAAC1C,IAAI;kBAAEI,OAAO,EAAEwC,CAAC,CAAC6B,MAAM,CAACiE;gBAAM;cAAE,CAAC,GAAGhG,CACtF,CAAC;cACD5B,QAAQ,CAACgC,QAAQ,CAAC;YACpB,CAAE;YAACiC,KAAK,EAAE;cAAEqD,KAAK,EAAE,MAAM;cAAEU,YAAY,EAAE;YAAE;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,eAGD5I,OAAA;QAAKkF,KAAK,EAAE;UAAEkE,MAAM,EAAE,MAAM;UAAEb,KAAK,EAAE;QAAO,CAAE;QAAAC,QAAA,eAC5CxI,OAAA,CAACT,SAAS;UACRyB,KAAK,EAAEA,KAAK,CAAC0D,GAAG,CAAEI,IAAI,KAAM;YAC1B,GAAGA,IAAI;YACP3E,IAAI,EAAE;cACJ,GAAG2E,IAAI,CAAC3E,IAAI;cACZoF,KAAK,EAAET,IAAI,CAAC3E,IAAI,CAACC;YACnB,CAAC;YACD8E,KAAK,EAAEvB,YAAY,CAACmB,IAAI,CAAC3E,IAAI,CAACE,IAAI;UACpC,CAAC,CAAC,CAAE;UACJoC,KAAK,EAAE+C,QAAS;UAChBtE,aAAa,EAAEA,aAAc;UAC7BG,aAAa,EAAEA,aAAc;UAC7B4I,WAAW,EAAEA,CAACC,CAAC,EAAEpF,IAAI,KAAKvD,iBAAiB,CAACuD,IAAI,CAAC5E,EAAE,CAAE;UACrDiK,WAAW,EAAEA,CAACD,CAAC,EAAEE,IAAI,KAAK3I,iBAAiB,CAAC2I,IAAI,CAAClK,EAAE,CAAE;UACrDmK,OAAO;UAAA7B,QAAA,gBAEPxI,OAAA,CAACR,OAAO;YAAAiJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACX5I,OAAA,CAACP,QAAQ;YAAAgJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACZ5I,OAAA,CAACN,UAAU;YAAA+I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGN5I,OAAA;MAAKkF,KAAK,EAAE;QAAEqD,KAAK,EAAE,GAAG;QAAE+B,UAAU,EAAE,gBAAgB;QAAEnB,OAAO,EAAE,MAAM;QAAEoB,aAAa,EAAE,QAAQ;QAAElG,UAAU,EAAE;MAAU,CAAE;MAAAmE,QAAA,gBACxHxI,OAAA;QAAKkF,KAAK,EAAE;UAAEpB,OAAO,EAAE,MAAM;UAAEO,UAAU,EAAE,SAAS;UAAE6E,KAAK,EAAE,OAAO;UAAEU,UAAU,EAAE;QAAO,CAAE;QAAApB,QAAA,EAAC;MAE5F;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN5I,OAAA;QAAKkF,KAAK,EAAE;UAAEmE,IAAI,EAAE,CAAC;UAAEmB,SAAS,EAAE,MAAM;UAAE1G,OAAO,EAAE;QAAG,CAAE;QAAA0E,QAAA,EACrDxG,WAAW,CAAC0C,GAAG,CAAC,CAAC+F,GAAG,EAAEC,CAAC,kBACtB1K,OAAA;UAAakF,KAAK,EAAE;YAClByF,SAAS,EAAEF,GAAG,CAAC3D,MAAM,KAAK,MAAM,GAAG,UAAU,GAAG,YAAY;YAC5D6C,eAAe,EAAEc,GAAG,CAAC3D,MAAM,KAAK,MAAM,GAAG,SAAS,GAAG,SAAS;YAC9DoC,KAAK,EAAE,MAAM;YACbrF,YAAY,EAAE,MAAM;YACpBC,OAAO,EAAE,WAAW;YACpBmF,YAAY,EAAE,CAAC;YACf7E,QAAQ,EAAE,KAAK;YACfL,SAAS,EAAE,2BAA2B;YACtC6G,SAAS,EAAE;UACb,CAAE;UAAApC,QAAA,EACCiC,GAAG,CAACrK;QAAO,GAXJsK,CAAC;UAAAjC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYN,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN5I,OAAA;QAAKkF,KAAK,EAAE;UAAEpB,OAAO,EAAE,EAAE;UAAE+G,SAAS,EAAE;QAAiB,CAAE;QAAArC,QAAA,EACtDL,eAAe,CAAC;MAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC7H,EAAA,CAlYuBD,GAAG;EAAA,QACgBnB,aAAa,EACPC,aAAa;AAAA;AAAAkL,EAAA,GAFtChK,GAAG;AAAA,IAAAgK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}