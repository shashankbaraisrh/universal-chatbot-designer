{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\n// Initial node\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMessage = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Hello! Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMessage\n        }]);\n        setUserInputs({});\n        setCurrentNodeId(\"1\");\n        setInputValue(\"\");\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: \"Server error during GPT response.\"\n        }]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId) return null;\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\" || node.type === \"multi_choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        style: {\n          padding: \"8px\",\n          margin: \"4px\",\n          width: \"100%\",\n          borderRadius: 6,\n          border: \"1px solid #ccc\",\n          background: \"#e0f2fe\"\n        },\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this));\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Your existing layout and buttons (React Flow + Sidebar) stay unchanged here...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10\n        },\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          overflowY: \"auto\",\n          marginBottom: 10\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), chatbotReady && renderChatInput()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kpvbw4ZUr6bpSw0VuRRea918wec=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","length","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMessage","sender","alert","error","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","currentNode","updatedHistory","newInputs","nextId","nextNode","summaryText","entries","k","v","join","summary","json","gptReply","reply","err","renderChatInput","opt","onClick","margin","width","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","onKeyDown","key","marginBottom","color","height","display","borderLeft","flexDirection","justifyContent","fontWeight","flexGrow","overflowY","gap","entry","index","alignSelf","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\n// Initial node\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        const firstMessage = payload.nodes[\"1\"]?.message || \"Hello! Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMessage }]);\n        setUserInputs({});\n        setCurrentNodeId(\"1\");\n        setInputValue(\"\");\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: \"Server error during GPT response.\" }\n        ]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId) return null;\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\" || node.type === \"multi_choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button key={opt} onClick={() => handleUserResponse(opt)} style={{ padding: \"8px\", margin: \"4px\", width: \"100%\", borderRadius: 6, border: \"1px solid #ccc\", background: \"#e0f2fe\" }}>\n          {opt}\n        </button>\n      ));\n    }\n    if (node.type === \"input\") {\n      return (\n        <div>\n          <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)} style={{ width: \"100%\", padding: 8, marginBottom: 8, borderRadius: 6, border: \"1px solid #ccc\" }} />\n          <button onClick={() => handleUserResponse(inputValue)} style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}>\n            Submit\n          </button>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Your existing layout and buttons (React Flow + Sidebar) stay unchanged here...\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Your existing React Flow panel remains here */}\n      {/* Right Side: Chat */}\n      <div style={{ width: \"320px\", padding: 20, borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n        <div style={{ fontWeight: \"bold\", marginBottom: 10 }}>MindPeace Chat</div>\n        <div style={{ flexGrow: 1, overflowY: \"auto\", marginBottom: 10 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{ alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\", background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\", padding: 8, borderRadius: 6, maxWidth: \"90%\" }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n        {chatbotReady && renderChatInput()}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}