{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [conversationData, setConversationData] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [userInputs, setUserInputs] = useState({});\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setConversationData(payload);\n        setChatbotReady(true);\n        setCurrentNodeId(\"1\");\n        setChatHistory([{\n          sender: \"bot\",\n          message: payload.nodes[\"1\"].message\n        }]);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n    setChatHistory(prev => [...prev, {\n      sender: \"user\",\n      message: userMessage\n    }]);\n    const currentNode = conversationData.nodes[currentNodeId];\n    if (!currentNode) return;\n    if (currentNode.capture) {\n      setUserInputs({\n        ...userInputs,\n        [currentNode.capture]: userMessage\n      });\n    }\n    let nextId = null;\n    if (currentNode.options) {\n      nextId = currentNode.options[userMessage.toLowerCase()];\n    } else {\n      nextId = currentNode.next;\n    }\n    if (!nextId) {\n      const systemPrompt = conversationData.settings.system_prompt;\n      const gpt_model = conversationData.settings.gpt_model;\n      const summary = Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\", \");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            model: gpt_model,\n            system_prompt: systemPrompt,\n            user_context: summary,\n            user_message: userMessage\n          })\n        });\n        const data = await res.json();\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: data.response || \"No response from GPT.\"\n        }]);\n        setUserMessage(\"\");\n        return;\n      } catch (e) {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"GPT backend error.\"\n        }]);\n        return;\n      }\n    }\n    const nextNode = conversationData.nodes[nextId];\n    if (nextNode) {\n      setChatHistory(prev => [...prev, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n    setUserMessage(\"\");\n  };\n\n  // Now JSX and UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => addNode(),\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => exportJSON(),\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => deleteNode(),\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => submitFlow(),\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => undo(),\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => redo(),\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            marginBottom: 8\n          },\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => updateNodeField(\"message\", e.target.value),\n            style: {\n              width: \"100%\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => updateNodeField(\"type\", e.target.value),\n            style: {\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => updateNodeField(\"capture\", e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => updateNodeField(\"next\", e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          padding: 12,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\",\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedEdge.label,\n            onChange: e => updateEdgeLabel(e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10\n        },\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          overflowY: \"auto\",\n          marginBottom: 10\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && sendMessage(),\n          placeholder: \"Type your message...\",\n          style: {\n            width: \"100%\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            marginBottom: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SwXlJd9NIWCdLcdD2ptd8Y7Apxk=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","conversationData","setConversationData","currentNodeId","setCurrentNodeId","userInputs","setUserInputs","userMessage","setUserMessage","chatHistory","setChatHistory","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","sender","alert","error","sendMessage","trim","prev","currentNode","nextId","toLowerCase","systemPrompt","summary","entries","k","v","join","model","user_context","user_message","json","response","nextNode","width","height","display","children","flex","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","gap","color","onClick","addNode","exportJSON","deleteNode","right","marginBottom","value","onChange","updateNodeField","updateEdgeLabel","onNodeClick","_","onEdgeClick","edge","fitView","edgeLabelMode","borderLeft","flexDirection","justifyContent","flexGrow","overflowY","entry","index","alignSelf","marginTop","onKeyDown","key","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [conversationData, setConversationData] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [userInputs, setUserInputs] = useState({});\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setConversationData(payload);\n        setChatbotReady(true);\n        setCurrentNodeId(\"1\");\n        setChatHistory([{ sender: \"bot\", message: payload.nodes[\"1\"].message }]);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n    setChatHistory((prev) => [...prev, { sender: \"user\", message: userMessage }]);\n\n    const currentNode = conversationData.nodes[currentNodeId];\n    if (!currentNode) return;\n\n    if (currentNode.capture) {\n      setUserInputs({ ...userInputs, [currentNode.capture]: userMessage });\n    }\n\n    let nextId = null;\n    if (currentNode.options) {\n      nextId = currentNode.options[userMessage.toLowerCase()];\n    } else {\n      nextId = currentNode.next;\n    }\n\n    if (!nextId) {\n      const systemPrompt = conversationData.settings.system_prompt;\n      const gpt_model = conversationData.settings.gpt_model;\n      const summary = Object.entries(userInputs)\n        .map(([k, v]) => `${k}: ${v}`)\n        .join(\", \");\n\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            model: gpt_model,\n            system_prompt: systemPrompt,\n            user_context: summary,\n            user_message: userMessage\n          })\n        });\n        const data = await res.json();\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: data.response || \"No response from GPT.\" }]);\n        setUserMessage(\"\");\n        return;\n      } catch (e) {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"GPT backend error.\" }]);\n        return;\n      }\n    }\n\n    const nextNode = conversationData.nodes[nextId];\n    if (nextNode) {\n      setChatHistory((prev) => [...prev, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n    setUserMessage(\"\");\n  };\n\n  // Now JSX and UI\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Side: React Flow Builder */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        {/* Header */}\n        <div\n          style={{\n            textAlign: \"center\",\n            padding: \"12px\",\n            background: \"#f1f5f9\",\n            boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n            borderRadius: \"8px\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\",\n            fontFamily: \"Segoe UI, sans-serif\",\n            width: \"fit-content\",\n            margin: \"10px auto\",\n            zIndex: 20,\n            position: \"relative\"\n          }}\n        >\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => addNode()}>\n            Add Node\n          </button>\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => exportJSON()}>\n            Export JSON\n          </button>\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => deleteNode()}>\n            Delete Node\n          </button>\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => submitFlow()}>\n            Submit Flow\n          </button>\n        </div>\n\n        {/* Undo/Redo */}\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => undo()}>\n            Undo\n          </button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => redo()}>\n            Redo\n          </button>\n        </div>\n\n        {/* Node Editor */}\n        {selectedNode && (\n          <div\n            style={{\n              position: \"absolute\",\n              top: 110,\n              left: 10,\n              zIndex: 10,\n              background: \"#f8fafc\",\n              padding: 12,\n              border: \"1px solid #d1d5db\",\n              borderRadius: \"10px\",\n              width: 300,\n              boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n            }}\n          >\n            <h4 style={{ marginBottom: 8 }}>Editing Node: {selectedNode.id}</h4>\n            <div>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => updateNodeField(\"message\", e.target.value)}\n                style={{ width: \"100%\", height: 60 }}\n              />\n            </div>\n            <div>\n              <label>Type:</label>\n              <select\n                value={selectedNode.data.type}\n                onChange={(e) => updateNodeField(\"type\", e.target.value)}\n                style={{ width: \"100%\" }}\n              >\n                <option value=\"choice\">choice</option>\n                <option value=\"input\">input</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n            </div>\n            <div>\n              <label>Capture Field:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.capture}\n                onChange={(e) => updateNodeField(\"capture\", e.target.value)}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n            <div>\n              <label>Next Node ID:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.next}\n                onChange={(e) => updateNodeField(\"next\", e.target.value)}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Edge Editor */}\n        {selectedEdge && (\n          <div\n            style={{\n              position: \"absolute\",\n              top: 110,\n              left: 10,\n              zIndex: 10,\n              background: \"#f9fafb\",\n              padding: 12,\n              border: \"1px solid #ccc\",\n              borderRadius: \"8px\",\n              width: \"300px\",\n              boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n            }}\n          >\n            <h4>Editing Edge</h4>\n            <div>\n              <label>Option Label:</label>\n              <input\n                type=\"text\"\n                value={selectedEdge.label}\n                onChange={(e) => updateEdgeLabel(e.target.value)}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* React Flow Canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Side Chatbot Panel */}\n      <div style={{ width: \"320px\", padding: 20, borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n        <div style={{ fontWeight: \"bold\", marginBottom: 10 }}>MindPeace Chat</div>\n        <div style={{ flexGrow: 1, overflowY: \"auto\", marginBottom: 10 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{ alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\", background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\", padding: 8, borderRadius: 6, maxWidth: \"90%\" }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {/* Input */}\n        {chatbotReady && (\n          <div style={{ marginTop: 10 }}>\n            <input\n              value={userMessage}\n              onChange={(e) => setUserMessage(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n              placeholder=\"Type your message...\"\n              style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 10 }}\n            />\n            <button\n              onClick={sendMessage}\n              style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}\n            >\n              Send\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}