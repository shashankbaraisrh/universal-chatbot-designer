{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [chatInput, setChatInput] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend.\");\n    }\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const handleChatSend = async () => {\n    if (!chatInput.trim()) return;\n    const newMessages = [...chatMessages, {\n      role: \"user\",\n      content: chatInput\n    }];\n    setChatMessages(newMessages);\n    const payload = {\n      message: chatInput,\n      summary: \"User has completed flow and is now ready to chat.\",\n      system_prompt: getExportJSON().settings.system_prompt,\n      gpt_model: getExportJSON().settings.gpt_model\n    };\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const data = await res.json();\n      if (data.reply) {\n        setChatMessages(prev => [...prev, {\n          role: \"assistant\",\n          content: data.reply\n        }]);\n        setChatInput(\"\");\n      }\n    } catch (err) {\n      alert(\"Error reaching GPT backend\");\n    }\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNode,\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            padding: \"6px 12px\",\n            borderRadius: 6\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportJSON,\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: \"6px 12px\",\n            borderRadius: 6\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNode,\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            padding: \"6px 12px\",\n            borderRadius: 6\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitFlow,\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            padding: \"6px 12px\",\n            borderRadius: 6\n          },\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            padding: \"6px 12px\",\n            borderRadius: 6\n          },\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            padding: \"6px 12px\",\n            borderRadius: 6\n          },\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            marginBottom: 8\n          },\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => updateNodeField(\"message\", e.target.value),\n            style: {\n              width: \"100%\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => updateNodeField(\"type\", e.target.value),\n            style: {\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 161\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 199\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 235\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 285\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 317\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => updateNodeField(\"capture\", e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => updateNodeField(\"next\", e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          padding: 12,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\",\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedEdge.label,\n            onChange: e => updateEdgeLabel(e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"300px\",\n        padding: \"20px\",\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), chatMessages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.role === \"user\" ? \"You\" : \"MindPeace\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: chatInput,\n          onChange: e => setChatInput(e.target.value),\n          placeholder: \"Type your message...\",\n          style: {\n            width: \"100%\",\n            padding: \"8px\",\n            borderRadius: \"4px\",\n            border: \"1px solid #ccc\"\n          },\n          onKeyDown: e => e.key === \"Enter\" && handleChatSend()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          on: true,\n          onClick: handleChatSend,\n          style: {\n            width: \"100%\",\n            marginTop: \"8px\",\n            padding: \"8px\",\n            borderRadius: \"4px\",\n            border: \"none\",\n            background: \"#2563eb\",\n            color: \"white\",\n            cursor: \"pointer\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), !chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\",\n          color: \"#888\"\n        },\n        children: \"MindPeace is ready. You can now start chatting.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4q3vhGhmPstxege5z7kN0x6LXcw=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","chatMessages","setChatMessages","chatInput","setChatInput","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","submitFlow","payload","res","fetch","method","headers","ok","alert","error","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","handleChatSend","trim","newMessages","role","content","summary","json","reply","prev","err","onNodeClick","_","onEdgeClick","display","width","height","children","flex","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","gap","onClick","color","right","marginBottom","onChange","fitView","edgeLabelMode","borderLeft","flexDirection","justifyContent","msg","i","marginTop","placeholder","onKeyDown","key","on","cursor","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [chatInput, setChatInput] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    return output;\n  };\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend.\");\n    }\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const handleChatSend = async () => {\n    if (!chatInput.trim()) return;\n\n    const newMessages = [...chatMessages, { role: \"user\", content: chatInput }];\n    setChatMessages(newMessages);\n\n    const payload = {\n      message: chatInput,\n      summary: \"User has completed flow and is now ready to chat.\",\n      system_prompt: getExportJSON().settings.system_prompt,\n      gpt_model: getExportJSON().settings.gpt_model\n    };\n\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      const data = await res.json();\n      if (data.reply) {\n        setChatMessages((prev) => [...prev, { role: \"assistant\", content: data.reply }]);\n        setChatInput(\"\");\n      }\n    } catch (err) {\n      alert(\"Error reaching GPT backend\");\n    }\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ display: \"flex\", width: \"100vw\", height: \"100vh\" }}>\n      {/* LEFT SIDE - Flow Editor */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        {/* Header */}\n        <div\n          style={{\n            textAlign: \"center\",\n            padding: \"12px\",\n            background: \"#f1f5f9\",\n            boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n            borderRadius: \"8px\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\",\n            fontFamily: \"Segoe UI, sans-serif\",\n            width: \"fit-content\",\n            margin: \"10px auto\",\n            zIndex: 20,\n            position: \"relative\"\n          }}\n        >\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Top buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button onClick={addNode} style={{ background: \"#38bdf8\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Add Node</button>\n          <button onClick={exportJSON} style={{ background: \"#22c55e\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Export JSON</button>\n          <button onClick={deleteNode} style={{ background: \"#ef4444\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Delete Node</button>\n          <button onClick={submitFlow} style={{ background: \"#10b981\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Submit Flow</button>\n        </div>\n\n        {/* Undo/Redo */}\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button onClick={undo} style={{ background: \"#a855f7\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Undo</button>\n          <button onClick={redo} style={{ background: \"#f59e0b\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Redo</button>\n        </div>\n\n        {/* Node Editor */}\n        {selectedNode && (\n          <div style={{\n            position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f8fafc\", padding: 12,\n            border: \"1px solid #d1d5db\", borderRadius: \"10px\", width: 300, boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n          }}>\n            <h4 style={{ marginBottom: 8 }}>Editing Node: {selectedNode.id}</h4>\n            <div><label>Message:</label><textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} /></div>\n            <div><label>Type:</label><select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}><option value=\"choice\">choice</option><option value=\"input\">input</option><option value=\"multi_choice\">multi_choice</option><option value=\"gpt\">gpt</option><option value=\"end\">end</option></select></div>\n            <div><label>Capture Field:</label><input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} /></div>\n            <div><label>Next Node ID:</label><input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} /></div>\n          </div>\n        )}\n\n        {/* Edge Editor */}\n        {selectedEdge && (\n          <div style={{\n            position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f9fafb\", padding: 12,\n            border: \"1px solid #ccc\", borderRadius: \"8px\", width: \"300px\", boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n          }}>\n            <h4>Editing Edge</h4>\n            <div><label>Option Label:</label><input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} /></div>\n          </div>\n        )}\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* RIGHT SIDE - Chat */}\n      <div style={{ width: \"300px\", padding: \"20px\", borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n        <div>\n          <h3>MindPeace Chat</h3>\n          {chatMessages.map((msg, i) => (\n            <div key={i} style={{ marginBottom: 10 }}>\n              <strong>{msg.role === \"user\" ? \"You\" : \"MindPeace\"}:</strong>\n              <div>{msg.content}</div>\n            </div>\n          ))}\n        </div>\n        {chatbotReady && (\n          <div style={{ marginTop: \"10px\" }}>\n            <input\n              type=\"text\"\n              value={chatInput}\n              onChange={(e) => setChatInput(e.target.value)}\n              placeholder=\"Type your message...\"\n              style={{ width: \"100%\", padding: \"8px\", borderRadius: \"4px\", border: \"1px solid #ccc\" }}\n              onKeyDown={(e) => e.key === \"Enter\" && handleChatSend()}\n            />\n            <button on\n              onClick={handleChatSend}\n              style={{\n                width: \"100%\",\n                marginTop: \"8px\",\n                padding: \"8px\",\n                borderRadius: \"4px\",\n                border: \"none\",\n                background: \"#2563eb\",\n                color: \"white\",\n                cursor: \"pointer\"\n              }}\n            >\n              Send\n            </button>\n          </div>\n        )}\n        {!chatbotReady && (\n          <div style={{ marginTop: \"10px\", color: \"#888\" }}>\n            MindPeace is ready. You can now start chatting.\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}