{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport PromptSettings from \"./PromptSettings\";\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: promptSettings.system_prompt,\n            gpt_model: promptSettings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: promptSettings.system_prompt,\n            gpt_model: promptSettings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        style: {\n          padding: \"8px\",\n          margin: \"4px\",\n          width: \"100%\",\n          borderRadius: 6,\n          border: \"1px solid #0369a1\",\n          background: \"#0284c7\",\n          color: \"white\"\n        },\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this));\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const newId = nodeCounter.toString();\n            nodeCounter++;\n            const position = selectedNodeId ? {\n              x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n              y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n            } : {\n              x: Math.random() * 400,\n              y: Math.random() * 400\n            };\n            const newNode = {\n              id: newId,\n              data: {\n                message: `This is node ${newId}`,\n                type: \"choice\",\n                options: {},\n                capture: \"\",\n                next: \"\"\n              },\n              position,\n              type: \"default\"\n            };\n            const updatedNodes = [...nodes, newNode];\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n              type: \"application/json\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"conversation_data.json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            if (!selectedNodeId) return;\n            const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n            const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n            setNodes(updatedNodes);\n            setEdges(updatedEdges);\n            setSelectedNodeId(null);\n            pushToHistory(updatedNodes, updatedEdges);\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          width: 300\n        },\n        children: [selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#f8fafc\",\n            padding: 12,\n            border: \"1px solid #d1d5db\",\n            borderRadius: \"10px\",\n            width: \"100%\",\n            boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\",\n            marginBottom: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Editing Node: \", selectedNode.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  message: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  type: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  capture: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  next: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PromptSettings, {\n          promptSettings: promptSettings,\n          setPromptSettings: setPromptSettings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: [...manualEdges, ...autoGeneratedEdges],\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: {\n            background: \"#6366f1\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"6px\",\n            padding: \"4px 8px\",\n            fontSize: \"12px\",\n            cursor: \"pointer\"\n          },\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          marginBottom: 10,\n          paddingRight: 4\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"of75c9uXLRI71VFlhbMKlyXhoME=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["PromptSettings","React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","promptSettings","setPromptSettings","system_prompt","gpt_model","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getExportJSON","output","settings","forEach","node","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","map","entry","role","content","chat_history","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","style","display","gap","children","value","onChange","target","onKeyDown","key","flex","padding","borderRadius","border","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","color","whiteSpace","opt","margin","width","checked","includes","filter","o","join","marginTop","textAlign","boxShadow","fontSize","fontWeight","fontFamily","zIndex","top","left","newId","toString","Math","random","newNode","updatedNodes","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","updatedEdges","source","right","marginBottom","label","getNodeStyle","autoGeneratedEdges","onConnect","params","prompt","edgeId","markerEnd","ArrowClosed","updated","onNodeClick","_","onEdgeClick","edge","fitView","edgeLabelMode","borderLeft","flexDirection","boxSizing","justifyContent","alignItems","flexShrink","textContent","cursor","overflowY","paddingRight","index","alignSelf","maxWidth","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import PromptSettings from \"./PromptSettings\";\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: promptSettings.system_prompt,\n            gpt_model: promptSettings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: promptSettings.system_prompt,\n            gpt_model: promptSettings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button\n          key={opt}\n          onClick={() => handleUserResponse(opt)}\n          style={{\n            padding: \"8px\",\n            margin: \"4px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\"\n          }}\n        >\n          {opt}\n        </button>\n      ));\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div\n              key={opt}\n              style={{\n                background: \"#facc15\",\n                padding: \"4px 8px\",\n                borderRadius: \"4px\",\n                margin: \"4px 0\"\n              }}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\"\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Panel */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div style={{\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Top Left Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              const newId = nodeCounter.toString();\n              nodeCounter++;\n              const position = selectedNodeId\n                ? {\n                    x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                    y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n                  }\n                : { x: Math.random() * 400, y: Math.random() * 400 };\n              const newNode = {\n                id: newId,\n                data: {\n                  message: `This is node ${newId}`,\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position,\n                type: \"default\"\n              };\n              const updatedNodes = [...nodes, newNode];\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            }}>Add Node</button>\n\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], { type: \"application/json\" });\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"conversation_data.json\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            }}>Export JSON</button>\n\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              if (!selectedNodeId) return;\n              const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n              const updatedEdges = manualEdges.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId);\n              setNodes(updatedNodes);\n              setEdges(updatedEdges);\n              setSelectedNodeId(null);\n              pushToHistory(updatedNodes, updatedEdges);\n            }}>Delete Node</button>\n\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={submitFlow}>Submit Flow</button>\n        </div>\n\n        {/* Top Right Buttons */}\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={undo}>Undo</button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={redo}>Redo</button>\n        </div>\n\n        {/* Node Editor and Prompt Settings Left Side */}\n        <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, width: 300 }}>\n          {selectedNode && (\n            <div style={{\n              background: \"#f8fafc\",\n              padding: 12,\n              border: \"1px solid #d1d5db\",\n              borderRadius: \"10px\",\n              width: \"100%\",\n              boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\",\n              marginBottom: 20\n            }}>\n              <h4>Editing Node: {selectedNode.id}</h4>\n              <label>Message:</label>\n              <textarea value={selectedNode.data.message}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, message: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }} style={{ width: \"100%\", height: 60 }} />\n              <label>Type:</label>\n              <select value={selectedNode.data.type}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, type: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }} style={{ width: \"100%\" }}>\n                <option value=\"choice\">choice</option>\n                <option value=\"input\">input</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n              <label>Capture Field:</label>\n              <input type=\"text\" value={selectedNode.data.capture}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, capture: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }} style={{ width: \"100%\" }} />\n              <label>Next Node ID:</label>\n              <input type=\"text\" value={selectedNode.data.next}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, next: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }} style={{ width: \"100%\" }} />\n            </div>\n          )}\n\n          {/* Prompt Settings Editor */}\n          <PromptSettings\n            promptSettings={promptSettings}\n            setPromptSettings={setPromptSettings}\n          />\n        </div>\n\n        {/* React Flow Canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={[...manualEdges, ...autoGeneratedEdges]}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge({ ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label }, manualEdges);\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel */}\n      <div style={{\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      }}>\n        <div style={{\n          fontWeight: \"bold\",\n          marginBottom: 10,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        }}>\n          <span>MindPeace Chat</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"chat_history.txt\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n              style={{\n                background: \"#6366f1\",\n                color: \"white\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                padding: \"4px 8px\",\n                fontSize: \"12px\",\n                cursor: \"pointer\"\n              }}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        <div style={{\n          flex: 1,\n          overflowY: \"auto\",\n          marginBottom: 10,\n          paddingRight: 4\n        }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{\n                  alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                  background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n                  padding: 8,\n                  borderRadius: 6,\n                  maxWidth: \"90%\"\n                }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {chatbotReady && (\n          <div style={{ flexShrink: 0 }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}