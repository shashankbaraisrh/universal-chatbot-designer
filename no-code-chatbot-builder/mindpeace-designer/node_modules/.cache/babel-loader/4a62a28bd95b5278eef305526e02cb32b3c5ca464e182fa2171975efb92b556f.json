{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\ChatbotPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatbotPanel({\n  chatbotReady,\n  chatHistory,\n  inputValue,\n  currentNodeId,\n  submittedFlow,\n  setChatHistory,\n  setInputValue,\n  handleUserResponse,\n  handleGPTContinuation\n}) {\n  _s();\n  var _submittedFlow$nodes;\n  const currentNode = submittedFlow === null || submittedFlow === void 0 ? void 0 : (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[currentNodeId];\n  const isChoiceNode = currentNode && (currentNode.type === \"choice\" || currentNode.type === \"multi_choice\");\n  const isGptDone = (currentNode === null || currentNode === void 0 ? void 0 : currentNode.type) === \"gpt\" || currentNodeId === \"__gpt_continuation__\";\n  const onSend = () => {\n    const trimmed = inputValue.trim();\n    if (!trimmed) return;\n    if (currentNodeId === \"__gpt_continuation__\") {\n      handleGPTContinuation(trimmed);\n    } else {\n      handleUserResponse(trimmed);\n    }\n    setInputValue(\"\");\n  };\n  const onChoiceClick = option => {\n    handleUserResponse(option);\n  };\n  const chatEndRef = useRef(null);\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"400px\",\n      borderLeft: \"2px solid #ddd\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      background: \"#f0f2f5\",\n      fontFamily: \"Segoe UI, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"14px\",\n        fontWeight: \"bold\",\n        background: \"#075e54\",\n        color: \"white\",\n        fontSize: \"18px\",\n        borderBottom: \"1px solid #ccc\"\n      },\n      children: \"\\uD83D\\uDCAC MindPeace Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        padding: \"10px\",\n        overflowY: \"auto\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"10px\"\n      },\n      children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          alignSelf: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n          backgroundColor: msg.sender === \"user\" ? \"#d9fdd3\" : \"#ffffff\",\n          color: \"#111\",\n          borderRadius: \"16px\",\n          padding: \"10px 14px\",\n          maxWidth: \"80%\",\n          boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\n          wordBreak: \"break-word\"\n        },\n        children: msg.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)), chatbotReady && isChoiceNode && Object.entries(currentNode.options || {}).map(([key]) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onChoiceClick(key),\n        style: {\n          alignSelf: \"flex-start\",\n          backgroundColor: \"#e0f7fa\",\n          border: \"1px solid #26c6da\",\n          borderRadius: \"12px\",\n          padding: \"8px 14px\",\n          marginTop: \"4px\",\n          cursor: \"pointer\",\n          fontWeight: \"500\"\n        },\n        children: key\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), chatbotReady && (!isChoiceNode || isGptDone) && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"10px\",\n        borderTop: \"1px solid #ccc\",\n        display: \"flex\",\n        gap: \"10px\",\n        background: \"#fff\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        placeholder: \"Type your message...\",\n        style: {\n          flex: 1,\n          padding: \"10px\",\n          borderRadius: \"20px\",\n          border: \"1px solid #ccc\",\n          outline: \"none\",\n          fontSize: \"14px\"\n        },\n        onKeyDown: e => e.key === \"Enter\" && onSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onSend,\n        style: {\n          background: \"#25D366\",\n          color: \"white\",\n          padding: \"10px 16px\",\n          borderRadius: \"20px\",\n          border: \"none\",\n          cursor: \"pointer\",\n          fontWeight: \"bold\"\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatbotPanel, \"BSXkY06UzTG8qL2envbQpCncJSI=\");\n_c = ChatbotPanel;\nvar _c;\n$RefreshReg$(_c, \"ChatbotPanel\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ChatbotPanel","chatbotReady","chatHistory","inputValue","currentNodeId","submittedFlow","setChatHistory","setInputValue","handleUserResponse","handleGPTContinuation","_s","_submittedFlow$nodes","currentNode","nodes","isChoiceNode","type","isGptDone","onSend","trimmed","trim","onChoiceClick","option","chatEndRef","current","scrollIntoView","behavior","style","width","borderLeft","display","flexDirection","background","fontFamily","children","padding","fontWeight","color","fontSize","borderBottom","fileName","_jsxFileName","lineNumber","columnNumber","flex","overflowY","gap","map","msg","index","alignSelf","sender","backgroundColor","borderRadius","maxWidth","boxShadow","wordBreak","message","Object","entries","options","key","onClick","border","marginTop","cursor","ref","borderTop","value","onChange","e","target","placeholder","outline","onKeyDown","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/ChatbotPanel.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nexport default function ChatbotPanel({\r\n  chatbotReady,\r\n  chatHistory,\r\n  inputValue,\r\n  currentNodeId,\r\n  submittedFlow,\r\n  setChatHistory,\r\n  setInputValue,\r\n  handleUserResponse,\r\n  handleGPTContinuation\r\n}) {\r\n  const currentNode = submittedFlow?.nodes?.[currentNodeId];\r\n\r\n  const isChoiceNode =\r\n    currentNode &&\r\n    (currentNode.type === \"choice\" || currentNode.type === \"multi_choice\");\r\n\r\n  const isGptDone =\r\n    currentNode?.type === \"gpt\" || currentNodeId === \"__gpt_continuation__\";\r\n\r\n  const onSend = () => {\r\n    const trimmed = inputValue.trim();\r\n    if (!trimmed) return;\r\n    if (currentNodeId === \"__gpt_continuation__\") {\r\n      handleGPTContinuation(trimmed);\r\n    } else {\r\n      handleUserResponse(trimmed);\r\n    }\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  const onChoiceClick = (option) => {\r\n    handleUserResponse(option);\r\n  };\r\n\r\n  const chatEndRef = useRef(null);\r\n  useEffect(() => {\r\n    if (chatEndRef.current) {\r\n      chatEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [chatHistory]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"400px\",\r\n        borderLeft: \"2px solid #ddd\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        background: \"#f0f2f5\",\r\n        fontFamily: \"Segoe UI, sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          padding: \"14px\",\r\n          fontWeight: \"bold\",\r\n          background: \"#075e54\",\r\n          color: \"white\",\r\n          fontSize: \"18px\",\r\n          borderBottom: \"1px solid #ccc\"\r\n        }}\r\n      >\r\n        ðŸ’¬ MindPeace Assistant\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          flex: 1,\r\n          padding: \"10px\",\r\n          overflowY: \"auto\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: \"10px\"\r\n        }}\r\n      >\r\n        {chatHistory.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              alignSelf: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\r\n              backgroundColor: msg.sender === \"user\" ? \"#d9fdd3\" : \"#ffffff\",\r\n              color: \"#111\",\r\n              borderRadius: \"16px\",\r\n              padding: \"10px 14px\",\r\n              maxWidth: \"80%\",\r\n              boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\r\n              wordBreak: \"break-word\"\r\n            }}\r\n          >\r\n            {msg.message}\r\n          </div>\r\n        ))}\r\n\r\n        {/* Render buttons for choice/multi_choice */}\r\n        {chatbotReady &&\r\n          isChoiceNode &&\r\n          Object.entries(currentNode.options || {}).map(([key]) => (\r\n            <button\r\n              key={key}\r\n              onClick={() => onChoiceClick(key)}\r\n              style={{\r\n                alignSelf: \"flex-start\",\r\n                backgroundColor: \"#e0f7fa\",\r\n                border: \"1px solid #26c6da\",\r\n                borderRadius: \"12px\",\r\n                padding: \"8px 14px\",\r\n                marginTop: \"4px\",\r\n                cursor: \"pointer\",\r\n                fontWeight: \"500\"\r\n              }}\r\n            >\r\n              {key}\r\n            </button>\r\n          ))}\r\n        <div ref={chatEndRef} />\r\n      </div>\r\n\r\n      {/* Input box for open-ended messages */}\r\n      {chatbotReady && (!isChoiceNode || isGptDone) && (\r\n        <div\r\n          style={{\r\n            padding: \"10px\",\r\n            borderTop: \"1px solid #ccc\",\r\n            display: \"flex\",\r\n            gap: \"10px\",\r\n            background: \"#fff\"\r\n          }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            placeholder=\"Type your message...\"\r\n            style={{\r\n              flex: 1,\r\n              padding: \"10px\",\r\n              borderRadius: \"20px\",\r\n              border: \"1px solid #ccc\",\r\n              outline: \"none\",\r\n              fontSize: \"14px\"\r\n            }}\r\n            onKeyDown={(e) => e.key === \"Enter\" && onSend()}\r\n          />\r\n          <button\r\n            onClick={onSend}\r\n            style={{\r\n              background: \"#25D366\",\r\n              color: \"white\",\r\n              padding: \"10px 16px\",\r\n              borderRadius: \"20px\",\r\n              border: \"none\",\r\n              cursor: \"pointer\",\r\n              fontWeight: \"bold\"\r\n            }}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}