{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [isChatActive, setIsChatActive] = useState(false); // controls chatbot panel state\n  const [chatMessages, setChatMessages] = useState([]);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatError, setChatError] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 3,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        borderLeft: \"1px solid #ccc\",\n        background: \"#f9fafb\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), !isChatActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"#999\",\n          marginTop: \"20px\"\n        },\n        children: [\"Submit valid flow to activate chatbot.\", chatError && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: chatError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          paddingBottom: \"10px\"\n        },\n        children: [chatMessages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.sender, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this), \" \", msg.text]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            marginTop: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              flex: 1,\n              padding: \"8px\"\n            },\n            value: chatInput,\n            onChange: e => setChatInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              padding: \"8px 12px\"\n            },\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SEJPQHGnDPiLvkHp8IzRuXWVHOs=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","isChatActive","setIsChatActive","chatMessages","setChatMessages","chatInput","setChatInput","chatError","setChatError","history","edges","historyIndex","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","selectedNode","find","n","selectedEdge","e","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","display","width","height","children","flex","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","fitView","edgeLabelMode","borderLeft","flexDirection","color","marginTop","overflowY","paddingBottom","msg","idx","marginBottom","sender","text","onChange","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [isChatActive, setIsChatActive] = useState(false); // controls chatbot panel state\n  const [chatMessages, setChatMessages] = useState([]);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatError, setChatError] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ display: \"flex\", width: \"100vw\", height: \"100vh\" }}>\n      {/* Left: Flow Editor */}\n      <div style={{ flex: 3, position: \"relative\" }}>\n        <div\n          style={{\n            textAlign: \"center\",\n            padding: \"12px\",\n            background: \"#f1f5f9\",\n            boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n            borderRadius: \"8px\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\",\n            fontFamily: \"Segoe UI, sans-serif\",\n            width: \"fit-content\",\n            margin: \"10px auto\",\n            zIndex: 20,\n            position: \"relative\"\n          }}\n        >\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Buttons and Editors remain untouched */}\n        {/* ... [keep your addNode, undo, redo, editor panels here] ... */}\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right: Chatbot Panel */}\n      <div\n        style={{\n          flex: 1,\n          borderLeft: \"1px solid #ccc\",\n          background: \"#f9fafb\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          padding: \"10px\"\n        }}\n      >\n        <h3>MindPeace Chat</h3>\n        {!isChatActive ? (\n          <div style={{ color: \"#999\", marginTop: \"20px\" }}>\n            Submit valid flow to activate chatbot.\n            {chatError && <p style={{ color: \"red\" }}>{chatError}</p>}\n          </div>\n        ) : (\n          <div style={{ flex: 1, overflowY: \"auto\", paddingBottom: \"10px\" }}>\n            {chatMessages.map((msg, idx) => (\n              <div key={idx} style={{ marginBottom: \"10px\" }}>\n                <strong>{msg.sender}: </strong> {msg.text}\n              </div>\n            ))}\n            <div style={{ display: \"flex\", marginTop: \"10px\" }}>\n              <input\n                style={{ flex: 1, padding: \"8px\" }}\n                value={chatInput}\n                onChange={(e) => setChatInput(e.target.value)}\n              />\n              <button style={{ padding: \"8px 12px\" }}>Send</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}