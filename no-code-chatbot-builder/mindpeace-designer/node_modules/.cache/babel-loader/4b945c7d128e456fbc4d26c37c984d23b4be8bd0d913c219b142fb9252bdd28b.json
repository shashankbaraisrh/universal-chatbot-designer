{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, useEdgesState, useNodesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport CustomEdge from './CustomEdge'; // ✅ NEW: import custom edge\n\n// Initial dummy data\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  position: {\n    x: 250,\n    y: 5\n  },\n  data: {\n    label: 'Start Node',\n    message: 'Hello! Do you want to continue? (Yes/No)',\n    capture: '',\n    next: '',\n    end: false\n  },\n  type: 'default'\n}, {\n  id: '2',\n  position: {\n    x: 100,\n    y: 100\n  },\n  data: {\n    label: 'Second Node',\n    message: 'Would you like to share your name?',\n    capture: 'name',\n    next: '',\n    end: false\n  },\n  type: 'default'\n}];\nconst initialEdges = [{\n  id: 'e1-2',\n  source: '1',\n  target: '2',\n  data: {\n    label: 'yes'\n  }\n}];\nfunction App() {\n  _s();\n  var _selectedEdge$data;\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n\n  // ✅ Edge type mapping\n  const edgeTypes = {\n    custom: CustomEdge\n  };\n\n  // Handle new connections with default label\n  const onConnect = useCallback(params => setEdges(eds => addEdge({\n    ...params,\n    data: {\n      label: 'Option'\n    },\n    type: 'custom'\n  }, eds)), [setEdges]);\n\n  // Node click selects node\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n\n  // Edge click selects edge\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n\n  // Handle node field editing\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n    setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: field === 'end' ? value : value.trim(),\n        label: field === 'message' ? value.trim().slice(0, 20) + (value.length > 20 ? '...' : '') : node.data.label\n      }\n    } : node));\n    setSelectedNode(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: field === 'end' ? value : value.trim(),\n        label: field === 'message' ? value.trim().slice(0, 20) + (value.length > 20 ? '...' : '') : prev.data.label\n      }\n    }));\n  };\n\n  // Handle edge label editing\n  const handleEdgeLabelChange = value => {\n    if (!selectedEdge) return;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      data: {\n        ...edge.data,\n        label: value.trim()\n      }\n    } : edge));\n    setSelectedEdge(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        label: value.trim()\n      }\n    }));\n  };\n\n  // Add new node\n  const addNewNode = () => {\n    const newId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newId,\n      position: {\n        x: 50,\n        y: 50\n      },\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false\n      },\n      type: 'default'\n    };\n    setNodes(nds => nds.concat(newNode));\n  };\n\n  // Delete selected node and its edges\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeIdToDelete = selectedNode.id;\n    setNodes(nds => nds.filter(node => node.id !== nodeIdToDelete));\n    setEdges(eds => eds.filter(edge => edge.source !== nodeIdToDelete && edge.target !== nodeIdToDelete));\n    setSelectedNode(null);\n  };\n\n  // Export to conversation_tree.json\n  const exportJSON = () => {\n    const conversationTree = {};\n    const optionsMap = {};\n    edges.forEach(edge => {\n      var _edge$data;\n      if (!optionsMap[edge.source]) {\n        optionsMap[edge.source] = {};\n      }\n      optionsMap[edge.source][((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.label) || 'Option'] = edge.target;\n    });\n    nodes.forEach(node => {\n      const {\n        message,\n        capture,\n        next,\n        end\n      } = node.data;\n      const nodeData = {\n        message: message || ''\n      };\n      if (optionsMap[node.id]) {\n        nodeData.options = optionsMap[node.id];\n      }\n      if (capture) nodeData.capture = capture;\n      if (next) nodeData.next = next;\n      if (end) nodeData.end = true;\n      conversationTree[node.id] = nodeData;\n    });\n    const json = JSON.stringify(conversationTree, null, 2);\n    const blob = new Blob([json], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        background: '#eee',\n        borderBottom: '1px solid #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewNode,\n        style: {\n          marginRight: '10px',\n          padding: '8px 16px',\n          backgroundColor: '#2196F3',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteSelectedNode,\n        style: {\n          padding: '8px 16px',\n          backgroundColor: '#f44336',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Delete Selected Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onNodeClick: onNodeClick,\n          onEdgeClick: onEdgeClick,\n          fitView: true,\n          edgeTypes: edgeTypes,\n          defaultEdgeOptions: {\n            type: 'custom'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), (selectedNode || selectedEdge) && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          padding: '15px',\n          background: '#f4f4f4',\n          borderLeft: '1px solid #ccc',\n          overflowY: 'auto'\n        },\n        children: [selectedNode && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Node Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 20\n            }, this), \" \", selectedNode.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => handleFieldChange('message', e.target.value),\n            rows: 4,\n            style: {\n              width: '100%',\n              marginBottom: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => handleFieldChange('capture', e.target.value),\n            style: {\n              width: '100%',\n              marginBottom: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => handleFieldChange('next', e.target.value),\n            style: {\n              width: '100%',\n              marginBottom: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'block',\n              marginTop: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedNode.data.end,\n              onChange: e => handleFieldChange('end', e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 19\n            }, this), ' ', \"End Node\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), selectedEdge && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Edge Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 20\n            }, this), \" \", selectedEdge.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: ((_selectedEdge$data = selectedEdge.data) === null || _selectedEdge$data === void 0 ? void 0 : _selectedEdge$data.label) || '',\n            onChange: e => handleEdgeLabelChange(e.target.value),\n            style: {\n              width: '100%',\n              marginBottom: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        style: {\n          position: 'fixed',\n          bottom: '20px',\n          right: '20px',\n          padding: '10px 20px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Export to JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jZs4SMGfl2c/kkafhubkYD6glNs=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","Controls","MiniMap","useEdgesState","useNodesState","CustomEdge","jsxDEV","_jsxDEV","Fragment","_Fragment","initialNodes","id","position","x","y","data","label","message","capture","next","end","type","initialEdges","source","target","App","_s","_selectedEdge$data","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedEdge","setSelectedEdge","edgeTypes","custom","onConnect","params","eds","onNodeClick","event","node","onEdgeClick","edge","stopPropagation","handleFieldChange","field","value","nds","map","trim","slice","length","prev","handleEdgeLabelChange","addNewNode","newId","toString","newNode","concat","deleteSelectedNode","nodeIdToDelete","filter","exportJSON","conversationTree","optionsMap","forEach","_edge$data","nodeData","options","json","JSON","stringify","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","style","display","flexDirection","height","width","children","padding","background","borderBottom","onClick","marginRight","backgroundColor","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","flex","fitView","defaultEdgeOptions","borderLeft","overflowY","onChange","e","rows","marginBottom","marginTop","checked","bottom","right","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Background,\n  Controls,\n  MiniMap,\n  useEdgesState,\n  useNodesState\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport CustomEdge from './CustomEdge'; // ✅ NEW: import custom edge\n\n// Initial dummy data\nconst initialNodes = [\n  {\n    id: '1',\n    position: { x: 250, y: 5 },\n    data: {\n      label: 'Start Node',\n      message: 'Hello! Do you want to continue? (Yes/No)',\n      capture: '',\n      next: '',\n      end: false\n    },\n    type: 'default'\n  },\n  {\n    id: '2',\n    position: { x: 100, y: 100 },\n    data: {\n      label: 'Second Node',\n      message: 'Would you like to share your name?',\n      capture: 'name',\n      next: '',\n      end: false\n    },\n    type: 'default'\n  }\n];\n\nconst initialEdges = [\n  { id: 'e1-2', source: '1', target: '2', data: { label: 'yes' } }\n];\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n\n  // ✅ Edge type mapping\n  const edgeTypes = {\n    custom: CustomEdge\n  };\n\n  // Handle new connections with default label\n  const onConnect = useCallback(\n    (params) =>\n      setEdges((eds) =>\n        addEdge(\n          { ...params, data: { label: 'Option' }, type: 'custom' },\n          eds\n        )\n      ),\n    [setEdges]\n  );\n\n  // Node click selects node\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n\n  // Edge click selects edge\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n\n  // Handle node field editing\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNode.id\n          ? {\n              ...node,\n              data: {\n                ...node.data,\n                [field]: field === 'end' ? value : value.trim(),\n                label:\n                  field === 'message'\n                    ? value.trim().slice(0, 20) + (value.length > 20 ? '...' : '')\n                    : node.data.label\n              }\n            }\n          : node\n      )\n    );\n\n    setSelectedNode((prev) => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: field === 'end' ? value : value.trim(),\n        label:\n          field === 'message'\n            ? value.trim().slice(0, 20) + (value.length > 20 ? '...' : '')\n            : prev.data.label\n      }\n    }));\n  };\n\n  // Handle edge label editing\n  const handleEdgeLabelChange = (value) => {\n    if (!selectedEdge) return;\n\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdge.id\n          ? { ...edge, data: { ...edge.data, label: value.trim() } }\n          : edge\n      )\n    );\n\n    setSelectedEdge((prev) => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        label: value.trim()\n      }\n    }));\n  };\n\n  // Add new node\n  const addNewNode = () => {\n    const newId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newId,\n      position: { x: 50, y: 50 },\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false\n      },\n      type: 'default'\n    };\n    setNodes((nds) => nds.concat(newNode));\n  };\n\n  // Delete selected node and its edges\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeIdToDelete = selectedNode.id;\n\n    setNodes((nds) => nds.filter((node) => node.id !== nodeIdToDelete));\n    setEdges((eds) =>\n      eds.filter((edge) => edge.source !== nodeIdToDelete && edge.target !== nodeIdToDelete)\n    );\n    setSelectedNode(null);\n  };\n\n  // Export to conversation_tree.json\n  const exportJSON = () => {\n    const conversationTree = {};\n\n    const optionsMap = {};\n    edges.forEach((edge) => {\n      if (!optionsMap[edge.source]) {\n        optionsMap[edge.source] = {};\n      }\n      optionsMap[edge.source][edge.data?.label || 'Option'] = edge.target;\n    });\n\n    nodes.forEach((node) => {\n      const { message, capture, next, end } = node.data;\n      const nodeData = {\n        message: message || ''\n      };\n      if (optionsMap[node.id]) {\n        nodeData.options = optionsMap[node.id];\n      }\n      if (capture) nodeData.capture = capture;\n      if (next) nodeData.next = next;\n      if (end) nodeData.end = true;\n\n      conversationTree[node.id] = nodeData;\n    });\n\n    const json = JSON.stringify(conversationTree, null, 2);\n    const blob = new Blob([json], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100vh', width: '100%' }}>\n      <div style={{ padding: '10px', background: '#eee', borderBottom: '1px solid #ccc' }}>\n        <button\n          onClick={addNewNode}\n          style={{\n            marginRight: '10px',\n            padding: '8px 16px',\n            backgroundColor: '#2196F3',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          Add Node\n        </button>\n\n        <button\n          onClick={deleteSelectedNode}\n          style={{\n            padding: '8px 16px',\n            backgroundColor: '#f44336',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          Delete Selected Node\n        </button>\n      </div>\n\n      <div style={{ flex: 1, display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onNodeClick={onNodeClick}\n            onEdgeClick={onEdgeClick}\n            fitView\n            edgeTypes={edgeTypes}\n            defaultEdgeOptions={{ type: 'custom' }}\n          >\n            <Background />\n            <Controls />\n            <MiniMap />\n          </ReactFlow>\n        </div>\n\n        {(selectedNode || selectedEdge) && (\n          <div\n            style={{\n              width: '300px',\n              padding: '15px',\n              background: '#f4f4f4',\n              borderLeft: '1px solid #ccc',\n              overflowY: 'auto'\n            }}\n          >\n            {selectedNode && (\n              <>\n                <h3>Node Editor</h3>\n                <p><strong>ID:</strong> {selectedNode.id}</p>\n\n                <label>Message:</label>\n                <textarea\n                  value={selectedNode.data.message}\n                  onChange={(e) => handleFieldChange('message', e.target.value)}\n                  rows={4}\n                  style={{ width: '100%', marginBottom: '10px' }}\n                />\n\n                <label>Capture Field:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.capture}\n                  onChange={(e) => handleFieldChange('capture', e.target.value)}\n                  style={{ width: '100%', marginBottom: '10px' }}\n                />\n\n                <label>Next Node:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.next}\n                  onChange={(e) => handleFieldChange('next', e.target.value)}\n                  style={{ width: '100%', marginBottom: '10px' }}\n                />\n\n                <label style={{ display: 'block', marginTop: '10px' }}>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedNode.data.end}\n                    onChange={(e) => handleFieldChange('end', e.target.checked)}\n                  />{' '}\n                  End Node\n                </label>\n              </>\n            )}\n\n            {selectedEdge && (\n              <>\n                <h3>Edge Editor</h3>\n                <p><strong>ID:</strong> {selectedEdge.id}</p>\n\n                <label>Label:</label>\n                <input\n                  type=\"text\"\n                  value={selectedEdge.data?.label || ''}\n                  onChange={(e) => handleEdgeLabelChange(e.target.value)}\n                  style={{ width: '100%', marginBottom: '10px' }}\n                />\n              </>\n            )}\n          </div>\n        )}\n\n        <button\n          onClick={exportJSON}\n          style={{\n            position: 'fixed',\n            bottom: '20px',\n            right: '20px',\n            padding: '10px 20px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer'\n          }}\n        >\n          Export to JSON\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}