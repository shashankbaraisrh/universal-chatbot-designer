{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { Background, Controls, MiniMap, addEdge, useEdgesState, useNodesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _selectedNode$data$ex, _selectedNode$data$gp, _selectedEdge$data;\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const [systemPrompt, setSystemPrompt] = useState('');\n\n  // Handle connections between nodes\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge({\n      ...params,\n      data: {\n        label: 'Option'\n      },\n      type: 'default'\n    }, eds));\n  }, [setEdges]);\n\n  // Handle click on a node\n  const onNodeClick = useCallback((_, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n\n  // Handle click on an edge\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n\n  // Handle changes to node properties\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n    let updatedValue = value;\n    if (field === 'expected_inputs') {\n      updatedValue = value.split(',').map(v => v.trim());\n    }\n    if (field === 'input_mapping') {\n      try {\n        updatedValue = JSON.parse(value);\n      } catch {\n        alert('Invalid JSON in input_mapping');\n        return;\n      }\n    }\n    if (field === 'gpt') {\n      updatedValue = {\n        enabled: value\n      };\n    }\n    setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: updatedValue,\n        label: field === 'message' ? updatedValue.trim().slice(0, 20) + (updatedValue.length > 20 ? '...' : '') : node.data.label\n      }\n    } : node));\n    setSelectedNode(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: updatedValue,\n        label: field === 'message' ? updatedValue.trim().slice(0, 20) + (updatedValue.length > 20 ? '...' : '') : prev.data.label\n      }\n    }));\n  };\n\n  // Handle edge label changes\n  const handleEdgeLabelChange = value => {\n    if (!selectedEdge) return;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      data: {\n        ...edge.data,\n        label: value.trim()\n      }\n    } : edge));\n    setSelectedEdge(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        label: value.trim()\n      }\n    }));\n  };\n\n  // Add a new node to the flow\n  const addNewNode = () => {\n    const newId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newId,\n      position: {\n        x: 100,\n        y: 100\n      },\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false,\n        expected_inputs: [],\n        input_mapping: {},\n        follow_up_prompt: '',\n        follow_up_capture: '',\n        gpt: {\n          enabled: false\n        }\n      },\n      type: 'default'\n    };\n    setNodes(nds => nds.concat(newNode));\n  };\n\n  // Delete the selected node\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeIdToDelete = selectedNode.id;\n    setNodes(nds => nds.filter(node => node.id !== nodeIdToDelete));\n    setEdges(eds => eds.filter(edge => edge.source !== nodeIdToDelete && edge.target !== nodeIdToDelete));\n    setSelectedNode(null);\n  };\n\n  // Export the current flow as a JSON file\n  const exportJSON = () => {\n    const conversationTree = {\n      settings: {\n        default_gpt_model: 'gpt-3.5-turbo',\n        default_system_prompt: systemPrompt,\n        context_includes: ['history', 'user_state', 'problems']\n      },\n      variables: {\n        name: '',\n        first_name: '',\n        email: '',\n        age: '',\n        problem_type: '',\n        problem_details: '',\n        intensity: '',\n        problems: []\n      },\n      nodes: {}\n    };\n    const optionsMap = {};\n    edges.forEach(edge => {\n      var _edge$data;\n      if (!optionsMap[edge.source]) optionsMap[edge.source] = {};\n      optionsMap[edge.source][((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.label) || 'Option'] = edge.target;\n    });\n    nodes.forEach(node => {\n      var _data$expected_inputs, _data$gpt;\n      const data = node.data;\n      const nodeData = {\n        message: data.message || ''\n      };\n      if (optionsMap[node.id]) nodeData.options = optionsMap[node.id];\n      if (data.capture) nodeData.capture = data.capture;\n      if (data.next) nodeData.next = data.next;\n      if (data.end) nodeData.end = true;\n      if ((_data$expected_inputs = data.expected_inputs) !== null && _data$expected_inputs !== void 0 && _data$expected_inputs.length) nodeData.expected_inputs = data.expected_inputs;\n      if (Object.keys(data.input_mapping || {}).length) nodeData.input_mapping = data.input_mapping;\n      if (data.follow_up_prompt) nodeData.follow_up_prompt = data.follow_up_prompt;\n      if (data.follow_up_capture) nodeData.follow_up_capture = data.follow_up_capture;\n      if ((_data$gpt = data.gpt) !== null && _data$gpt !== void 0 && _data$gpt.enabled) nodeData.gpt = {\n        enabled: true\n      };\n      conversationTree.nodes[node.id] = nodeData;\n    });\n    const json = JSON.stringify(conversationTree, null, 2);\n    const blob = new Blob([json], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Import a JSON file and load it into the flow\n  const handleImportJSON = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      try {\n        var _json$settings;\n        const json = JSON.parse(event.target.result);\n        setSystemPrompt(((_json$settings = json.settings) === null || _json$settings === void 0 ? void 0 : _json$settings.default_system_prompt) || '');\n        const importedNodes = Object.entries(json.nodes || {}).map(([id, node], index) => ({\n          id,\n          position: {\n            x: 100 + index * 30,\n            y: 100 + index * 30\n          },\n          data: {\n            label: node.message.slice(0, 20) + (node.message.length > 20 ? '...' : ''),\n            message: node.message,\n            capture: node.capture || '',\n            next: node.next || '',\n            end: node.end || false,\n            expected_inputs: node.expected_inputs || [],\n            input_mapping: node.input_mapping || {},\n            follow_up_prompt: node.follow_up_prompt || '',\n            follow_up_capture: node.follow_up_capture || '',\n            gpt: node.gpt || {\n              enabled: false\n            }\n          },\n          type: 'default'\n        }));\n        const importedEdges = [];\n        Object.entries(json.nodes || {}).forEach(([sourceId, node]) => {\n          if (node.options) {\n            Object.entries(node.options).forEach(([label, targetId]) => {\n              importedEdges.push({\n                id: `e${sourceId}-${targetId}`,\n                source: sourceId,\n                target: targetId,\n                data: {\n                  label\n                }\n              });\n            });\n          }\n        });\n        setNodes(importedNodes);\n        setEdges(importedEdges);\n      } catch (err) {\n        alert('Invalid JSON format');\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 10,\n        background: '#eee'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewNode,\n        style: {\n          marginRight: 10\n        },\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteSelectedNode,\n        style: {\n          marginRight: 10\n        },\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".json\",\n        onChange: handleImportJSON\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        style: {\n          marginLeft: 10,\n          padding: '6px 12px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px'\n        },\n        children: \"Export to JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"System Prompt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: systemPrompt,\n          onChange: e => setSystemPrompt(e.target.value),\n          rows: 4,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onNodeClick: onNodeClick,\n          onEdgeClick: onEdgeClick,\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), (selectedNode || selectedEdge) && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 300,\n          padding: 10,\n          background: '#f4f4f4'\n        },\n        children: [selectedNode && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Node Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => handleFieldChange('message', e.target.value),\n            rows: 3,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => handleFieldChange('capture', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => handleFieldChange('next', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Expected Inputs (comma):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: ((_selectedNode$data$ex = selectedNode.data.expected_inputs) === null || _selectedNode$data$ex === void 0 ? void 0 : _selectedNode$data$ex.join(', ')) || '',\n            onChange: e => handleFieldChange('expected_inputs', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Input Mapping (JSON):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: JSON.stringify(selectedNode.data.input_mapping || {}, null, 2),\n            onChange: e => handleFieldChange('input_mapping', e.target.value),\n            rows: 2,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Follow-up Prompt:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.follow_up_prompt || '',\n            onChange: e => handleFieldChange('follow_up_prompt', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Follow-up Capture:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.follow_up_capture || '',\n            onChange: e => handleFieldChange('follow_up_capture', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: ((_selectedNode$data$gp = selectedNode.data.gpt) === null || _selectedNode$data$gp === void 0 ? void 0 : _selectedNode$data$gp.enabled) || false,\n              onChange: e => handleFieldChange('gpt', e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 19\n            }, this), \" GPT Enabled\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'block',\n              marginTop: '8px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedNode.data.end || false,\n              onChange: e => handleFieldChange('end', e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 19\n            }, this), \" End Node\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), selectedEdge && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Edge Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: ((_selectedEdge$data = selectedEdge.data) === null || _selectedEdge$data === void 0 ? void 0 : _selectedEdge$data.label) || '',\n            onChange: e => handleEdgeLabelChange(e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XoAb92O7zZ4pgZbNt+fBW3pvW/U=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","Background","Controls","MiniMap","addEdge","useEdgesState","useNodesState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_selectedNode$data$ex","_selectedNode$data$gp","_selectedEdge$data","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedEdge","setSelectedEdge","systemPrompt","setSystemPrompt","onConnect","params","eds","data","label","type","onNodeClick","_","node","onEdgeClick","event","edge","stopPropagation","handleFieldChange","field","value","updatedValue","split","map","v","trim","JSON","parse","alert","enabled","nds","id","slice","length","prev","handleEdgeLabelChange","addNewNode","newId","toString","newNode","position","x","y","message","capture","next","end","expected_inputs","input_mapping","follow_up_prompt","follow_up_capture","gpt","concat","deleteSelectedNode","nodeIdToDelete","filter","source","target","exportJSON","conversationTree","settings","default_gpt_model","default_system_prompt","context_includes","variables","name","first_name","email","age","problem_type","problem_details","intensity","problems","optionsMap","forEach","_edge$data","_data$expected_inputs","_data$gpt","nodeData","options","Object","keys","json","stringify","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","handleImportJSON","e","file","files","reader","FileReader","onload","_json$settings","result","importedNodes","entries","index","importedEdges","sourceId","targetId","push","err","readAsText","style","display","flexDirection","height","children","padding","background","onClick","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","marginLeft","backgroundColor","color","border","borderRadius","marginTop","rows","width","flex","fitView","join","checked","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport ReactFlow, { Background, Controls, MiniMap, addEdge, useEdgesState, useNodesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const [systemPrompt, setSystemPrompt] = useState('');\n\n  // Handle connections between nodes\n  const onConnect = useCallback((params) => {\n    setEdges((eds) => addEdge({ ...params, data: { label: 'Option' }, type: 'default' }, eds));\n  }, [setEdges]);\n\n  // Handle click on a node\n  const onNodeClick = useCallback((_, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n\n  // Handle click on an edge\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n\n  // Handle changes to node properties\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n\n    let updatedValue = value;\n    if (field === 'expected_inputs') {\n      updatedValue = value.split(',').map((v) => v.trim());\n    }\n\n    if (field === 'input_mapping') {\n      try {\n        updatedValue = JSON.parse(value);\n      } catch {\n        alert('Invalid JSON in input_mapping');\n        return;\n      }\n    }\n\n    if (field === 'gpt') {\n      updatedValue = { enabled: value };\n    }\n\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNode.id\n          ? { ...node, data: { ...node.data, [field]: updatedValue, label: field === 'message' ? updatedValue.trim().slice(0, 20) + (updatedValue.length > 20 ? '...' : '') : node.data.label } }\n          : node\n      )\n    );\n\n    setSelectedNode((prev) => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: updatedValue,\n        label: field === 'message' ? updatedValue.trim().slice(0, 20) + (updatedValue.length > 20 ? '...' : '') : prev.data.label,\n      },\n    }));\n  };\n\n  // Handle edge label changes\n  const handleEdgeLabelChange = (value) => {\n    if (!selectedEdge) return;\n\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdge.id\n          ? { ...edge, data: { ...edge.data, label: value.trim() } }\n          : edge\n      )\n    );\n\n    setSelectedEdge((prev) => ({\n      ...prev,\n      data: { ...prev.data, label: value.trim() },\n    }));\n  };\n\n  // Add a new node to the flow\n  const addNewNode = () => {\n    const newId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newId,\n      position: { x: 100, y: 100 },\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false,\n        expected_inputs: [],\n        input_mapping: {},\n        follow_up_prompt: '',\n        follow_up_capture: '',\n        gpt: { enabled: false },\n      },\n      type: 'default',\n    };\n    setNodes((nds) => nds.concat(newNode));\n  };\n\n  // Delete the selected node\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeIdToDelete = selectedNode.id;\n\n    setNodes((nds) => nds.filter((node) => node.id !== nodeIdToDelete));\n    setEdges((eds) =>\n      eds.filter((edge) => edge.source !== nodeIdToDelete && edge.target !== nodeIdToDelete)\n    );\n    setSelectedNode(null);\n  };\n\n  // Export the current flow as a JSON file\n  const exportJSON = () => {\n    const conversationTree = {\n      settings: {\n        default_gpt_model: 'gpt-3.5-turbo',\n        default_system_prompt: systemPrompt,\n        context_includes: ['history', 'user_state', 'problems'],\n      },\n      variables: {\n        name: '',\n        first_name: '',\n        email: '',\n        age: '',\n        problem_type: '',\n        problem_details: '',\n        intensity: '',\n        problems: [],\n      },\n      nodes: {},\n    };\n\n    const optionsMap = {};\n    edges.forEach((edge) => {\n      if (!optionsMap[edge.source]) optionsMap[edge.source] = {};\n      optionsMap[edge.source][edge.data?.label || 'Option'] = edge.target;\n    });\n\n    nodes.forEach((node) => {\n      const data = node.data;\n      const nodeData = { message: data.message || '' };\n\n      if (optionsMap[node.id]) nodeData.options = optionsMap[node.id];\n      if (data.capture) nodeData.capture = data.capture;\n      if (data.next) nodeData.next = data.next;\n      if (data.end) nodeData.end = true;\n      if (data.expected_inputs?.length) nodeData.expected_inputs = data.expected_inputs;\n      if (Object.keys(data.input_mapping || {}).length) nodeData.input_mapping = data.input_mapping;\n      if (data.follow_up_prompt) nodeData.follow_up_prompt = data.follow_up_prompt;\n      if (data.follow_up_capture) nodeData.follow_up_capture = data.follow_up_capture;\n      if (data.gpt?.enabled) nodeData.gpt = { enabled: true };\n\n      conversationTree.nodes[node.id] = nodeData;\n    });\n\n    const json = JSON.stringify(conversationTree, null, 2);\n    const blob = new Blob([json], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Import a JSON file and load it into the flow\n  const handleImportJSON = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      try {\n        const json = JSON.parse(event.target.result);\n        setSystemPrompt(json.settings?.default_system_prompt || '');\n\n        const importedNodes = Object.entries(json.nodes || {}).map(([id, node], index) => ({\n          id,\n          position: { x: 100 + index * 30, y: 100 + index * 30 },\n          data: {\n            label: node.message.slice(0, 20) + (node.message.length > 20 ? '...' : ''),\n            message: node.message,\n            capture: node.capture || '',\n            next: node.next || '',\n            end: node.end || false,\n            expected_inputs: node.expected_inputs || [],\n            input_mapping: node.input_mapping || {},\n            follow_up_prompt: node.follow_up_prompt || '',\n            follow_up_capture: node.follow_up_capture || '',\n            gpt: node.gpt || { enabled: false },\n          },\n          type: 'default',\n        }));\n\n        const importedEdges = [];\n        Object.entries(json.nodes || {}).forEach(([sourceId, node]) => {\n          if (node.options) {\n            Object.entries(node.options).forEach(([label, targetId]) => {\n              importedEdges.push({\n                id: `e${sourceId}-${targetId}`,\n                source: sourceId,\n                target: targetId,\n                data: { label },\n              });\n            });\n          }\n        });\n\n        setNodes(importedNodes);\n        setEdges(importedEdges);\n      } catch (err) {\n        alert('Invalid JSON format');\n      }\n    };\n\n    reader.readAsText(file);\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\n      <div style={{ padding: 10, background: '#eee' }}>\n        <button onClick={addNewNode} style={{ marginRight: 10 }}>Add Node</button>\n        <button onClick={deleteSelectedNode} style={{ marginRight: 10 }}>Delete Node</button>\n        <input type=\"file\" accept=\".json\" onChange={handleImportJSON} />\n        <button\n          onClick={exportJSON}\n          style={{\n            marginLeft: 10,\n            padding: '6px 12px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n          }}\n        >\n          Export to JSON\n        </button>\n        <div style={{ marginTop: 10 }}>\n          <label><strong>System Prompt</strong></label>\n          <textarea\n            value={systemPrompt}\n            onChange={(e) => setSystemPrompt(e.target.value)}\n            rows={4}\n            style={{ width: '100%' }}\n          />\n        </div>\n      </div>\n\n      <div style={{ flex: 1, display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onNodeClick={onNodeClick}\n            onEdgeClick={onEdgeClick}\n            fitView\n          >\n            <Background />\n            <Controls />\n            <MiniMap />\n          </ReactFlow>\n        </div>\n\n        {(selectedNode || selectedEdge) && (\n          <div style={{ width: 300, padding: 10, background: '#f4f4f4' }}>\n            {selectedNode && (\n              <>\n                <h3>Node Editor</h3>\n                <label>Message:</label>\n                <textarea\n                  value={selectedNode.data.message}\n                  onChange={(e) => handleFieldChange('message', e.target.value)}\n                  rows={3}\n                  style={{ width: '100%' }}\n                />\n\n                <label>Capture:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.capture}\n                  onChange={(e) => handleFieldChange('capture', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n\n                <label>Next:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.next}\n                  onChange={(e) => handleFieldChange('next', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n\n                <label>Expected Inputs (comma):</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.expected_inputs?.join(', ') || ''}\n                  onChange={(e) => handleFieldChange('expected_inputs', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n\n                <label>Input Mapping (JSON):</label>\n                <textarea\n                  value={JSON.stringify(selectedNode.data.input_mapping || {}, null, 2)}\n                  onChange={(e) => handleFieldChange('input_mapping', e.target.value)}\n                  rows={2}\n                  style={{ width: '100%' }}\n                />\n\n                <label>Follow-up Prompt:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.follow_up_prompt || ''}\n                  onChange={(e) => handleFieldChange('follow_up_prompt', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n\n                <label>Follow-up Capture:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.follow_up_capture || ''}\n                  onChange={(e) => handleFieldChange('follow_up_capture', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedNode.data.gpt?.enabled || false}\n                    onChange={(e) => handleFieldChange('gpt', e.target.checked)}\n                  /> GPT Enabled\n                </label>\n\n                <label style={{ display: 'block', marginTop: '8px' }}>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedNode.data.end || false}\n                    onChange={(e) => handleFieldChange('end', e.target.checked)}\n                  /> End Node\n                </label>\n              </>\n            )}\n\n            {selectedEdge && (\n              <>\n                <h3>Edge Editor</h3>\n                <label>Label:</label>\n                <input\n                  type=\"text\"\n                  value={selectedEdge.data?.label || ''}\n                  onChange={(e) => handleEdgeLabelChange(e.target.value)}\n                  style={{ width: '100%' }}\n                />\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}