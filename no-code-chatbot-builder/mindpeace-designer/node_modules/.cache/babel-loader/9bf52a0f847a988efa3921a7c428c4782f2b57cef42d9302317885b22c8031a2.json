{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptSettings from \"./PromptSettings\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getNodeStyle = type => {\n  switch (type) {\n    case \"choice\":\n      return {\n        background: \"#e0f2fe\",\n        padding: 10,\n        borderRadius: 12,\n        boxShadow: \"2px 2px 5px #ccc\"\n      };\n    case \"input\":\n      return {\n        background: \"#dcfce7\",\n        padding: 10,\n        borderRadius: 12,\n        boxShadow: \"2px 2px 5px #ccc\"\n      };\n    case \"multi_choice\":\n      return {\n        background: \"#fef3c7\",\n        padding: 10,\n        borderRadius: 12,\n        boxShadow: \"2px 2px 5px #ccc\"\n      };\n    case \"gpt\":\n      return {\n        background: \"#e9d5ff\",\n        padding: 10,\n        borderRadius: 12,\n        boxShadow: \"2px 2px 5px #ccc\"\n      };\n    case \"end\":\n      return {\n        background: \"#fca5a5\",\n        padding: 10,\n        borderRadius: 12,\n        boxShadow: \"2px 2px 5px #ccc\"\n      };\n    default:\n      return {\n        background: \"#f3f4f6\",\n        padding: 10,\n        borderRadius: 12,\n        boxShadow: \"2px 2px 5px #ccc\"\n      };\n  }\n};\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [gptMode, setGptMode] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [history, setHistory] = useState([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are a helpful assistant.\",\n    gpt_model: \"gpt-4\"\n  });\n  const selectedNode = useMemo(() => nodes.find(n => n.id === selectedNodeId), [selectedNodeId, nodes]);\n  const pushToHistory = (newNodes, newEdges) => {\n    const updatedHistory = [...history.slice(0, historyIndex.current + 1), {\n      nodes: newNodes,\n      edges: newEdges\n    }];\n    setHistory(updatedHistory);\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      setNodes(history[historyIndex.current].nodes);\n      setEdges(history[historyIndex.current].edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.length - 1) {\n      historyIndex.current++;\n      setNodes(history[historyIndex.current].nodes);\n      setEdges(history[historyIndex.current].edges);\n    }\n  };\n  const getExportJSON = () => ({\n    settings: {\n      system_prompt: promptSettings.system_prompt,\n      gpt_model: promptSettings.gpt_model\n    },\n    nodes: Object.fromEntries(nodes.map(node => [node.id, node.data]))\n  });\n  const submitFlow = () => {\n    const flow = getExportJSON();\n    setSubmittedFlow(flow);\n    setCurrentNodeId(\"1\");\n    setChatHistory([{\n      sender: \"bot\",\n      message: flow.nodes[\"1\"].message\n    }]);\n    setChatbotReady(true);\n    setUserInputs({});\n    setGptMode(false);\n  };\n  const autoGeneratedEdges = []; // Required by ReactFlow, even if empty\n  const fetchGPTResponse = async (userMessage, summary) => {\n    const res = await fetch(\"http://localhost:5000/gpt\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user_message: userMessage,\n        summary,\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      })\n    });\n    const data = await res.json();\n    return data.reply;\n  };\n  const renderChatInput = () => {\n    const node = submittedFlow.nodes[currentNodeId];\n    if (!node || gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: async e => {\n          e.preventDefault();\n          if (!inputValue.trim()) return;\n          const newChat = [...chatHistory, {\n            sender: \"user\",\n            message: inputValue\n          }];\n          setChatHistory(newChat);\n          const summary = Object.entries(userInputs).map(([key, value]) => `${key}: ${value}`).join(\", \");\n          const reply = await fetchGPTResponse(inputValue, summary);\n          setChatHistory(prev => [...prev, {\n            sender: \"bot\",\n            message: reply\n          }]);\n          setInputValue(\"\");\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            width: \"100%\",\n            padding: \"8px\",\n            borderRadius: \"6px\",\n            border: \"1px solid #ccc\"\n          },\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          if (!inputValue.trim()) return;\n          const updatedInputs = {\n            ...userInputs,\n            [node.capture]: inputValue\n          };\n          setUserInputs(updatedInputs);\n          const newChat = [...chatHistory, {\n            sender: \"user\",\n            message: inputValue\n          }];\n          setChatHistory(newChat);\n          const nextId = node.next;\n          if (!nextId || !submittedFlow.nodes[nextId]) return;\n          setCurrentNodeId(nextId);\n          setChatHistory(prev => [...prev, {\n            sender: \"bot\",\n            message: submittedFlow.nodes[nextId].message\n          }]);\n          if (submittedFlow.nodes[nextId].type === \"gpt\") setGptMode(true);\n          setInputValue(\"\");\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            width: \"100%\",\n            padding: \"8px\",\n            borderRadius: \"6px\",\n            border: \"1px solid #ccc\"\n          },\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          placeholder: \"Type your answer...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          gap: \"6px\"\n        },\n        children: Object.entries(node.options).map(([label, target]) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const newChat = [...chatHistory, {\n              sender: \"user\",\n              message: label\n            }];\n            setChatHistory(newChat);\n            const nextId = target;\n            if (!nextId || !submittedFlow.nodes[nextId]) return;\n            setCurrentNodeId(nextId);\n            setChatHistory(prev => [...prev, {\n              sender: \"bot\",\n              message: submittedFlow.nodes[nextId].message\n            }]);\n            if (submittedFlow.nodes[nextId].type === \"gpt\") setGptMode(true);\n          },\n          style: {\n            padding: \"6px 10px\",\n            borderRadius: \"6px\",\n            border: \"1px solid #ccc\",\n            background: \"#f1f5f9\",\n            cursor: \"pointer\"\n          },\n          children: label\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            gap: \"6px\",\n            marginBottom: \"8px\"\n          },\n          children: Object.entries(node.options).map(([label]) => /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(label),\n              onChange: e => {\n                if (e.target.checked) {\n                  setMultiChoiceSelection(prev => [...prev, label]);\n                } else {\n                  setMultiChoiceSelection(prev => prev.filter(l => l !== label));\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this), label]\n          }, label, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const newChat = [...chatHistory, {\n              sender: \"user\",\n              message: multiChoiceSelection.join(\", \")\n            }];\n            setChatHistory(newChat);\n            const updatedInputs = {\n              ...userInputs,\n              [node.capture]: multiChoiceSelection\n            };\n            setUserInputs(updatedInputs);\n            const nextId = node.next;\n            if (!nextId || !submittedFlow.nodes[nextId]) return;\n            setCurrentNodeId(nextId);\n            setChatHistory(prev => [...prev, {\n              sender: \"bot\",\n              message: submittedFlow.nodes[nextId].message\n            }]);\n            if (submittedFlow.nodes[nextId].type === \"gpt\") setGptMode(true);\n            setMultiChoiceSelection([]);\n          },\n          style: {\n            marginTop: \"6px\",\n            padding: \"6px 12px\",\n            borderRadius: \"6px\",\n            background: \"#38abf8ff\",\n            color: \"white\",\n            border: \"none\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          padding: \"10px\",\n          margin: 0,\n          background: \"#f8fafc\",\n          borderBottom: \"1px solid #ccc\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          padding: \"10px\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          style: {\n            background: \"#fcd34d\",\n            border: \"none\",\n            padding: \"6px 12px\",\n            borderRadius: \"6px\"\n          },\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          style: {\n            background: \"#a5b4fc\",\n            border: \"none\",\n            padding: \"6px 12px\",\n            borderRadius: \"6px\"\n          },\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitFlow,\n          style: {\n            background: \"#34d399\",\n            border: \"none\",\n            padding: \"6px 12px\",\n            borderRadius: \"6px\"\n          },\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(node => ({\n          ...node,\n          style: getNodeStyle(node.data.type)\n        })),\n        edges: [...manualEdges, ...autoGeneratedEdges],\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => setEdges(eds => addEdge(params, eds)),\n        onNodeClick: (_, node) => setSelectedNodeId(node.id),\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: \"150px\",\n          left: \"10px\",\n          width: \"300px\",\n          background: \"#f1f5f9\",\n          padding: \"10px\",\n          borderRadius: \"8px\",\n          boxShadow: \"0 2px 5px rgba(0,0,0,0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Node Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"6px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const newNodes = nodes.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  message: e.target.value\n                }\n              } : node);\n              setNodes(newNodes);\n            },\n            style: {\n              width: \"100%\",\n              height: \"60px\",\n              resize: \"none\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"6px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const newNodes = nodes.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  type: e.target.value\n                }\n              } : node);\n              setNodes(newNodes);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"Choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"Input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"Multi Choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"GPT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"End\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: \"10px\",\n          left: \"10px\",\n          width: \"300px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(PromptSettings, {\n          promptSettings: promptSettings,\n          setPromptSettings: setPromptSettings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"400px\",\n        borderLeft: \"1px solid #ccc\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          padding: \"16px\",\n          background: \"#f9fafb\"\n        },\n        children: chatbotReady ? chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"12px\",\n            alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n            background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#e5e7eb\",\n            padding: \"10px\",\n            borderRadius: \"12px\",\n            maxWidth: \"75%\"\n          },\n          children: entry.message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"#6b7280\"\n          },\n          children: \"Submit the flow to start the chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"12px\",\n          borderTop: \"1px solid #ccc\",\n          background: \"#fff\"\n        },\n        children: chatbotReady && renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jIOzZNJDxb9EsbiGnW2WeHXdRjw=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","PromptSettings","jsxDEV","_jsxDEV","getNodeStyle","type","background","padding","borderRadius","boxShadow","initialNodes","id","data","message","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","submittedFlow","setSubmittedFlow","chatbotReady","setChatbotReady","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","gptMode","setGptMode","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","history","setHistory","edges","historyIndex","promptSettings","setPromptSettings","system_prompt","gpt_model","selectedNode","find","n","pushToHistory","newNodes","newEdges","updatedHistory","slice","current","undo","redo","length","getExportJSON","settings","Object","fromEntries","map","node","submitFlow","flow","sender","autoGeneratedEdges","fetchGPTResponse","userMessage","summary","res","fetch","method","headers","body","JSON","stringify","user_message","json","reply","renderChatInput","onSubmit","e","preventDefault","trim","newChat","entries","key","value","join","prev","children","style","width","border","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","updatedInputs","nextId","display","flexWrap","gap","label","onClick","cursor","marginBottom","alignItems","checked","includes","filter","l","marginTop","color","height","flex","margin","borderBottom","justifyContent","onConnect","params","eds","onNodeClick","_","fitView","bottom","left","resize","borderLeft","flexDirection","overflowY","entry","index","alignSelf","maxWidth","borderTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptSettings from \"./PromptSettings\";\n\nconst getNodeStyle = (type) => {\n  switch (type) {\n    case \"choice\":\n      return { background: \"#e0f2fe\", padding: 10, borderRadius: 12, boxShadow: \"2px 2px 5px #ccc\" };\n    case \"input\":\n      return { background: \"#dcfce7\", padding: 10, borderRadius: 12, boxShadow: \"2px 2px 5px #ccc\" };\n    case \"multi_choice\":\n      return { background: \"#fef3c7\", padding: 10, borderRadius: 12, boxShadow: \"2px 2px 5px #ccc\" };\n    case \"gpt\":\n      return { background: \"#e9d5ff\", padding: 10, borderRadius: 12, boxShadow: \"2px 2px 5px #ccc\" };\n    case \"end\":\n      return { background: \"#fca5a5\", padding: 10, borderRadius: 12, boxShadow: \"2px 2px 5px #ccc\" };\n    default:\n      return { background: \"#f3f4f6\", padding: 10, borderRadius: 12, boxShadow: \"2px 2px 5px #ccc\" };\n  }\n};\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [currentNodeId, setCurrentNodeId] = useState(\"1\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [gptMode, setGptMode] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [history, setHistory] = useState([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are a helpful assistant.\",\n    gpt_model: \"gpt-4\"\n  });\n\n  const selectedNode = useMemo(() => nodes.find((n) => n.id === selectedNodeId), [selectedNodeId, nodes]);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const updatedHistory = [...history.slice(0, historyIndex.current + 1), { nodes: newNodes, edges: newEdges }];\n    setHistory(updatedHistory);\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      setNodes(history[historyIndex.current].nodes);\n      setEdges(history[historyIndex.current].edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.length - 1) {\n      historyIndex.current++;\n      setNodes(history[historyIndex.current].nodes);\n      setEdges(history[historyIndex.current].edges);\n    }\n  };\n\n  const getExportJSON = () => ({\n    settings: {\n      system_prompt: promptSettings.system_prompt,\n      gpt_model: promptSettings.gpt_model\n    },\n    nodes: Object.fromEntries(\n      nodes.map((node) => [node.id, node.data])\n    )\n  });\n\n  const submitFlow = () => {\n    const flow = getExportJSON();\n    setSubmittedFlow(flow);\n    setCurrentNodeId(\"1\");\n    setChatHistory([\n      {\n        sender: \"bot\",\n        message: flow.nodes[\"1\"].message\n      }\n    ]);\n    setChatbotReady(true);\n    setUserInputs({});\n    setGptMode(false);\n  };\n\n  const autoGeneratedEdges = []; // Required by ReactFlow, even if empty\n  const fetchGPTResponse = async (userMessage, summary) => {\n    const res = await fetch(\"http://localhost:5000/gpt\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user_message: userMessage,\n        summary,\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      })\n    });\n    const data = await res.json();\n    return data.reply;\n  };\n\n  const renderChatInput = () => {\n    const node = submittedFlow.nodes[currentNodeId];\n    if (!node || gptMode) {\n      return (\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            if (!inputValue.trim()) return;\n            const newChat = [...chatHistory, { sender: \"user\", message: inputValue }];\n            setChatHistory(newChat);\n            const summary = Object.entries(userInputs)\n              .map(([key, value]) => `${key}: ${value}`)\n              .join(\", \");\n            const reply = await fetchGPTResponse(inputValue, summary);\n            setChatHistory((prev) => [...prev, { sender: \"bot\", message: reply }]);\n            setInputValue(\"\");\n          }}\n        >\n          <input\n            style={{\n              width: \"100%\",\n              padding: \"8px\",\n              borderRadius: \"6px\",\n              border: \"1px solid #ccc\"\n            }}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n        </form>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            if (!inputValue.trim()) return;\n            const updatedInputs = { ...userInputs, [node.capture]: inputValue };\n            setUserInputs(updatedInputs);\n            const newChat = [...chatHistory, { sender: \"user\", message: inputValue }];\n            setChatHistory(newChat);\n            const nextId = node.next;\n            if (!nextId || !submittedFlow.nodes[nextId]) return;\n            setCurrentNodeId(nextId);\n            setChatHistory((prev) => [...prev, { sender: \"bot\", message: submittedFlow.nodes[nextId].message }]);\n            if (submittedFlow.nodes[nextId].type === \"gpt\") setGptMode(true);\n            setInputValue(\"\");\n          }}\n        >\n          <input\n            style={{\n              width: \"100%\",\n              padding: \"8px\",\n              borderRadius: \"6px\",\n              border: \"1px solid #ccc\"\n            }}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Type your answer...\"\n          />\n        </form>\n      );\n    }\n\n    if (node.type === \"choice\") {\n      return (\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"6px\" }}>\n          {Object.entries(node.options).map(([label, target]) => (\n            <button\n              key={label}\n              onClick={() => {\n                const newChat = [...chatHistory, { sender: \"user\", message: label }];\n                setChatHistory(newChat);\n                const nextId = target;\n                if (!nextId || !submittedFlow.nodes[nextId]) return;\n                setCurrentNodeId(nextId);\n                setChatHistory((prev) => [...prev, { sender: \"bot\", message: submittedFlow.nodes[nextId].message }]);\n                if (submittedFlow.nodes[nextId].type === \"gpt\") setGptMode(true);\n              }}\n              style={{\n                padding: \"6px 10px\",\n                borderRadius: \"6px\",\n                border: \"1px solid #ccc\",\n                background: \"#f1f5f9\",\n                cursor: \"pointer\"\n              }}\n            >\n              {label}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"6px\", marginBottom: \"8px\" }}>\n            {Object.entries(node.options).map(([label]) => (\n              <label key={label} style={{ display: \"flex\", alignItems: \"center\", gap: 4 }}>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(label)}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      setMultiChoiceSelection((prev) => [...prev, label]);\n                    } else {\n                      setMultiChoiceSelection((prev) => prev.filter((l) => l !== label));\n                    }\n                  }}\n                />\n                {label}\n              </label>\n            ))}\n          </div>\n          <button\n            onClick={() => {\n              const newChat = [...chatHistory, { sender: \"user\", message: multiChoiceSelection.join(\", \") }];\n              setChatHistory(newChat);\n              const updatedInputs = { ...userInputs, [node.capture]: multiChoiceSelection };\n              setUserInputs(updatedInputs);\n              const nextId = node.next;\n              if (!nextId || !submittedFlow.nodes[nextId]) return;\n              setCurrentNodeId(nextId);\n              setChatHistory((prev) => [...prev, { sender: \"bot\", message: submittedFlow.nodes[nextId].message }]);\n              if (submittedFlow.nodes[nextId].type === \"gpt\") setGptMode(true);\n              setMultiChoiceSelection([]);\n            }}\n            style={{\n              marginTop: \"6px\",\n              padding: \"6px 12px\",\n              borderRadius: \"6px\",\n              background: \"#38abf8ff\",\n              color: \"white\",\n              border: \"none\",\n              cursor: \"pointer\"\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\" }}>\n      {/* Left Panel: Flow Editor + Node Editor + Prompt Settings */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <h2 style={{ padding: \"10px\", margin: 0, background: \"#f8fafc\", borderBottom: \"1px solid #ccc\" }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </h2>\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"10px\", gap: \"6px\" }}>\n          <button onClick={undo} style={{ background: \"#fcd34d\", border: \"none\", padding: \"6px 12px\", borderRadius: \"6px\" }}>Undo</button>\n          <button onClick={redo} style={{ background: \"#a5b4fc\", border: \"none\", padding: \"6px 12px\", borderRadius: \"6px\" }}>Redo</button>\n          <button onClick={submitFlow} style={{ background: \"#34d399\", border: \"none\", padding: \"6px 12px\", borderRadius: \"6px\" }}>Submit Flow</button>\n        </div>\n        <ReactFlow\n          nodes={nodes.map((node) => ({\n            ...node,\n            style: getNodeStyle(node.data.type)\n          }))}\n          edges={[...manualEdges, ...autoGeneratedEdges]}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => setEdges((eds) => addEdge(params, eds))}\n          onNodeClick={(_, node) => setSelectedNodeId(node.id)}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n\n        {/* Node Editor */}\n        {selectedNode && (\n          <div style={{ position: \"absolute\", bottom: \"150px\", left: \"10px\", width: \"300px\", background: \"#f1f5f9\", padding: \"10px\", borderRadius: \"8px\", boxShadow: \"0 2px 5px rgba(0,0,0,0.1)\" }}>\n            <h4>Node Editor</h4>\n            <div style={{ marginBottom: \"6px\" }}>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => {\n                  const newNodes = nodes.map((node) =>\n                    node.id === selectedNode.id\n                      ? { ...node, data: { ...node.data, message: e.target.value } }\n                      : node\n                  );\n                  setNodes(newNodes);\n                }}\n                style={{ width: \"100%\", height: \"60px\", resize: \"none\" }}\n              />\n            </div>\n            <div style={{ marginBottom: \"6px\" }}>\n              <label>Type:</label>\n              <select\n                value={selectedNode.data.type}\n                onChange={(e) => {\n                  const newNodes = nodes.map((node) =>\n                    node.id === selectedNode.id\n                      ? { ...node, data: { ...node.data, type: e.target.value } }\n                      : node\n                  );\n                  setNodes(newNodes);\n                }}\n              >\n                <option value=\"choice\">Choice</option>\n                <option value=\"input\">Input</option>\n                <option value=\"multi_choice\">Multi Choice</option>\n                <option value=\"gpt\">GPT</option>\n                <option value=\"end\">End</option>\n              </select>\n            </div>\n          </div>\n        )}\n\n        {/* Prompt Settings under Node Editor */}\n        <div style={{ position: \"absolute\", bottom: \"10px\", left: \"10px\", width: \"300px\" }}>\n          <PromptSettings promptSettings={promptSettings} setPromptSettings={setPromptSettings} />\n        </div>\n      </div>\n\n      {/* Right Panel: Chatbot */}\n      <div style={{ width: \"400px\", borderLeft: \"1px solid #ccc\", display: \"flex\", flexDirection: \"column\" }}>\n        <div style={{ flex: 1, overflowY: \"auto\", padding: \"16px\", background: \"#f9fafb\" }}>\n          {chatbotReady ? (\n            chatHistory.map((entry, index) => (\n              <div\n                key={index}\n                style={{\n                  marginBottom: \"12px\",\n                  alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                  background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#e5e7eb\",\n                  padding: \"10px\",\n                  borderRadius: \"12px\",\n                  maxWidth: \"75%\"\n                }}\n              >\n                {entry.message}\n              </div>\n            ))\n          ) : (\n            <p style={{ color: \"#6b7280\" }}>Submit the flow to start the chatbot</p>\n          )}\n        </div>\n        <div style={{ padding: \"12px\", borderTop: \"1px solid #ccc\", background: \"#fff\" }}>\n          {chatbotReady && renderChatInput()}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}