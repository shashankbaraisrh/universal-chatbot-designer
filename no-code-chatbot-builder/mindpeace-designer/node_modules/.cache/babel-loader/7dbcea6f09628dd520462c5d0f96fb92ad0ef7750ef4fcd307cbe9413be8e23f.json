{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType, ReactFlowProvider } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 200,\n    y: 100\n  },\n  type: \"default\"\n}];\nlet nodeCounter = 2;\nfunction FlowEditor() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = edges.find(e => e.id === selectedEdgeId);\n  const autoEdges = useMemo(() => {\n    const connected = new Set(edges.map(e => `${e.source}->${e.target}`));\n    return nodes.flatMap(node => {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !connected.has(`${node.id}->${target}`)) {\n        return [{\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          label: \"next\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          }\n        }];\n      }\n      return [];\n    });\n  }, [nodes, edges]);\n  const allEdges = [...edges, ...autoEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      label,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const yOffset = nodeCounter * 100;\n    const position = {\n      x: 200,\n      y: 100 + yOffset\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges(eds => eds.map(e => e.id === selectedEdge.id ? {\n      ...e,\n      label: newLabel\n    } : e));\n    setNodes(nds => nds.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    const validIds = new Set(nodes.map(n => n.id));\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const obj = {\n        message: data.message,\n        type: data.type\n      };\n      if (data.capture) obj.capture = data.capture;\n      if (data.next && validIds.has(data.next)) obj.next = data.next;\n      if (data.options && Object.keys(data.options).length > 0) {\n        const cleanOpts = {};\n        for (const [k, v] of Object.entries(data.options)) {\n          if (validIds.has(v)) cleanOpts[k] = v;\n        }\n        if (Object.keys(cleanOpts).length > 0) obj.options = cleanOpts;\n      }\n      output.nodes[id] = obj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"conversation_data.json\";\n    link.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen h-screen bg-gray-50\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      className: \"absolute top-4 left-4 z-10 bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700\",\n      children: \"\\u2795 Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportJSON,\n      className: \"absolute top-4 left-40 z-10 bg-green-600 text-white px-4 py-2 rounded shadow hover:bg-green-700\",\n      children: \"\\u2B07\\uFE0F Export JSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-20 left-4 z-10 bg-white p-4 w-80 rounded-xl shadow border border-gray-300 space-y-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold text-gray-800\",\n        children: [\"Editing Node \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: selectedNode.data.message,\n        onChange: e => updateNodeField(\"message\", e.target.value),\n        className: \"w-full p-2 border rounded\",\n        rows: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedNode.data.type,\n        onChange: e => updateNodeField(\"type\", e.target.value),\n        className: \"w-full p-2 border rounded\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"choice\",\n          children: \"choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"multi_choice\",\n          children: \"multi_choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt\",\n          children: \"gpt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"end\",\n          children: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.capture,\n        onChange: e => updateNodeField(\"capture\", e.target.value),\n        className: \"w-full p-2 border rounded\",\n        placeholder: \"Capture key (optional)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.next,\n        onChange: e => updateNodeField(\"next\", e.target.value),\n        className: \"w-full p-2 border rounded\",\n        placeholder: \"Next node ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-20 left-4 z-10 bg-white p-4 w-80 rounded-xl shadow border border-gray-300 space-y-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold text-gray-800\",\n        children: \"Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedEdge.label,\n        onChange: e => updateEdgeLabel(e.target.value),\n        className: \"w-full p-2 border rounded\",\n        placeholder: \"Option label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data,\n          label: n.data.message\n        }\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowEditor, \"A3wuzoeJsasqwif0Y8yDzXXO6fE=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = FlowEditor;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(FlowEditor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"FlowEditor\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","ReactFlowProvider","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","nodeCounter","FlowEditor","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","selectedNode","find","n","selectedEdge","e","autoEdges","connected","Set","map","source","target","flatMap","node","_node$data","has","label","style","strokeDasharray","stroke","markerEnd","ArrowClosed","allEdges","onConnect","params","prompt","edgeId","eds","nds","updated","addNode","newId","toString","yOffset","newNode","onNodeClick","_","onEdgeClick","edge","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","newOptions","exportJSON","output","settings","system_prompt","gpt_model","validIds","forEach","obj","Object","keys","length","cleanOpts","k","v","entries","blob","Blob","JSON","stringify","link","document","createElement","href","URL","createObjectURL","download","click","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","rows","placeholder","fitView","edgeLabelMode","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n  ReactFlowProvider\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 200, y: 100 },\n    type: \"default\"\n  }\n];\n\nlet nodeCounter = 2;\n\nfunction FlowEditor() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = edges.find((e) => e.id === selectedEdgeId);\n\n  const autoEdges = useMemo(() => {\n    const connected = new Set(edges.map((e) => `${e.source}->${e.target}`));\n    return nodes.flatMap((node) => {\n      const target = node.data?.next;\n      if (target && !connected.has(`${node.id}->${target}`)) {\n        return [{\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          label: \"next\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed }\n        }];\n      }\n      return [];\n    });\n  }, [nodes, edges]);\n\n  const allEdges = [...edges, ...autoEdges];\n\n  const onConnect = useCallback((params) => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges((eds) =>\n      addEdge({ ...params, id: edgeId, label, markerEnd: { type: MarkerType.ArrowClosed } }, eds)\n    );\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  }, [setEdges, setNodes]);\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const yOffset = nodeCounter * 100;\n    const position = { x: 200, y: 100 + yOffset };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNodeId\n          ? { ...node, data: { ...node.data, [field]: value } }\n          : node\n      )\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges((eds) =>\n      eds.map((e) => e.id === selectedEdge.id ? { ...e, label: newLabel } : e)\n    );\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === sourceId) {\n          const updated = { ...node };\n          if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = targetId;\n            updated.data.options = newOptions;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    const validIds = new Set(nodes.map(n => n.id));\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const obj = {\n        message: data.message,\n        type: data.type\n      };\n      if (data.capture) obj.capture = data.capture;\n      if (data.next && validIds.has(data.next)) obj.next = data.next;\n      if (data.options && Object.keys(data.options).length > 0) {\n        const cleanOpts = {};\n        for (const [k, v] of Object.entries(data.options)) {\n          if (validIds.has(v)) cleanOpts[k] = v;\n        }\n        if (Object.keys(cleanOpts).length > 0) obj.options = cleanOpts;\n      }\n      output.nodes[id] = obj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], { type: \"application/json\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"conversation_data.json\";\n    link.click();\n  };\n\n  return (\n    <div className=\"w-screen h-screen bg-gray-50\">\n      <button onClick={addNode} className=\"absolute top-4 left-4 z-10 bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700\">\n        ➕ Add Node\n      </button>\n      <button onClick={exportJSON} className=\"absolute top-4 left-40 z-10 bg-green-600 text-white px-4 py-2 rounded shadow hover:bg-green-700\">\n        ⬇️ Export JSON\n      </button>\n\n      {selectedNode && (\n        <div className=\"absolute top-20 left-4 z-10 bg-white p-4 w-80 rounded-xl shadow border border-gray-300 space-y-3\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">Editing Node {selectedNode.id}</h3>\n          <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} className=\"w-full p-2 border rounded\" rows={3} />\n          <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} className=\"w-full p-2 border rounded\">\n            <option value=\"choice\">choice</option>\n            <option value=\"input\">input</option>\n            <option value=\"multi_choice\">multi_choice</option>\n            <option value=\"gpt\">gpt</option>\n            <option value=\"end\">end</option>\n          </select>\n          <input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} className=\"w-full p-2 border rounded\" placeholder=\"Capture key (optional)\" />\n          <input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} className=\"w-full p-2 border rounded\" placeholder=\"Next node ID\" />\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div className=\"absolute top-20 left-4 z-10 bg-white p-4 w-80 rounded-xl shadow border border-gray-300 space-y-3\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">Editing Edge</h3>\n          <input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} className=\"w-full p-2 border rounded\" placeholder=\"Option label\" />\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message } }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ReactFlowProvider>\n      <FlowEditor />\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}