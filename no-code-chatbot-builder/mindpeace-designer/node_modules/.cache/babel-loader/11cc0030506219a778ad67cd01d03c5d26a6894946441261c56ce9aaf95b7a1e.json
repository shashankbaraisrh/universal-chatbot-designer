{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n// LocalStorage keys for multi-flow persistence\nconst FLOWS_KEY = \"mpFlows\"; // map: { [name]: { nodes, edges, promptSettings } }\nconst LAST_FLOW_KEY = \"mpLastFlow\"; // string: last opened flow name\n\nexport default function App() {\n  _s();\n  // Hard-disable page scrolling (no browser scrollbar at all)\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt Editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n\n  // Multi-flow management\n  const [flowName, setFlowName] = useState(\"\"); // current flow name ('' means unsaved)\n  const [allFlowNames, setAllFlowNames] = useState([]); // names available to load\n\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n\n  // ----- Shared card style (Node/Prompt/Edge) -----\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\"\n  };\n\n  // ===== LocalStorage helpers =====\n  const readAllFlows = () => {\n    try {\n      const raw = localStorage.getItem(FLOWS_KEY);\n      return raw ? JSON.parse(raw) : {};\n    } catch {\n      return {};\n    }\n  };\n  const writeAllFlows = flows => {\n    localStorage.setItem(FLOWS_KEY, JSON.stringify(flows));\n    setAllFlowNames(Object.keys(flows).sort());\n  };\n  const setLastFlow = name => {\n    if (name) localStorage.setItem(LAST_FLOW_KEY, name);else localStorage.removeItem(LAST_FLOW_KEY);\n  };\n  const getLastFlow = () => localStorage.getItem(LAST_FLOW_KEY) || \"\";\n\n  // On first mount: load last opened flow if exists; otherwise fresh canvas\n  useEffect(() => {\n    const flows = readAllFlows();\n    setAllFlowNames(Object.keys(flows).sort());\n    const last = getLastFlow();\n    if (last && flows[last]) {\n      // Load last flow\n      const f = flows[last];\n      setNodes(f.nodes || initialNodes);\n      setEdges(f.edges || initialEdges);\n      setPromptSettings(f.promptSettings || {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      });\n      setFlowName(last);\n      // Reset working states\n      setChatbotReady(false);\n      setSubmittedFlow(null);\n      setCurrentNodeId(null);\n      setGptMode(false);\n      setChatHistory([]);\n      setUserInputs({});\n      history.current = [{\n        nodes: f.nodes || initialNodes,\n        edges: f.edges || initialEdges\n      }];\n      historyIndex.current = 0;\n    } else {\n      // Fresh start\n      setNodes(initialNodes);\n      setEdges(initialEdges);\n      setFlowName(\"\");\n      history.current = [{\n        nodes: initialNodes,\n        edges: initialEdges\n      }];\n      historyIndex.current = 0;\n    }\n  }, [setNodes, setEdges]);\n\n  // ===== Flow actions: Save, Save As, Load, New =====\n  const saveFlow = () => {\n    const name = flowName && flowName.trim();\n    if (!name) {\n      // If no current name, behave like \"Save As\"\n      return saveFlowAs();\n    }\n    const flows = readAllFlows();\n    flows[name] = {\n      nodes,\n      edges: manualEdges,\n      promptSettings\n    };\n    writeAllFlows(flows);\n    setLastFlow(name);\n    alert(`Saved flow: ${name}`);\n  };\n  const saveFlowAs = () => {\n    const name = prompt(\"Enter a name for this flow:\", flowName || \"My Flow\");\n    if (!name) return;\n    const safe = name.trim();\n    const flows = readAllFlows();\n    flows[safe] = {\n      nodes,\n      edges: manualEdges,\n      promptSettings\n    };\n    writeAllFlows(flows);\n    setFlowName(safe);\n    setLastFlow(safe);\n    alert(`Saved as: ${safe}`);\n  };\n  const loadFlow = name => {\n    if (!name) return;\n    const flows = readAllFlows();\n    const f = flows[name];\n    if (!f) {\n      alert(\"Flow not found.\");\n      return;\n    }\n    setNodes(f.nodes || initialNodes);\n    setEdges(f.edges || initialEdges);\n    setPromptSettings(f.promptSettings || promptSettings);\n    setFlowName(name);\n    setLastFlow(name);\n    // Reset working states\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    history.current = [{\n      nodes: f.nodes || initialNodes,\n      edges: f.edges || initialEdges\n    }];\n    historyIndex.current = 0;\n  };\n  const newFlow = () => {\n    if (!confirm(\"Start a new flow? Unsaved changes will be lost.\")) return;\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n    setPromptSettings({\n      system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    });\n    setFlowName(\"\");\n    setLastFlow(\"\");\n    // Reset working states\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    history.current = [{\n      nodes: initialNodes,\n      edges: initialEdges\n    }];\n    historyIndex.current = 0;\n  };\n\n  // ===== Undo/Redo history =====\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(({\n      id,\n      data\n    }) => {\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else {\n        alert(\"Submission failed.\");\n      }\n    } catch {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"40px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\",\n            cursor: \"pointer\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8\n        },\n        children: opts.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            padding: \"8px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\",\n            cursor: \"pointer\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"40px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Clean references when edges are removed\n  const handleEdgesChange = changes => {\n    const removedIds = new Set(changes.filter(c => c.type === \"remove\" && c.id).map(c => c.id));\n    const removedEdges = manualEdges.filter(e => removedIds.has(e.id));\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n    const updatedNodes = nodes.map(n => {\n      let data = {\n        ...n.data\n      };\n      let mutated = false;\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = {\n              ...data.options\n            };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = {\n              ...data.options\n            };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n      return mutated ? {\n        ...n,\n        data\n      } : n;\n    });\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter(e => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n      overflow: \"hidden\",\n      overscrollBehavior: \"contain\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          height: 64,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          padding: \"0 12px\",\n          background: \"#ffffffcc\",\n          backdropFilter: \"blur(6px)\",\n          borderBottom: \"1px solid #e5e7eb\",\n          zIndex: 12,\n          boxSizing: \"border-box\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            gap: 10,\n            padding: \"10px 14px\",\n            background: \"#fff\",\n            borderRadius: 12,\n            border: \"1px solid #e5e7eb\",\n            boxShadow: \"0 6px 14px rgba(0,0,0,0.08)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: 10,\n              height: 10,\n              borderRadius: \"50%\",\n              background: \"#0284c7\",\n              boxShadow: \"0 0 0 3px rgba(2,132,199,0.15)\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontWeight: 700,\n              color: \"#0f172a\"\n            },\n            children: \"Your AI Chatbot Designer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: 10,\n              color: \"#64748b\",\n              fontWeight: 600\n            },\n            children: flowName ? `— ${flowName}` : \"— (Unsaved Flow)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#38bdf8\"),\n            onClick: () => {\n              const newId = nodeCounter.toString();\n              nodeCounter++;\n              const position = selectedNodeId ? {\n                x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n                y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n              } : {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              };\n              const newNode = {\n                id: newId,\n                data: {\n                  message: `This is node ${newId}`,\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position,\n                type: \"default\"\n              };\n              const updatedNodes = [...nodes, newNode];\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            children: \"Add Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#ef4444\"),\n            onClick: () => {\n              if (!selectedNodeId) return;\n              const deletedId = selectedNodeId;\n              const updatedNodesBase = nodes.filter(n => n.id !== deletedId);\n              const updatedEdges = manualEdges.filter(e => e.source !== deletedId && e.target !== deletedId);\n              const updatedNodes = updatedNodesBase.map(n => {\n                const data = {\n                  ...n.data\n                };\n                let mutated = false;\n                if (data.next === deletedId) {\n                  data.next = \"\";\n                  mutated = true;\n                }\n                if (data.options && Object.keys(data.options).length) {\n                  const opts = {\n                    ...data.options\n                  };\n                  for (const [k, v] of Object.entries(opts)) {\n                    if (v === deletedId) delete opts[k];\n                  }\n                  if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                    data.options = opts;\n                    mutated = true;\n                  }\n                }\n                return mutated ? {\n                  ...n,\n                  data\n                } : n;\n              });\n              setNodes(updatedNodes);\n              setEdges(updatedEdges);\n              setSelectedNodeId(null);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            children: \"Delete Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#10b981\"),\n            onClick: submitFlow,\n            children: \"Submit Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10,\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: flowName || \"\",\n            onChange: e => loadFlow(e.target.value),\n            style: {\n              border: \"1px solid #e5e7eb\",\n              borderRadius: 6,\n              padding: \"6px 8px\",\n              background: \"#fff\",\n              minWidth: 160\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Load saved flow\\u2026\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 15\n            }, this), allFlowNames.map(n => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: n,\n              children: n\n            }, n, false, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 806,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#0ea5e9\"),\n            onClick: saveFlow,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#2563eb\"),\n            onClick: saveFlowAs,\n            children: \"Save As\\u2026\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#64748b\"),\n            onClick: newFlow,\n            children: \"New Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 833,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#a855f7\"),\n            onClick: undo,\n            children: \"Undo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#f59e0b\"),\n            onClick: redo,\n            children: \"Redo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 76,\n          left: 10,\n          bottom: 10,\n          width: 350,\n          boxSizing: \"border-box\",\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 28,\n          paddingLeft: 4,\n          scrollbarGutter: \"stable both-edges\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n          zIndex: 11\n        },\n        children: [selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: [\"Editing Node: \", selectedNode.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  message: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const newType = e.target.value;\n              const updatedNodes = nodes.map(node => {\n                if (node.id !== selectedNodeId) return node;\n                const nd = {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    type: newType\n                  }\n                };\n                if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                  nd.data.options = {};\n                }\n                return nd;\n              });\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 903,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 907,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  capture: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 908,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  next: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 923,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PromptEditor, {\n          promptSettings: promptSettings,\n          setPromptSettings: setPromptSettings,\n          containerStyle: cardStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 11\n        }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: \"Editing Edge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 948,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedEdge.label,\n            onChange: e => {\n              const newLabel = e.target.value;\n              const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n                ...edge,\n                label: newLabel\n              } : edge);\n              const sourceId = selectedEdge.source;\n              const targetId = selectedEdge.target;\n              const updatedNodes = nodes.map(node => {\n                if (node.id === sourceId) {\n                  const updated = {\n                    ...node\n                  };\n                  if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                    const newOptions = {\n                      ...updated.data.options\n                    };\n                    delete newOptions[selectedEdge.label];\n                    newOptions[newLabel] = targetId;\n                    updated.data.options = newOptions;\n                  } else {\n                    updated.data.next = targetId;\n                  }\n                  return updated;\n                }\n                return node;\n              });\n              setEdges(updatedEdges);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 947,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: handleEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1032,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 986,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 320,\n        margin: 10,\n        padding: 12,\n        background: \"#fff7ed\",\n        border: \"1px solid #f59e0b\",\n        borderRadius: 10,\n        boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"calc(100vh - 20px)\",\n        boxSizing: \"border-box\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 8,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1063,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: {\n            background: \"#6366f1\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"6px\",\n            padding: \"4px 8px\",\n            fontSize: \"12px\",\n            cursor: \"pointer\"\n          },\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 6,\n          paddingLeft: 2,\n          paddingTop: 2,\n          background: \"transparent\",\n          borderRadius: 8\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 8\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\",\n              boxSizing: \"border-box\",\n              overflowWrap: \"anywhere\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1110,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            opacity: 0.8\n          },\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1127,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0,\n          paddingTop: 8,\n          background: \"transparent\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 664,\n    columnNumber: 5\n  }, this);\n}\n\n/* helper styles */\n_s(App, \"VadN9koLKU++Q5VrNCUEdUNECX0=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nfunction btn(bg) {\n  return {\n    background: bg,\n    color: \"white\",\n    borderRadius: 6,\n    padding: \"6px 12px\",\n    border: \"none\",\n    cursor: \"pointer\"\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","useEffect","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","PromptEditor","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","FLOWS_KEY","LAST_FLOW_KEY","App","_s","prevHtmlOverflow","document","documentElement","style","overflow","prevBodyOverflow","body","prevBodyMargin","margin","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","promptSettings","setPromptSettings","system_prompt","gpt_model","flowName","setFlowName","allFlowNames","setAllFlowNames","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","cardStyle","background","padding","border","borderRadius","width","boxSizing","marginRight","boxShadow","readAllFlows","raw","localStorage","getItem","JSON","parse","writeAllFlows","flows","setItem","stringify","Object","keys","sort","setLastFlow","name","removeItem","getLastFlow","last","f","current","saveFlow","trim","saveFlowAs","alert","prompt","safe","loadFlow","newFlow","confirm","pushToHistory","newNodes","newEdges","currentState","newHistory","slice","push","undo","redo","length","getNodeStyle","baseStyle","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","color","autoGeneratedEdges","existing","Set","map","source","target","autoEdges","node","_node$data","has","animated","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","forEach","nodeObj","submitFlow","payload","res","fetch","method","headers","ok","_payload$nodes$","firstMsg","sender","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","user_inputs","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","cursor","opts","flexDirection","opt","checked","includes","filter","o","join","marginTop","handleEdgesChange","changes","removedIds","c","removedEdges","updatedNodes","mutated","k","v","entries","remainingEdges","overscrollBehavior","top","left","right","alignItems","justifyContent","backdropFilter","borderBottom","zIndex","fontWeight","marginLeft","btn","newId","toString","Math","random","newNode","deletedId","updatedNodesBase","updatedEdges","disabled","bottom","overflowY","overflowX","paddingRight","paddingLeft","scrollbarGutter","newType","nd","containerStyle","newLabel","edge","sourceId","targetId","updated","newOptions","onConnect","params","edgeId","onNodeClick","_","onEdgeClick","fitView","edgeLabelMode","marginBottom","flexShrink","textContent","blob","Blob","url","URL","createObjectURL","link","createElement","href","download","appendChild","click","removeChild","fontSize","paddingTop","index","alignSelf","overflowWrap","opacity","_c","bg","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\",\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\",\n  },\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n// LocalStorage keys for multi-flow persistence\nconst FLOWS_KEY = \"mpFlows\";         // map: { [name]: { nodes, edges, promptSettings } }\nconst LAST_FLOW_KEY = \"mpLastFlow\";  // string: last opened flow name\n\nexport default function App() {\n  // Hard-disable page scrolling (no browser scrollbar at all)\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt Editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\",\n  });\n\n  // Multi-flow management\n  const [flowName, setFlowName] = useState(\"\");         // current flow name ('' means unsaved)\n  const [allFlowNames, setAllFlowNames] = useState([]); // names available to load\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  // ----- Shared card style (Node/Prompt/Edge) -----\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n  };\n\n  // ===== LocalStorage helpers =====\n  const readAllFlows = () => {\n    try {\n      const raw = localStorage.getItem(FLOWS_KEY);\n      return raw ? JSON.parse(raw) : {};\n    } catch {\n      return {};\n    }\n  };\n\n  const writeAllFlows = (flows) => {\n    localStorage.setItem(FLOWS_KEY, JSON.stringify(flows));\n    setAllFlowNames(Object.keys(flows).sort());\n  };\n\n  const setLastFlow = (name) => {\n    if (name) localStorage.setItem(LAST_FLOW_KEY, name);\n    else localStorage.removeItem(LAST_FLOW_KEY);\n  };\n\n  const getLastFlow = () => localStorage.getItem(LAST_FLOW_KEY) || \"\";\n\n  // On first mount: load last opened flow if exists; otherwise fresh canvas\n  useEffect(() => {\n    const flows = readAllFlows();\n    setAllFlowNames(Object.keys(flows).sort());\n\n    const last = getLastFlow();\n    if (last && flows[last]) {\n      // Load last flow\n      const f = flows[last];\n      setNodes(f.nodes || initialNodes);\n      setEdges(f.edges || initialEdges);\n      setPromptSettings(f.promptSettings || {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\",\n      });\n      setFlowName(last);\n      // Reset working states\n      setChatbotReady(false);\n      setSubmittedFlow(null);\n      setCurrentNodeId(null);\n      setGptMode(false);\n      setChatHistory([]);\n      setUserInputs({});\n      history.current = [{ nodes: f.nodes || initialNodes, edges: f.edges || initialEdges }];\n      historyIndex.current = 0;\n    } else {\n      // Fresh start\n      setNodes(initialNodes);\n      setEdges(initialEdges);\n      setFlowName(\"\");\n      history.current = [{ nodes: initialNodes, edges: initialEdges }];\n      historyIndex.current = 0;\n    }\n  }, [setNodes, setEdges]);\n\n  // ===== Flow actions: Save, Save As, Load, New =====\n  const saveFlow = () => {\n    const name = flowName && flowName.trim();\n    if (!name) {\n      // If no current name, behave like \"Save As\"\n      return saveFlowAs();\n    }\n    const flows = readAllFlows();\n    flows[name] = {\n      nodes,\n      edges: manualEdges,\n      promptSettings,\n    };\n    writeAllFlows(flows);\n    setLastFlow(name);\n    alert(`Saved flow: ${name}`);\n  };\n\n  const saveFlowAs = () => {\n    const name = prompt(\"Enter a name for this flow:\", flowName || \"My Flow\");\n    if (!name) return;\n    const safe = name.trim();\n    const flows = readAllFlows();\n    flows[safe] = {\n      nodes,\n      edges: manualEdges,\n      promptSettings,\n    };\n    writeAllFlows(flows);\n    setFlowName(safe);\n    setLastFlow(safe);\n    alert(`Saved as: ${safe}`);\n  };\n\n  const loadFlow = (name) => {\n    if (!name) return;\n    const flows = readAllFlows();\n    const f = flows[name];\n    if (!f) {\n      alert(\"Flow not found.\");\n      return;\n    }\n    setNodes(f.nodes || initialNodes);\n    setEdges(f.edges || initialEdges);\n    setPromptSettings(f.promptSettings || promptSettings);\n    setFlowName(name);\n    setLastFlow(name);\n    // Reset working states\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    history.current = [{ nodes: f.nodes || initialNodes, edges: f.edges || initialEdges }];\n    historyIndex.current = 0;\n  };\n\n  const newFlow = () => {\n    if (!confirm(\"Start a new flow? Unsaved changes will be lost.\")) return;\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n    setPromptSettings({\n      system_prompt:\n        \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n      gpt_model: \"gpt-3.5-turbo\",\n    });\n    setFlowName(\"\");\n    setLastFlow(\"\");\n    // Reset working states\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    history.current = [{ nodes: initialNodes, edges: initialEdges }];\n    historyIndex.current = 0;\n  };\n\n  // ===== Undo/Redo history =====\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300,\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\",\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model,\n      },\n      nodes: {},\n    };\n    nodes.forEach(({ id, data }) => {\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else {\n        alert(\"Submission failed.\");\n      }\n    } catch {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message,\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #f59e0b\",\n              background: \"#fff7ed\",\n              height: \"40px\",\n              boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n              cursor: \"pointer\",\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n          {opts.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => handleUserResponse(opt)}\n              style={{\n                padding: \"8px\",\n                width: \"100%\",\n                borderRadius: 6,\n                border: \"1px solid #0369a1\",\n                background: \"#0284c7\",\n                color: \"white\",\n                cursor: \"pointer\",\n              }}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div\n              key={opt}\n              style={{\n                background: \"#facc15\",\n                padding: \"4px 8px\",\n                borderRadius: \"4px\",\n                margin: \"4px 0\",\n              }}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\",\n              cursor: \"pointer\",\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #f59e0b\",\n              background: \"#fff7ed\",\n              height: \"40px\",\n              boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n              cursor: \"pointer\",\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // Clean references when edges are removed\n  const handleEdgesChange = (changes) => {\n    const removedIds = new Set(\n      changes.filter((c) => c.type === \"remove\" && c.id).map((c) => c.id)\n    );\n    const removedEdges = manualEdges.filter((e) => removedIds.has(e.id));\n\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n\n    const updatedNodes = nodes.map((n) => {\n      let data = { ...n.data };\n      let mutated = false;\n\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = { ...data.options };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = { ...data.options };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n\n      return mutated ? { ...n, data } : n;\n    });\n\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter((e) => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        overflow: \"hidden\",\n        overscrollBehavior: \"contain\",\n      }}\n    >\n      {/* Left workspace */}\n      <div style={{ flex: 1, position: \"relative\", overflow: \"hidden\" }}>\n        {/* Header BAR with title box + actions */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            padding: \"0 12px\",\n            background: \"#ffffffcc\",\n            backdropFilter: \"blur(6px)\",\n            borderBottom: \"1px solid #e5e7eb\",\n            zIndex: 12,\n            boxSizing: \"border-box\",\n          }}\n        >\n          {/* Title with current flow name */}\n          <div\n            style={{\n              display: \"inline-flex\",\n              alignItems: \"center\",\n              gap: 10,\n              padding: \"10px 14px\",\n              background: \"#fff\",\n              borderRadius: 12,\n              border: \"1px solid #e5e7eb\",\n              boxShadow: \"0 6px 14px rgba(0,0,0,0.08)\",\n            }}\n          >\n            <div\n              style={{\n                width: 10,\n                height: 10,\n                borderRadius: \"50%\",\n                background: \"#0284c7\",\n                boxShadow: \"0 0 0 3px rgba(2,132,199,0.15)\",\n              }}\n            />\n            <div style={{ fontWeight: 700, color: \"#0f172a\" }}>\n              Your AI Chatbot Designer\n            </div>\n            <div style={{ marginLeft: 10, color: \"#64748b\", fontWeight: 600 }}>\n              {flowName ? `— ${flowName}` : \"— (Unsaved Flow)\"}\n            </div>\n          </div>\n\n          {/* Main actions (design) */}\n          <div style={{ display: \"flex\", gap: 10 }}>\n            <button\n              style={btn(\"#38bdf8\")}\n              onClick={() => {\n                const newId = nodeCounter.toString();\n                nodeCounter++;\n                const position = selectedNodeId\n                  ? {\n                      x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                      y: nodes.find((n) => n.id === selectedNodeId).position.y + 50,\n                    }\n                  : { x: Math.random() * 400, y: Math.random() * 400 };\n                const newNode = {\n                  id: newId,\n                  data: {\n                    message: `This is node ${newId}`,\n                    type: \"choice\",\n                    options: {},\n                    capture: \"\",\n                    next: \"\",\n                  },\n                  position,\n                  type: \"default\",\n                };\n                const updatedNodes = [...nodes, newNode];\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }}\n            >\n              Add Node\n            </button>\n\n            <button\n              style={btn(\"#ef4444\")}\n              onClick={() => {\n                if (!selectedNodeId) return;\n\n                const deletedId = selectedNodeId;\n\n                const updatedNodesBase = nodes.filter((n) => n.id !== deletedId);\n                const updatedEdges = manualEdges.filter(\n                  (e) => e.source !== deletedId && e.target !== deletedId\n                );\n\n                const updatedNodes = updatedNodesBase.map((n) => {\n                  const data = { ...n.data };\n                  let mutated = false;\n\n                  if (data.next === deletedId) {\n                    data.next = \"\";\n                    mutated = true;\n                  }\n                  if (data.options && Object.keys(data.options).length) {\n                    const opts = { ...data.options };\n                    for (const [k, v] of Object.entries(opts)) {\n                      if (v === deletedId) delete opts[k];\n                    }\n                    if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                      data.options = opts;\n                      mutated = true;\n                    }\n                  }\n                  return mutated ? { ...n, data } : n;\n                });\n\n                setNodes(updatedNodes);\n                setEdges(updatedEdges);\n                setSelectedNodeId(null);\n                pushToHistory(updatedNodes, updatedEdges);\n              }}\n            >\n              Delete Node\n            </button>\n\n            <button style={btn(\"#10b981\")} onClick={submitFlow}>\n              Submit Flow\n            </button>\n          </div>\n\n          {/* Flow management: Save / Save As / Load / New */}\n          <div style={{ display: \"flex\", gap: 10, alignItems: \"center\" }}>\n            <select\n              value={flowName || \"\"}\n              onChange={(e) => loadFlow(e.target.value)}\n              style={{\n                border: \"1px solid #e5e7eb\",\n                borderRadius: 6,\n                padding: \"6px 8px\",\n                background: \"#fff\",\n                minWidth: 160,\n              }}\n            >\n              <option value=\"\" disabled>\n                Load saved flow…\n              </option>\n              {allFlowNames.map((n) => (\n                <option key={n} value={n}>\n                  {n}\n                </option>\n              ))}\n            </select>\n\n            <button style={btn(\"#0ea5e9\")} onClick={saveFlow}>\n              Save\n            </button>\n            <button style={btn(\"#2563eb\")} onClick={saveFlowAs}>\n              Save As…\n            </button>\n            <button style={btn(\"#64748b\")} onClick={newFlow}>\n              New Flow\n            </button>\n\n            <button style={btn(\"#a855f7\")} onClick={undo}>\n              Undo\n            </button>\n            <button style={btn(\"#f59e0b\")} onClick={redo}>\n              Redo\n            </button>\n          </div>\n        </div>\n\n        {/* Inspector column */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 76,\n            left: 10,\n            bottom: 10,\n            width: 350,\n            boxSizing: \"border-box\",\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 28,\n            paddingLeft: 4,\n            scrollbarGutter: \"stable both-edges\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 12,\n            zIndex: 11,\n          }}\n        >\n          {selectedNode && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Node: {selectedNode.id}</h4>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, message: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\", height: 60 }}\n              />\n              <label>Type:</label>\n              <select\n                value={selectedNode.data.type}\n                onChange={(e) => {\n                  const newType = e.target.value;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id !== selectedNodeId) return node;\n                    const nd = { ...node, data: { ...node.data, type: newType } };\n                    if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                      nd.data.options = {};\n                    }\n                    return nd;\n                  });\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              >\n                <option value=\"choice\">choice</option>\n                <option value=\"input\">input</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n              <label>Capture Field:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.capture}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, capture: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n              <label>Next Node ID:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.next}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, next: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n\n          <PromptEditor\n            promptSettings={promptSettings}\n            setPromptSettings={setPromptSettings}\n            containerStyle={cardStyle}\n          />\n\n          {selectedEdge && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Edge</h4>\n              <label>Option Label:</label>\n              <input\n                type=\"text\"\n                value={selectedEdge.label}\n                onChange={(e) => {\n                  const newLabel = e.target.value;\n                  const updatedEdges = manualEdges.map((edge) =>\n                    edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n                  );\n                  const sourceId = selectedEdge.source;\n                  const targetId = selectedEdge.target;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id === sourceId) {\n                      const updated = { ...node };\n                      if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                        const newOptions = { ...updated.data.options };\n                        delete newOptions[selectedEdge.label];\n                        newOptions[newLabel] = targetId;\n                        updated.data.options = newOptions;\n                      } else {\n                        updated.data.next = targetId;\n                      }\n                      return updated;\n                    }\n                    return node;\n                  });\n                  setEdges(updatedEdges);\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, updatedEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Flow canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type),\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={handleEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge(\n              { ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label },\n              manualEdges\n            );\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel — single color, only vertical scroll inside messages */}\n      <div\n        style={{\n          width: 320,\n          margin: 10,\n          padding: 12,\n          background: \"#fff7ed\",\n          border: \"1px solid #f59e0b\",\n          borderRadius: 10,\n          boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"calc(100vh - 20px)\",\n          boxSizing: \"border-box\",\n          overflow: \"hidden\",\n        }}\n      >\n        <div\n          style={{\n            fontWeight: \"bold\",\n            marginBottom: 8,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            flexShrink: 0,\n          }}\n        >\n          <span>MindPeace Chat</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"chat_history.txt\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n              style={{\n                background: \"#6366f1\",\n                color: \"white\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                padding: \"4px 8px\",\n                fontSize: \"12px\",\n                cursor: \"pointer\",\n              }}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        {/* messages area — ONLY this scrolls vertically */}\n        <div\n          style={{\n            flex: 1,\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 6,\n            paddingLeft: 2,\n            paddingTop: 2,\n            background: \"transparent\",\n            borderRadius: 8,\n          }}\n        >\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n              {chatHistory.map((entry, index) => (\n                <div\n                  key={index}\n                  style={{\n                    alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                    background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n                    padding: 8,\n                    borderRadius: 6,\n                    maxWidth: \"90%\",\n                    boxSizing: \"border-box\",\n                    overflowWrap: \"anywhere\",\n                  }}\n                >\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div style={{ opacity: 0.8 }}>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {/* input area */}\n        {chatbotReady && (\n          <div style={{ flexShrink: 0, paddingTop: 8, background: \"transparent\" }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/* helper styles */\nfunction btn(bg) {\n  return {\n    background: bg,\n    color: \"white\",\n    borderRadius: 6,\n    padding: \"6px 12px\",\n    border: \"none\",\n    cursor: \"pointer\",\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}