{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gptMode, setGptMode] = useState(false);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow || !currentNodeId && !gptMode) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\"),\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setInputValue(\"\");\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setInputValue(\"\");\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n        setInputValue(\"\");\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value),\n      onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n      placeholder: \"Type your message...\",\n      style: {\n        width: \"100%\",\n        padding: 8,\n        marginBottom: 8,\n        borderRadius: 6,\n        border: \"1px solid #ccc\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleUserResponse(inputValue),\n      style: {\n        width: \"100%\",\n        background: \"#38bdf8\",\n        color: \"white\",\n        borderRadius: 6,\n        padding: \"8px 12px\",\n        border: \"none\"\n      },\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n\n  // --- CONTINUED BELOW DUE TO LENGTH ---  \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      fontFamily: \"Segoe UI, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"10px 0\",\n          background: \"#f1f5f9\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 10,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: 8\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          style: {\n            background: \"#facc15\",\n            border: \"none\",\n            padding: 8,\n            borderRadius: 4\n          },\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          style: {\n            background: \"#4ade80\",\n            border: \"none\",\n            padding: 8,\n            borderRadius: 4\n          },\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(node => {\n          var _node$data2;\n          return {\n            ...node,\n            style: getNodeStyle((_node$data2 = node.data) === null || _node$data2 === void 0 ? void 0 : _node$data2.type)\n          };\n        }),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: 10,\n          left: 10,\n          display: \"flex\",\n          gap: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const id = String(nodeCounter++);\n            const newNode = {\n              id,\n              data: {\n                message: \"New node\",\n                type: \"choice\",\n                options: {},\n                capture: \"\",\n                next: \"\"\n              },\n              position: {\n                x: 250,\n                y: 50 * nodeCounter\n              },\n              type: \"default\"\n            };\n            const newNodes = [...nodes, newNode];\n            setNodes(newNodes);\n            pushToHistory(newNodes, manualEdges);\n          },\n          style: {\n            background: \"#60a5fa\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            border: \"none\",\n            borderRadius: 6\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (!selectedNodeId) return alert(\"Select a node to delete.\");\n            const newNodes = nodes.filter(n => n.id !== selectedNodeId);\n            const newEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n            setNodes(newNodes);\n            setEdges(newEdges);\n            setSelectedNodeId(null);\n            pushToHistory(newNodes, newEdges);\n          },\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            border: \"none\",\n            borderRadius: 6\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const exported = getExportJSON();\n            const blob = new Blob([JSON.stringify(exported, null, 2)], {\n              type: \"application/json\"\n            });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"conversation_flow.json\";\n            a.click();\n          },\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            border: \"none\",\n            borderRadius: 6\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitFlow,\n          style: {\n            background: \"#6366f1\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            border: \"none\",\n            borderRadius: 6\n          },\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"350px\",\n        borderLeft: \"1px solid #ddd\",\n        background: \"#f8fafc\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 12,\n          fontWeight: \"bold\",\n          background: \"#1e3a8a\",\n          color: \"white\"\n        },\n        children: \"\\uD83D\\uDCAC MindPeace Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 10,\n          flex: 1,\n          overflowY: \"auto\"\n        },\n        children: chatHistory.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 8,\n            alignSelf: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n            backgroundColor: msg.sender === \"user\" ? \"#d1fae5\" : \"#e0f2fe\",\n            padding: 10,\n            borderRadius: 12,\n            maxWidth: \"80%\"\n          },\n          children: msg.message\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 10,\n          borderTop: \"1px solid #ccc\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HZ85d2WT/kJJqaMcWYb4cvGwDAE=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","gptMode","setGptMode","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","summary","entries","k","v","join","json","gptReply","reply","currentNode","newInputs","nextId","nextNode","summaryText","renderChatInput","children","value","onChange","onKeyDown","key","placeholder","width","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","color","display","height","flex","textAlign","top","right","zIndex","gap","_node$data2","fitView","bottom","left","String","newNode","filter","exported","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","borderLeft","flexDirection","justifyContent","fontWeight","overflowY","msg","idx","alignSelf","backgroundColor","borderTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gptMode, setGptMode] = useState(false);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return;\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\"),\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, { sender: \"bot\", message: gptReply }]);\n        setInputValue(\"\");\n      } catch (err) {\n        setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n        setInputValue(\"\");\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n        setInputValue(\"\");\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => (\n    <div>\n      <input\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n        onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)}\n        placeholder=\"Type your message...\"\n        style={{\n          width: \"100%\",\n          padding: 8,\n          marginBottom: 8,\n          borderRadius: 6,\n          border: \"1px solid #ccc\"\n        }}\n      />\n      <button\n        onClick={() => handleUserResponse(inputValue)}\n        style={{\n          width: \"100%\",\n          background: \"#38bdf8\",\n          color: \"white\",\n          borderRadius: 6,\n          padding: \"8px 12px\",\n          border: \"none\"\n        }}\n      >\n        Send\n      </button>\n    </div>\n  );\n\n  // --- CONTINUED BELOW DUE TO LENGTH ---  \n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", fontFamily: \"Segoe UI, sans-serif\" }}>\n      {/* Left Side: Canvas and Node Editor */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <h2 style={{ textAlign: \"center\", padding: \"10px 0\", background: \"#f1f5f9\" }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </h2>\n        <div style={{ position: \"absolute\", top: 10, right: 10, zIndex: 10, display: \"flex\", gap: 8 }}>\n          <button onClick={undo} style={{ background: \"#facc15\", border: \"none\", padding: 8, borderRadius: 4 }}>\n            Undo\n          </button>\n          <button onClick={redo} style={{ background: \"#4ade80\", border: \"none\", padding: 8, borderRadius: 4 }}>\n            Redo\n          </button>\n        </div>\n\n        <ReactFlow\n          nodes={nodes.map((node) => ({\n            ...node,\n            style: getNodeStyle(node.data?.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n\n        {/* Buttons Panel */}\n        <div style={{ position: \"absolute\", bottom: 10, left: 10, display: \"flex\", gap: 10 }}>\n          <button\n            onClick={() => {\n              const id = String(nodeCounter++);\n              const newNode = {\n                id,\n                data: {\n                  message: \"New node\",\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position: { x: 250, y: 50 * nodeCounter },\n                type: \"default\"\n              };\n              const newNodes = [...nodes, newNode];\n              setNodes(newNodes);\n              pushToHistory(newNodes, manualEdges);\n            }}\n            style={{ background: \"#60a5fa\", color: \"white\", padding: \"8px 12px\", border: \"none\", borderRadius: 6 }}\n          >\n            Add Node\n          </button>\n\n          <button\n            onClick={() => {\n              if (!selectedNodeId) return alert(\"Select a node to delete.\");\n              const newNodes = nodes.filter((n) => n.id !== selectedNodeId);\n              const newEdges = manualEdges.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId);\n              setNodes(newNodes);\n              setEdges(newEdges);\n              setSelectedNodeId(null);\n              pushToHistory(newNodes, newEdges);\n            }}\n            style={{ background: \"#ef4444\", color: \"white\", padding: \"8px 12px\", border: \"none\", borderRadius: 6 }}\n          >\n            Delete Node\n          </button>\n\n          <button\n            onClick={() => {\n              const exported = getExportJSON();\n              const blob = new Blob([JSON.stringify(exported, null, 2)], { type: \"application/json\" });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement(\"a\");\n              a.href = url;\n              a.download = \"conversation_flow.json\";\n              a.click();\n            }}\n            style={{ background: \"#10b981\", color: \"white\", padding: \"8px 12px\", border: \"none\", borderRadius: 6 }}\n          >\n            Export JSON\n          </button>\n\n          <button\n            onClick={submitFlow}\n            style={{ background: \"#6366f1\", color: \"white\", padding: \"8px 12px\", border: \"none\", borderRadius: 6 }}\n          >\n            Submit Flow\n          </button>\n        </div>\n      </div>\n\n      {/* Right Side: Chatbot Panel */}\n      <div\n        style={{\n          width: \"350px\",\n          borderLeft: \"1px solid #ddd\",\n          background: \"#f8fafc\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\"\n        }}\n      >\n        <div style={{ padding: 12, fontWeight: \"bold\", background: \"#1e3a8a\", color: \"white\" }}>\n          💬 MindPeace Assistant\n        </div>\n\n        <div style={{ padding: 10, flex: 1, overflowY: \"auto\" }}>\n          {chatHistory.map((msg, idx) => (\n            <div\n              key={idx}\n              style={{\n                marginBottom: 8,\n                alignSelf: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                backgroundColor: msg.sender === \"user\" ? \"#d1fae5\" : \"#e0f2fe\",\n                padding: 10,\n                borderRadius: 12,\n                maxWidth: \"80%\"\n              }}\n            >\n              {msg.message}\n            </div>\n          ))}\n        </div>\n\n        {chatbotReady && (\n          <div style={{ padding: 10, borderTop: \"1px solid #ccc\" }}>{renderChatInput()}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}