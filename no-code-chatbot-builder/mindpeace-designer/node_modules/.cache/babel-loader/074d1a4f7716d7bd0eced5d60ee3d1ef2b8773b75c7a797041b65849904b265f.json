{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const importJSON = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const json = JSON.parse(e.target.result);\n        if (!json.nodes) throw new Error(\"Invalid format\");\n        const importedNodes = Object.entries(json.nodes).map(([id, node], idx) => ({\n          id,\n          data: {\n            message: node.message,\n            type: node.type,\n            options: node.options || {},\n            capture: node.capture || \"\",\n            next: node.next || \"\"\n          },\n          position: {\n            x: 100 + idx * 200,\n            y: 100\n          },\n          type: \"default\"\n        }));\n        nodeCounter = importedNodes.length + 1;\n        setNodes(importedNodes);\n        setEdges([]);\n        pushToHistory(importedNodes, []);\n      } catch (error) {\n        alert(\"Error importing JSON: \" + error.message);\n      }\n    };\n    reader.readAsText(file);\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        padding: \"12px\",\n        background: \"#f1f5f9\",\n        boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n        borderRadius: \"8px\",\n        fontSize: \"18px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Segoe UI, sans-serif\",\n        width: \"fit-content\",\n        margin: \"10px auto\",\n        zIndex: 20,\n        position: \"relative\"\n      },\n      children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 60,\n        left: 10,\n        zIndex: 10,\n        display: \"flex\",\n        gap: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          background: \"#38bdf8\",\n          color: \"white\",\n          borderRadius: 6,\n          padding: \"6px 12px\",\n          border: \"none\"\n        },\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          background: \"#22c55e\",\n          color: \"white\",\n          borderRadius: 6,\n          padding: \"6px 12px\",\n          border: \"none\"\n        },\n        onClick: exportJSON,\n        children: \"Export JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          background: \"#ef4444\",\n          color: \"white\",\n          borderRadius: 6,\n          padding: \"6px 12px\",\n          border: \"none\"\n        },\n        onClick: deleteNode,\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          background: \"#6366f1\",\n          color: \"white\",\n          borderRadius: 6,\n          padding: \"6px 12px\",\n          cursor: \"pointer\"\n        },\n        children: [\"Import JSON\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importJSON,\n          style: {\n            display: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 60,\n        right: 10,\n        zIndex: 10,\n        display: \"flex\",\n        gap: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          background: \"#a855f7\",\n          color: \"white\",\n          borderRadius: 6,\n          padding: \"6px 12px\",\n          border: \"none\"\n        },\n        onClick: undo,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          background: \"#f59e0b\",\n          color: \"white\",\n          borderRadius: 6,\n          padding: \"6px 12px\",\n          border: \"none\"\n        },\n        onClick: redo,\n        children: \"Redo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HD/VGRdoNKuO1pWy9XDJ73unYys=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","history","edges","historyIndex","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","selectedNode","find","n","selectedEdge","e","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","importJSON","event","file","files","reader","FileReader","onload","json","parse","result","Error","importedNodes","entries","idx","error","alert","readAsText","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","width","height","children","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","display","gap","color","onClick","cursor","accept","onChange","right","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const importJSON = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const json = JSON.parse(e.target.result);\n        if (!json.nodes) throw new Error(\"Invalid format\");\n\n        const importedNodes = Object.entries(json.nodes).map(([id, node], idx) => ({\n          id,\n          data: {\n            message: node.message,\n            type: node.type,\n            options: node.options || {},\n            capture: node.capture || \"\",\n            next: node.next || \"\"\n          },\n          position: { x: 100 + idx * 200, y: 100 },\n          type: \"default\"\n        }));\n\n        nodeCounter = importedNodes.length + 1;\n        setNodes(importedNodes);\n        setEdges([]);\n        pushToHistory(importedNodes, []);\n      } catch (error) {\n        alert(\"Error importing JSON: \" + error.message);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <div\n        style={{\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        }}\n      >\n        Your AI Chatbot Designer — Fast. Visual. Code-Free\n      </div>\n\n      <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n        <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={addNode}>\n          Add Node\n        </button>\n        <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={exportJSON}>\n          Export JSON\n        </button>\n        <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={deleteNode}>\n          Delete Node\n        </button>\n        <label style={{ background: \"#6366f1\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", cursor: \"pointer\" }}>\n          Import JSON\n          <input type=\"file\" accept=\".json\" onChange={importJSON} style={{ display: \"none\" }} />\n        </label>\n      </div>\n\n      <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n        <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={undo}>\n          Undo\n        </button>\n        <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={redo}>\n          Redo\n        </button>\n      </div>\n\n      {/* Add your existing Node and Edge Editor + ReactFlow below */}\n      {/* (unchanged) */}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}