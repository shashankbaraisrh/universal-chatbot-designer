{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiSelect, setMultiSelect] = useState([]);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        setMultiSelect([]);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\"),\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch (err) {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        style: {\n          padding: \"8px\",\n          margin: \"4px\",\n          width: \"100%\",\n          borderRadius: 6,\n          border: \"1px solid #ccc\",\n          background: \"#e0f2fe\"\n        },\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this));\n    }\n    if (node.type === \"multi_choice\") {\n      const toggleOption = opt => {\n        setMultiSelect(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt]);\n      };\n      const isSelected = opt => multiSelect.includes(opt);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleOption(opt),\n          style: {\n            padding: \"8px\",\n            margin: \"4px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            background: isSelected(opt) ? \"#bae6fd\" : \"#f0f9ff\",\n            fontWeight: isSelected(opt) ? \"bold\" : \"normal\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiSelect.length === 0) return;\n            const combined = multiSelect.join(\", \");\n            setMultiSelect([]);\n            handleUserResponse(combined);\n          },\n          style: {\n            marginTop: 10,\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n              type: \"application/json\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"conversation_data.json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 11\n      }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          padding: 12,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\",\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Option Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedEdge.label,\n          onChange: e => updateEdgeLabel(e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10\n        },\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          overflowY: \"auto\",\n          marginBottom: 10\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this), chatbotReady && renderChatInput()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 455,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Pc2DxPuBj1jB9TaQ+LUKbJJ9ags=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiSelect","setMultiSelect","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","summary","entries","k","v","join","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","summaryText","renderChatInput","children","value","onChange","onKeyDown","key","width","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","color","opt","margin","toggleOption","includes","filter","o","isSelected","fontWeight","combined","marginTop","addNode","newId","toString","Math","random","newNode","updatedNodes","deleteNode","updatedEdges","updateNodeField","field","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","updated","newOptions","onNodeClick","_","onEdgeClick","height","display","flex","textAlign","fontSize","zIndex","top","left","gap","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","right","onConnect","params","prompt","edgeId","fitView","edgeLabelMode","borderLeft","flexDirection","justifyContent","flexGrow","overflowY","entry","index","alignSelf","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiSelect, setMultiSelect] = useState([]);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        setMultiSelect([]);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\"),\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch (err) {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)}\n            style={{ width: \"100%\", padding: 8, marginBottom: 8, borderRadius: 6, border: \"1px solid #ccc\" }}\n          />\n          <button\n            onClick={() => handleUserResponse(inputValue)}\n            style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button\n          key={opt}\n          onClick={() => handleUserResponse(opt)}\n          style={{\n            padding: \"8px\",\n            margin: \"4px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            background: \"#e0f2fe\"\n          }}\n        >\n          {opt}\n        </button>\n      ));\n    }\n\n    if (node.type === \"multi_choice\") {\n      const toggleOption = (opt) => {\n        setMultiSelect((prev) =>\n          prev.includes(opt) ? prev.filter((o) => o !== opt) : [...prev, opt]\n        );\n      };\n\n      const isSelected = (opt) => multiSelect.includes(opt);\n\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <button\n              key={opt}\n              onClick={() => toggleOption(opt)}\n              style={{\n                padding: \"8px\",\n                margin: \"4px\",\n                width: \"100%\",\n                borderRadius: 6,\n                border: \"1px solid #ccc\",\n                background: isSelected(opt) ? \"#bae6fd\" : \"#f0f9ff\",\n                fontWeight: isSelected(opt) ? \"bold\" : \"normal\"\n              }}\n            >\n              {opt}\n            </button>\n          ))}\n          <button\n            onClick={() => {\n              if (multiSelect.length === 0) return;\n              const combined = multiSelect.join(\", \");\n              setMultiSelect([]);\n              handleUserResponse(combined);\n            }}\n            style={{\n              marginTop: 10,\n              width: \"100%\",\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"8px 12px\",\n              border: \"none\"\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)}\n            style={{ width: \"100%\", padding: 8, marginBottom: 8, borderRadius: 6, border: \"1px solid #ccc\" }}\n          />\n          <button\n            onClick={() => handleUserResponse(inputValue)}\n            style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div style={{ textAlign: \"center\", padding: \"12px\", background: \"#f1f5f9\", boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\", borderRadius: \"8px\", fontSize: \"18px\", fontWeight: \"bold\", fontFamily: \"Segoe UI, sans-serif\", width: \"fit-content\", margin: \"10px auto\", zIndex: 20, position: \"relative\" }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={addNode}>Add Node</button>\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => {\n            const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"conversation_data.json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          }}>Export JSON</button>\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={deleteNode}>Delete Node</button>\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={submitFlow}>Submit Flow</button>\n        </div>\n\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={undo}>Undo</button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={redo}>Redo</button>\n        </div>\n\n        {selectedNode && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f8fafc\", padding: 12, border: \"1px solid #d1d5db\", borderRadius: \"10px\", width: 300, boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Node: {selectedNode.id}</h4>\n            <label>Message:</label>\n            <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} />\n            <label>Type:</label>\n            <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}>\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n            <label>Capture Field:</label>\n            <input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} />\n            <label>Next Node ID:</label>\n            <input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        {selectedEdge && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f9fafb\", padding: 12, border: \"1px solid #ccc\", borderRadius: \"8px\", width: \"300px\", boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Edge</h4>\n            <label>Option Label:</label>\n            <input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message }, style: getNodeStyle(n.data.type) }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge({ ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label }, manualEdges);\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      <div style={{ width: \"320px\", padding: 20, borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n        <div style={{ fontWeight: \"bold\", marginBottom: 10 }}>MindPeace Chat</div>\n        <div style={{ flexGrow: 1, overflowY: \"auto\", marginBottom: 10 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{ alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\", background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\", padding: 8, borderRadius: 6, maxWidth: \"90%\" }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n        {chatbotReady && renderChatInput()}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}