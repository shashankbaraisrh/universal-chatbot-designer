{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nexport default function App() {\n  _s();\n  var _nodes$find, _nodes$find2, _nodes$find3, _nodes$find4, _submittedFlow$settin3, _submittedFlow$settin4;\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [nodeCounter, setNodeCounter] = useState(2); // ✅ USED\n\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    var _submittedFlow$settin, _submittedFlow$settin2;\n    const output = {\n      settings: {\n        system_prompt: (submittedFlow === null || submittedFlow === void 0 ? void 0 : (_submittedFlow$settin = submittedFlow.settings) === null || _submittedFlow$settin === void 0 ? void 0 : _submittedFlow$settin.system_prompt) || \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: (submittedFlow === null || submittedFlow === void 0 ? void 0 : (_submittedFlow$settin2 = submittedFlow.settings) === null || _submittedFlow$settin2 === void 0 ? void 0 : _submittedFlow$settin2.gpt_model) || \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        style: {\n          padding: \"8px\",\n          margin: \"4px\",\n          width: \"100%\",\n          borderRadius: 6,\n          border: \"1px solid #0369a1\",\n          background: \"#0284c7\",\n          color: \"white\"\n        },\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this));\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const newId = nodeCounter.toString();\n            const selectedNode = nodes.find(n => n.id === selectedNodeId);\n            const position = selectedNode ? {\n              x: selectedNode.position.x + 220,\n              y: selectedNode.position.y + 50\n            } : {\n              x: Math.random() * 400,\n              y: Math.random() * 400\n            };\n            const newNode = {\n              id: newId,\n              data: {\n                message: `This is node ${newId}`,\n                type: \"choice\",\n                options: {},\n                capture: \"\",\n                next: \"\"\n              },\n              position,\n              type: \"default\"\n            };\n            const updatedNodes = [...nodes, newNode];\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n            setNodeCounter(prev => prev + 1);\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n              type: \"application/json\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"conversation_data.json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            if (!selectedNodeId) return;\n            const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n            const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n            setNodes(updatedNodes);\n            setEdges(updatedEdges);\n            setSelectedNodeId(null);\n            pushToHistory(updatedNodes, updatedEdges);\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this), selectedNodeId && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNodeId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: ((_nodes$find = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.message) || \"\",\n          onChange: e => {\n            const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                message: e.target.value\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: ((_nodes$find2 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find2 === void 0 ? void 0 : _nodes$find2.data.type) || \"\",\n          onChange: e => {\n            const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                type: e.target.value\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ((_nodes$find3 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find3 === void 0 ? void 0 : _nodes$find3.data.capture) || \"\",\n          onChange: e => {\n            const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                capture: e.target.value\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ((_nodes$find4 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find4 === void 0 ? void 0 : _nodes$find4.data.next) || \"\",\n          onChange: e => {\n            const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                next: e.target.value\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 10,\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontWeight: \"bold\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"MindPeace Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n              const blob = new Blob([textContent], {\n                type: \"text/plain\"\n              });\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"chat_history.txt\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            },\n            style: {\n              background: \"#6366f1\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"6px\",\n              padding: \"4px 8px\",\n              fontSize: \"12px\",\n              cursor: \"pointer\"\n            },\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#f8fafc\",\n            padding: \"10px\",\n            border: \"1px solid #d1d5db\",\n            borderRadius: \"8px\",\n            fontSize: \"12px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontWeight: \"bold\",\n              display: \"block\",\n              marginBottom: \"4px\"\n            },\n            children: \"System Prompt:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: (submittedFlow === null || submittedFlow === void 0 ? void 0 : (_submittedFlow$settin3 = submittedFlow.settings) === null || _submittedFlow$settin3 === void 0 ? void 0 : _submittedFlow$settin3.system_prompt) || \"\",\n            onChange: e => {\n              if (!submittedFlow) return;\n              setSubmittedFlow({\n                ...submittedFlow,\n                settings: {\n                  ...submittedFlow.settings,\n                  system_prompt: e.target.value\n                }\n              });\n            },\n            rows: 4,\n            style: {\n              width: \"100%\",\n              resize: \"vertical\",\n              borderRadius: \"6px\",\n              padding: \"6px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontWeight: \"bold\",\n              display: \"block\",\n              margin: \"10px 0 4px\"\n            },\n            children: \"GPT Model:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: (submittedFlow === null || submittedFlow === void 0 ? void 0 : (_submittedFlow$settin4 = submittedFlow.settings) === null || _submittedFlow$settin4 === void 0 ? void 0 : _submittedFlow$settin4.gpt_model) || \"gpt-3.5-turbo\",\n            onChange: e => {\n              if (!submittedFlow) return;\n              setSubmittedFlow({\n                ...submittedFlow,\n                settings: {\n                  ...submittedFlow.settings,\n                  gpt_model: e.target.value\n                }\n              });\n            },\n            style: {\n              width: \"100%\",\n              padding: \"6px\",\n              borderRadius: \"6px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt-3.5-turbo\",\n              children: \"gpt-3.5-turbo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt-4\",\n              children: \"gpt-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt-4o\",\n              children: \"gpt-4o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          marginBottom: 10,\n          paddingRight: 4\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FDjNiG0u10zCF+YdiBAlN8tUUOg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","App","_s","_nodes$find","_nodes$find2","_nodes$find3","_nodes$find4","_submittedFlow$settin3","_submittedFlow$settin4","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","nodeCounter","setNodeCounter","history","edges","historyIndex","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","color","autoGeneratedEdges","existingConnections","Set","map","e","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","_submittedFlow$settin","_submittedFlow$settin2","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","opt","margin","width","checked","includes","filter","o","join","marginTop","textAlign","fontSize","fontWeight","top","left","zIndex","newId","toString","selectedNode","find","n","Math","random","newNode","updatedNodes","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","updatedEdges","right","onConnect","params","prompt","edgeId","updated","onNodeClick","_","onEdgeClick","edge","fitView","edgeLabelMode","borderLeft","flexDirection","boxSizing","marginBottom","justifyContent","alignItems","textContent","cursor","rows","resize","overflowY","paddingRight","index","alignSelf","flexShrink","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [nodeCounter, setNodeCounter] = useState(2); // ✅ USED\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          submittedFlow?.settings?.system_prompt ||\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: submittedFlow?.settings?.gpt_model || \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button\n          key={opt}\n          onClick={() => handleUserResponse(opt)}\n          style={{\n            padding: \"8px\",\n            margin: \"4px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\"\n          }}\n        >\n          {opt}\n        </button>\n      ));\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div key={opt} style={{ background: \"#facc15\", padding: \"4px 8px\", borderRadius: \"4px\", margin: \"4px 0\" }}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\"\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Panel: Flow Editor */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        {/* Title */}\n        <div style={{\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\"\n        }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Top Left Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button\n            style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              const newId = nodeCounter.toString();\n              const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n              const position = selectedNode\n                ? {\n                    x: selectedNode.position.x + 220,\n                    y: selectedNode.position.y + 50\n                  }\n                : { x: Math.random() * 400, y: Math.random() * 400 };\n              const newNode = {\n                id: newId,\n                data: {\n                  message: `This is node ${newId}`,\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position,\n                type: \"default\"\n              };\n              const updatedNodes = [...nodes, newNode];\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n              setNodeCounter((prev) => prev + 1);\n            }}\n          >\n            Add Node\n          </button>\n\n          <button\n            style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], { type: \"application/json\" });\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"conversation_data.json\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            }}\n          >\n            Export JSON\n          </button>\n\n          <button\n            style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              if (!selectedNodeId) return;\n              const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n              const updatedEdges = manualEdges.filter(\n                (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n              );\n              setNodes(updatedNodes);\n              setEdges(updatedEdges);\n              setSelectedNodeId(null);\n              pushToHistory(updatedNodes, updatedEdges);\n            }}\n          >\n            Delete Node\n          </button>\n\n          <button\n            style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={submitFlow}\n          >\n            Submit Flow\n          </button>\n        </div>\n\n        {/* Top Right Buttons */}\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={undo}>Undo</button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={redo}>Redo</button>\n        </div>\n\n        {/* Node Editor */}\n        {selectedNodeId && (\n          <div style={{\n            position: \"absolute\",\n            top: 110,\n            left: 10,\n            zIndex: 10,\n            background: \"#f8fafc\",\n            padding: 12,\n            border: \"1px solid #d1d5db\",\n            borderRadius: \"10px\",\n            width: 300\n          }}>\n            <h4>Editing Node: {selectedNodeId}</h4>\n            <label>Message:</label>\n            <textarea\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.message || \"\"}\n              onChange={(e) => {\n                const updatedNodes = nodes.map((node) =>\n                  node.id === selectedNodeId\n                    ? { ...node, data: { ...node.data, message: e.target.value } }\n                    : node\n                );\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }}\n              style={{ width: \"100%\", height: 60 }}\n            />\n\n            <label>Type:</label>\n            <select\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.type || \"\"}\n              onChange={(e) => {\n                const updatedNodes = nodes.map((node) =>\n                  node.id === selectedNodeId\n                    ? { ...node, data: { ...node.data, type: e.target.value } }\n                    : node\n                );\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }}\n              style={{ width: \"100%\" }}\n            >\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n\n            <label>Capture Field:</label>\n            <input\n              type=\"text\"\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.capture || \"\"}\n              onChange={(e) => {\n                const updatedNodes = nodes.map((node) =>\n                  node.id === selectedNodeId\n                    ? { ...node, data: { ...node.data, capture: e.target.value } }\n                    : node\n                );\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }}\n              style={{ width: \"100%\" }}\n            />\n\n            <label>Next Node ID:</label>\n            <input\n              type=\"text\"\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.next || \"\"}\n              onChange={(e) => {\n                const updatedNodes = nodes.map((node) =>\n                  node.id === selectedNodeId\n                    ? { ...node, data: { ...node.data, next: e.target.value } }\n                    : node\n                );\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        )}\n\n        {/* ReactFlow canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge(\n              { ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label },\n              manualEdges\n            );\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Panel: Chat + Prompt Settings */}\n      <div style={{\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      }}>\n        {/* Prompt Editor UI + Header + Export */}\n        <div style={{ marginBottom: 10, display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\n          <div style={{ fontWeight: \"bold\", display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n            <span>MindPeace Chat</span>\n            {chatbotReady && (\n              <button\n                onClick={() => {\n                  const textContent = chatHistory\n                    .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                    .join(\"\\n\\n\");\n                  const blob = new Blob([textContent], { type: \"text/plain\" });\n                  const url = URL.createObjectURL(blob);\n                  const link = document.createElement(\"a\");\n                  link.href = url;\n                  link.download = \"chat_history.txt\";\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                }}\n                style={{\n                  background: \"#6366f1\",\n                  color: \"white\",\n                  border: \"none\",\n                  borderRadius: \"6px\",\n                  padding: \"4px 8px\",\n                  fontSize: \"12px\",\n                  cursor: \"pointer\"\n                }}\n              >\n                Export\n              </button>\n            )}\n          </div>\n\n          <div style={{\n            background: \"#f8fafc\",\n            padding: \"10px\",\n            border: \"1px solid #d1d5db\",\n            borderRadius: \"8px\",\n            fontSize: \"12px\"\n          }}>\n            <label style={{ fontWeight: \"bold\", display: \"block\", marginBottom: \"4px\" }}>System Prompt:</label>\n            <textarea\n              value={submittedFlow?.settings?.system_prompt || \"\"}\n              onChange={(e) => {\n                if (!submittedFlow) return;\n                setSubmittedFlow({\n                  ...submittedFlow,\n                  settings: {\n                    ...submittedFlow.settings,\n                    system_prompt: e.target.value\n                  }\n                });\n              }}\n              rows={4}\n              style={{ width: \"100%\", resize: \"vertical\", borderRadius: \"6px\", padding: \"6px\" }}\n            />\n\n            <label style={{ fontWeight: \"bold\", display: \"block\", margin: \"10px 0 4px\" }}>GPT Model:</label>\n            <select\n              value={submittedFlow?.settings?.gpt_model || \"gpt-3.5-turbo\"}\n              onChange={(e) => {\n                if (!submittedFlow) return;\n                setSubmittedFlow({\n                  ...submittedFlow,\n                  settings: {\n                    ...submittedFlow.settings,\n                    gpt_model: e.target.value\n                  }\n                });\n              }}\n              style={{ width: \"100%\", padding: \"6px\", borderRadius: \"6px\" }}\n            >\n              <option value=\"gpt-3.5-turbo\">gpt-3.5-turbo</option>\n              <option value=\"gpt-4\">gpt-4</option>\n              <option value=\"gpt-4o\">gpt-4o</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Chat Window */}\n        <div style={{ flex: 1, overflowY: \"auto\", marginBottom: 10, paddingRight: 4 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{\n                  alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                  background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n                  padding: 8,\n                  borderRadius: 6,\n                  maxWidth: \"90%\"\n                }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {/* Chat Input */}\n        {chatbotReady && (\n          <div style={{ flexShrink: 0 }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}