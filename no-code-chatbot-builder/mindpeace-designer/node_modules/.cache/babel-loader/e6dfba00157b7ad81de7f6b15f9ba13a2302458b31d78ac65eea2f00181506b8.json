{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: promptSettings.system_prompt,\n            gpt_model: promptSettings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: promptSettings.system_prompt,\n            gpt_model: promptSettings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        style: {\n          padding: \"8px\",\n          margin: \"4px\",\n          width: \"100%\",\n          borderRadius: 6,\n          border: \"1px solid #0369a1\",\n          background: \"#0284c7\",\n          color: \"white\"\n        },\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this));\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          right: 340,\n          top: 60,\n          width: 300,\n          background: \"#f3f4f6\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: 8,\n          fontSize: 13,\n          zIndex: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Prompt Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 8\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"System Prompt:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: promptSettings.system_prompt,\n            onChange: e => setPromptSettings({\n              ...promptSettings,\n              system_prompt: e.target.value\n            }),\n            rows: 4,\n            style: {\n              width: \"100%\",\n              padding: 6,\n              borderRadius: 6,\n              border: \"1px solid #ccc\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 8\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"GPT Model:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: promptSettings.gpt_model,\n            onChange: e => setPromptSettings({\n              ...promptSettings,\n              gpt_model: e.target.value\n            }),\n            style: {\n              width: \"100%\",\n              padding: 6,\n              borderRadius: 6,\n              border: \"1px solid #ccc\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: {\n            background: \"#6366f1\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"6px\",\n            padding: \"4px 8px\",\n            fontSize: \"12px\",\n            cursor: \"pointer\"\n          },\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          marginBottom: 10,\n          paddingRight: 4\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"o7MtT8CSUxtJ8ZwUcyTOvKUEaio=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","promptSettings","setPromptSettings","system_prompt","gpt_model","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","color","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","opt","margin","width","checked","includes","filter","o","join","marginTop","textAlign","fontSize","fontWeight","zIndex","right","top","rows","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","onNodeClick","_","onEdgeClick","edge","fitView","edgeLabelMode","borderLeft","flexDirection","boxSizing","marginBottom","justifyContent","alignItems","flexShrink","textContent","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","cursor","overflowY","paddingRight","index","alignSelf","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: promptSettings.system_prompt,\n            gpt_model: promptSettings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: promptSettings.system_prompt,\n            gpt_model: promptSettings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button\n          key={opt}\n          onClick={() => handleUserResponse(opt)}\n          style={{\n            padding: \"8px\",\n            margin: \"4px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\"\n          }}\n        >\n          {opt}\n        </button>\n      ));\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div key={opt} style={{ background: \"#facc15\", padding: \"4px 8px\", borderRadius: \"4px\", margin: \"4px 0\" }}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\"\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", width: \"100vw\" }}>\n      {/* Left: React Flow Designer */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div style={{\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Prompt Settings Panel */}\n        <div style={{\n          position: \"absolute\",\n          right: 340,\n          top: 60,\n          width: 300,\n          background: \"#f3f4f6\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: 8,\n          fontSize: 13,\n          zIndex: 10\n        }}>\n          <strong>Prompt Settings</strong>\n          <div style={{ marginTop: 8 }}>\n            <label>System Prompt:</label>\n            <textarea\n              value={promptSettings.system_prompt}\n              onChange={(e) =>\n                setPromptSettings({ ...promptSettings, system_prompt: e.target.value })\n              }\n              rows={4}\n              style={{ width: \"100%\", padding: 6, borderRadius: 6, border: \"1px solid #ccc\" }}\n            />\n          </div>\n          <div style={{ marginTop: 8 }}>\n            <label>GPT Model:</label>\n            <input\n              value={promptSettings.gpt_model}\n              onChange={(e) =>\n                setPromptSettings({ ...promptSettings, gpt_model: e.target.value })\n              }\n              style={{ width: \"100%\", padding: 6, borderRadius: 6, border: \"1px solid #ccc\" }}\n            />\n          </div>\n        </div>\n\n        {/* Canvas & Controls */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge({ ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label }, manualEdges);\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right: Chat Panel */}\n      <div style={{\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      }}>\n        <div style={{\n          fontWeight: \"bold\",\n          marginBottom: 10,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        }}>\n          <span>MindPeace Chat</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"chat_history.txt\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n              style={{\n                background: \"#6366f1\",\n                color: \"white\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                padding: \"4px 8px\",\n                fontSize: \"12px\",\n                cursor: \"pointer\"\n              }}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        <div style={{\n          flex: 1,\n          overflowY: \"auto\",\n          marginBottom: 10,\n          paddingRight: 4\n        }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{\n                  alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                  background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n                  padding: 8,\n                  borderRadius: 6,\n                  maxWidth: \"90%\"\n                }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {chatbotReady && (\n          <div style={{ flexShrink: 0 }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}