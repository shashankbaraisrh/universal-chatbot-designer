{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n\n    // GPT Mode\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        style: {\n          padding: \"8px\",\n          margin: \"4px\",\n          width: \"100%\",\n          borderRadius: 6,\n          border: \"1px solid #0369a1\",\n          background: \"#0284c7\",\n          color: \"white\"\n        },\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this));\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            // Handle positioning based on existing nodes\n            const position = nodes.length > 0 ? {\n              // Use the last node's position and add some spacing for the new node\n              x: nodes[nodes.length - 1].position.x + 220,\n              y: nodes[nodes.length - 1].position.y + 50\n            } : {\n              x: Math.random() * 400,\n              y: Math.random() * 400\n            }; // Random position if no nodes exist\n\n            const newId = nodeCounter.toString();\n            nodeCounter++;\n            const newNode = {\n              id: newId,\n              data: {\n                message: `This is node ${newId}`,\n                type: \"choice\",\n                options: {},\n                capture: \"\",\n                next: \"\"\n              },\n              position,\n              // The new node will get this position\n              type: \"default\"\n            };\n\n            // Add the new node to the nodes list\n            const updatedNodes = [...nodes, newNode];\n            setNodes(updatedNodes);\n\n            // Save to history for undo/redo functionality\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const newId = nodeCounter.toString();\n            nodeCounter++;\n            const position = selectedNodeId ? {\n              x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n              y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n            } : {\n              x: Math.random() * 400,\n              y: Math.random() * 400\n            };\n            const newNode = {\n              id: newId,\n              data: {\n                message: `This is node ${newId}`,\n                type: \"choice\",\n                options: {},\n                capture: \"\",\n                next: \"\"\n              },\n              position,\n              type: \"default\"\n            };\n            const updatedNodes = [...nodes, newNode];\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n              type: \"application/json\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"conversation_data.json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            if (!selectedNodeId) return;\n            const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n            const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n            setNodes(updatedNodes);\n            setEdges(updatedEdges);\n            setSelectedNodeId(null);\n            pushToHistory(updatedNodes, updatedEdges);\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => {\n            const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                message: e.target.value\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => {\n            const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                type: e.target.value\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => {\n            const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                capture: e.target.value\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => {\n            const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                next: e.target.value\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, manualEdges);\n          },\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          padding: 12,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\",\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Option Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedEdge.label,\n          onChange: e => {\n            const newLabel = e.target.value;\n            const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n              ...edge,\n              label: newLabel\n            } : edge);\n            const sourceId = selectedEdge.source;\n            const targetId = selectedEdge.target;\n            const updatedNodes = nodes.map(node => {\n              if (node.id === sourceId) {\n                const updated = {\n                  ...node\n                };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  const newOptions = {\n                    ...updated.data.options\n                  };\n                  delete newOptions[selectedEdge.label];\n                  newOptions[newLabel] = targetId;\n                  updated.data.options = newOptions;\n                } else {\n                  updated.data.next = targetId;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          },\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: {\n            background: \"#6366f1\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"6px\",\n            padding: \"4px 8px\",\n            fontSize: \"12px\",\n            cursor: \"pointer\"\n          },\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          marginBottom: 10,\n          paddingRight: 4\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yHRjLEAdQzIKMVYd9jqiKyVIBwA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","color","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","opt","onClick","margin","width","checked","includes","filter","o","Math","random","newId","toString","newNode","updatedNodes","textAlign","fontSize","fontWeight","zIndex","top","left","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","updatedEdges","right","newLabel","edge","sourceId","targetId","updated","newOptions","onConnect","params","prompt","edgeId","onNodeClick","_","onEdgeClick","fitView","edgeLabelMode","borderLeft","flexDirection","boxSizing","marginBottom","justifyContent","alignItems","flexShrink","textContent","join","cursor","overflowY","paddingRight","index","alignSelf","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    // GPT Mode\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          \n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button\n          key={opt}\n          onClick={() => handleUserResponse(opt)}\n          style={{\n            padding: \"8px\",\n            margin: \"4px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\"\n          }}\n        >\n          {opt}\n        </button>\n      ));\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div key={opt} style={{ background: \"#facc15\", padding: \"4px 8px\", borderRadius: \"4px\", margin: \"4px 0\" }}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n<button\n  style={{\n    background: \"#38bdf8\",\n    color: \"white\",\n    borderRadius: 6,\n    padding: \"6px 12px\",\n    border: \"none\",\n  }}\n  onClick={() => {\n    // Handle positioning based on existing nodes\n    const position = nodes.length > 0\n      ? {\n          // Use the last node's position and add some spacing for the new node\n          x: nodes[nodes.length - 1].position.x + 220,\n          y: nodes[nodes.length - 1].position.y + 50,\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 }; // Random position if no nodes exist\n\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\",\n      },\n      position, // The new node will get this position\n      type: \"default\",\n    };\n\n    // Add the new node to the nodes list\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n\n    // Save to history for undo/redo functionality\n    pushToHistory(updatedNodes, manualEdges);\n  }}\n>\n  Add Node\n</button>\n\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\"\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n    return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Panel */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div style={{\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Top Left Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              const newId = nodeCounter.toString();\n              nodeCounter++;\n              const position = selectedNodeId\n                ? {\n                    x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                    y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n                  }\n                : { x: Math.random() * 400, y: Math.random() * 400 };\n              const newNode = {\n                id: newId,\n                data: {\n                  message: `This is node ${newId}`,\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position,\n                type: \"default\"\n              };\n              const updatedNodes = [...nodes, newNode];\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            }}>Add Node</button>\n\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], { type: \"application/json\" });\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"conversation_data.json\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            }}>Export JSON</button>\n\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={() => {\n              if (!selectedNodeId) return;\n              const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n              const updatedEdges = manualEdges.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId);\n              setNodes(updatedNodes);\n              setEdges(updatedEdges);\n              setSelectedNodeId(null);\n              pushToHistory(updatedNodes, updatedEdges);\n            }}>Delete Node</button>\n\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }}\n            onClick={submitFlow}>Submit Flow</button>\n        </div>\n\n        {/* Top Right Buttons */}\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={undo}>Undo</button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={redo}>Redo</button>\n        </div>\n\n        {/* Node Editor */}\n        {selectedNode && (\n          <div style={{\n            position: \"absolute\",\n            top: 110,\n            left: 10,\n            zIndex: 10,\n            background: \"#f8fafc\",\n            padding: 12,\n            border: \"1px solid #d1d5db\",\n            borderRadius: \"10px\",\n            width: 300,\n            boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n          }}>\n            <h4>Editing Node: {selectedNode.id}</h4>\n            <label>Message:</label>\n            <textarea value={selectedNode.data.message}\n              onChange={(e) => {\n                const updatedNodes = nodes.map((node) =>\n                  node.id === selectedNodeId\n                    ? { ...node, data: { ...node.data, message: e.target.value } }\n                    : node\n                );\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }} style={{ width: \"100%\", height: 60 }} />\n            <label>Type:</label>\n            <select value={selectedNode.data.type}\n              onChange={(e) => {\n                const updatedNodes = nodes.map((node) =>\n                  node.id === selectedNodeId\n                    ? { ...node, data: { ...node.data, type: e.target.value } }\n                    : node\n                );\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }} style={{ width: \"100%\" }}>\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n            <label>Capture Field:</label>\n            <input type=\"text\" value={selectedNode.data.capture}\n              onChange={(e) => {\n                const updatedNodes = nodes.map((node) =>\n                  node.id === selectedNodeId\n                    ? { ...node, data: { ...node.data, capture: e.target.value } }\n                    : node\n                );\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }} style={{ width: \"100%\" }} />\n            <label>Next Node ID:</label>\n            <input type=\"text\" value={selectedNode.data.next}\n              onChange={(e) => {\n                const updatedNodes = nodes.map((node) =>\n                  node.id === selectedNodeId\n                    ? { ...node, data: { ...node.data, next: e.target.value } }\n                    : node\n                );\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        {/* Edge Editor */}\n        {selectedEdge && (\n          <div style={{\n            position: \"absolute\",\n            top: 110,\n            left: 10,\n            zIndex: 10,\n            background: \"#f9fafb\",\n            padding: 12,\n            border: \"1px solid #ccc\",\n            borderRadius: \"8px\",\n            width: \"300px\",\n            boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n          }}>\n            <h4>Editing Edge</h4>\n            <label>Option Label:</label>\n            <input type=\"text\" value={selectedEdge.label}\n              onChange={(e) => {\n                const newLabel = e.target.value;\n                const updatedEdges = manualEdges.map((edge) =>\n                  edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n                );\n                const sourceId = selectedEdge.source;\n                const targetId = selectedEdge.target;\n                const updatedNodes = nodes.map((node) => {\n                  if (node.id === sourceId) {\n                    const updated = { ...node };\n                    if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                      const newOptions = { ...updated.data.options };\n                      delete newOptions[selectedEdge.label];\n                      newOptions[newLabel] = targetId;\n                      updated.data.options = newOptions;\n                    } else {\n                      updated.data.next = targetId;\n                    }\n                    return updated;\n                  }\n                  return node;\n                });\n                setEdges(updatedEdges);\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, updatedEdges);\n              }} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        {/* React Flow Canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge({ ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label }, manualEdges);\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel */}\n      <div style={{\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        height: \"100vh\",\n        boxSizing: \"border-box\"\n      }}>\n        {/* Header */}\n        <div style={{\n          fontWeight: \"bold\",\n          marginBottom: 10,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        }}>\n          <span>MindPeace Chat</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"chat_history.txt\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n              style={{\n                background: \"#6366f1\",\n                color: \"white\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                padding: \"4px 8px\",\n                fontSize: \"12px\",\n                cursor: \"pointer\"\n              }}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        {/* Scrollable Chat Messages */}\n        <div style={{\n          flex: 1,\n          overflowY: \"auto\",\n          marginBottom: 10,\n          paddingRight: 4\n        }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{\n                  alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                  background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n                  padding: 8,\n                  borderRadius: 6,\n                  maxWidth: \"90%\"\n                }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {/* Fixed Input Box */}\n        {chatbotReady && (\n          <div style={{ flexShrink: 0 }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}