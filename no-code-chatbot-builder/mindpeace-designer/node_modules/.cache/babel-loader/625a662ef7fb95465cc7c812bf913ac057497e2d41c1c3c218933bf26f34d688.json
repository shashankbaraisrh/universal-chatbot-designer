{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [systemPrompt, setSystemPrompt] = useState(\"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\");\n  const [gptModel, setGptModel] = useState(\"gpt-3.5-turbo\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: systemPrompt,\n        gpt_model: gptModel\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const exportToJson = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(getExportJSON(), null, 2));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"conversation_data.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n  const importJson = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      const json = JSON.parse(e.target.result);\n      if (json.settings) {\n        setSystemPrompt(json.settings.system_prompt || \"\");\n        setGptModel(json.settings.gpt_model || \"gpt-3.5-turbo\");\n      }\n      const importedNodes = Object.entries(json.nodes || {}).map(([id, nodeData], index) => ({\n        id,\n        type: \"default\",\n        position: {\n          x: 100 + index * 50,\n          y: 100 + index * 50\n        },\n        data: {\n          message: nodeData.message,\n          type: nodeData.type,\n          options: nodeData.options || {},\n          capture: nodeData.capture || \"\",\n          next: nodeData.next || \"\"\n        }\n      }));\n      setNodes(importedNodes);\n      setEdges([]);\n    };\n    fileReader.readAsText(event.target.files[0]);\n  };\n  const addNode = () => {\n    const newNode = {\n      id: `${nodeCounter++}`,\n      type: \"default\",\n      position: {\n        x: Math.random() * 250 + 50,\n        y: Math.random() * 250 + 50\n      },\n      data: {\n        message: \"New message\",\n        type: \"text\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      }\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const updateNodeField = (field, value) => {\n    const updated = nodes.map(node => {\n      if (node.id === selectedNodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        };\n      }\n      return node;\n    });\n    setNodes(updated);\n  };\n  const updateEdgeLabel = value => {\n    const updated = manualEdges.map(edge => edge.id === selectedEdgeId ? {\n      ...edge,\n      label: value\n    } : edge);\n    setEdges(updated);\n  };\n  const onConnect = params => {\n    const newEdge = {\n      ...params,\n      id: `edge-${params.source}-${params.target}`,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      style: {\n        strokeWidth: 2\n      }\n    };\n    const updatedEdges = [...manualEdges, newEdge];\n    setEdges(updatedEdges);\n    pushToHistory(nodes, updatedEdges);\n  };\n  const submitFlow = () => {\n    const flowData = getExportJSON();\n    setSubmittedFlow(flowData);\n    setChatbotReady(true);\n    setChatHistory([]);\n    setUserInputs({});\n    setCurrentNodeId(\"1\");\n    setGptMode(false);\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n  };\n  const handleUserMessage = async () => {\n    var _submittedFlow$settin, _submittedFlow$settin2;\n    if (!inputValue.trim()) return;\n    const newChat = [...chatHistory, {\n      sender: \"user\",\n      text: inputValue\n    }];\n    setChatHistory(newChat);\n    setInputValue(\"\");\n    const systemPromptToSend = (submittedFlow === null || submittedFlow === void 0 ? void 0 : (_submittedFlow$settin = submittedFlow.settings) === null || _submittedFlow$settin === void 0 ? void 0 : _submittedFlow$settin.system_prompt) || systemPrompt;\n    const gptModelToSend = (submittedFlow === null || submittedFlow === void 0 ? void 0 : (_submittedFlow$settin2 = submittedFlow.settings) === null || _submittedFlow$settin2 === void 0 ? void 0 : _submittedFlow$settin2.gpt_model) || gptModel;\n    try {\n      const response = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          messages: newChat,\n          summary: JSON.stringify(userInputs),\n          system_prompt: systemPromptToSend,\n          gpt_model: gptModelToSend\n        })\n      });\n      const data = await response.json();\n      const reply = data.reply;\n      setChatHistory([...newChat, {\n        sender: \"bot\",\n        text: reply\n      }]);\n    } catch (error) {\n      console.error(\"GPT error:\", error);\n    }\n  };\n  const exportChat = () => {\n    const content = chatHistory.map(msg => `${msg.sender === \"user\" ? \"You\" : \"Bot\"}: ${msg.text}`).join(\"\\n\\n\");\n    const blob = new Blob([content], {\n      type: \"text/plain\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"chat_history.txt\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      fontFamily: \"Segoe UI, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNode,\n          style: {\n            backgroundColor: \"#0284c7\",\n            color: \"white\",\n            marginRight: 5\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportToJson,\n          style: {\n            backgroundColor: \"green\",\n            color: \"white\",\n            marginRight: 5\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNode,\n          style: {\n            backgroundColor: \"red\",\n            color: \"white\",\n            marginRight: 5\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            marginRight: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".json\",\n            onChange: importJson,\n            style: {\n              display: \"none\"\n            },\n            id: \"fileInput\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              backgroundColor: \"orange\",\n              color: \"white\",\n              padding: \"5px 10px\",\n              borderRadius: 4,\n              cursor: \"pointer\"\n            },\n            onClick: () => document.getElementById(\"fileInput\").click(),\n            children: \"Import JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitFlow,\n          style: {\n            backgroundColor: \"#0ea5e9\",\n            color: \"white\",\n            marginRight: 5\n          },\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          style: {\n            backgroundColor: \"#f59e0b\",\n            color: \"white\",\n            marginRight: 5\n          },\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          style: {\n            backgroundColor: \"#8b5cf6\",\n            color: \"white\"\n          },\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes.map(n => ({\n            ...n,\n            style: getNodeStyle(n.data.type)\n          })),\n          edges: allEdges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onNodeClick: (_, node) => setSelectedNodeId(node.id),\n          onEdgeClick: (_, edge) => setSelectedEdgeId(edge.id),\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uD83E\\uDDE0 Prompt Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: \"0.9rem\",\n            marginBottom: 4\n          },\n          children: \"System Prompt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: systemPrompt,\n          onChange: e => setSystemPrompt(e.target.value),\n          rows: 4,\n          style: {\n            width: \"100%\",\n            marginBottom: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: \"0.9rem\",\n            marginBottom: 4\n          },\n          children: \"GPT Model:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: gptModel,\n          onChange: e => setGptModel(e.target.value),\n          style: {\n            width: \"100%\",\n            marginBottom: 8\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt-3.5-turbo\",\n            children: \"gpt-3.5-turbo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt-4\",\n            children: \"gpt-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          background: \"#f9f9f9\",\n          padding: 10,\n          border: \"1px solid #ddd\",\n          borderRadius: 4,\n          marginBottom: 10\n        },\n        children: chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: msg.sender === \"user\" ? \"right\" : \"left\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: \"inline-block\",\n              padding: \"6px 10px\",\n              borderRadius: 12,\n              background: msg.sender === \"user\" ? \"#e0f2fe\" : \"#ede9fe\",\n              color: \"#111\",\n              maxWidth: \"90%\",\n              wordWrap: \"break-word\"\n            },\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserMessage(),\n          placeholder: \"Type your message...\",\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: \"6px 0 0 6px\",\n            border: \"1px solid #ccc\",\n            fontSize: \"14px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUserMessage,\n          style: {\n            backgroundColor: \"#6366f1\",\n            color: \"white\",\n            padding: \"8px 14px\",\n            borderRadius: \"0 6px 6px 0\",\n            border: \"none\",\n            cursor: \"pointer\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportChat,\n        style: {\n          position: \"absolute\",\n          top: 10,\n          right: 10,\n          padding: \"4px 8px\",\n          backgroundColor: \"orange\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: 4,\n          fontSize: \"12px\"\n        },\n        children: \"Export Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JAM7AwZ8ZiaT1tekN5ncq28bMTU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","systemPrompt","setSystemPrompt","gptModel","setGptModel","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","color","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","exportToJson","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importJson","event","fileReader","FileReader","onload","json","parse","result","importedNodes","entries","nodeData","index","readAsText","files","addNode","newNode","Math","random","updatedNodes","deleteNode","filter","updatedEdges","updateNodeField","field","value","updated","updateEdgeLabel","edge","onConnect","params","newEdge","strokeWidth","submitFlow","flowData","handleUserMessage","_submittedFlow$settin","_submittedFlow$settin2","trim","newChat","sender","text","systemPromptToSend","gptModelToSend","response","fetch","method","headers","messages","summary","reply","error","console","exportChat","content","msg","join","blob","Blob","url","URL","createObjectURL","a","href","download","revokeObjectURL","display","height","children","flex","flexDirection","onClick","backgroundColor","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","cursor","getElementById","onNodeClick","_","onEdgeClick","fitView","width","borderLeft","marginBottom","fontSize","rows","overflowY","textAlign","margin","onKeyDown","key","placeholder","top","right","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [systemPrompt, setSystemPrompt] = useState(\n    \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\"\n  );\n  const [gptModel, setGptModel] = useState(\"gpt-3.5-turbo\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: systemPrompt,\n        gpt_model: gptModel\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const exportToJson = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(getExportJSON(), null, 2));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"conversation_data.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n\n  const importJson = (event) => {\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      const json = JSON.parse(e.target.result);\n      if (json.settings) {\n        setSystemPrompt(json.settings.system_prompt || \"\");\n        setGptModel(json.settings.gpt_model || \"gpt-3.5-turbo\");\n      }\n      const importedNodes = Object.entries(json.nodes || {}).map(([id, nodeData], index) => ({\n        id,\n        type: \"default\",\n        position: { x: 100 + index * 50, y: 100 + index * 50 },\n        data: {\n          message: nodeData.message,\n          type: nodeData.type,\n          options: nodeData.options || {},\n          capture: nodeData.capture || \"\",\n          next: nodeData.next || \"\"\n        }\n      }));\n      setNodes(importedNodes);\n      setEdges([]);\n    };\n    fileReader.readAsText(event.target.files[0]);\n  };\n\n  const addNode = () => {\n    const newNode = {\n      id: `${nodeCounter++}`,\n      type: \"default\",\n      position: {\n        x: Math.random() * 250 + 50,\n        y: Math.random() * 250 + 50\n      },\n      data: {\n        message: \"New message\",\n        type: \"text\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      }\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updated = nodes.map((node) => {\n      if (node.id === selectedNodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        };\n      }\n      return node;\n    });\n    setNodes(updated);\n  };\n\n  const updateEdgeLabel = (value) => {\n    const updated = manualEdges.map((edge) =>\n      edge.id === selectedEdgeId ? { ...edge, label: value } : edge\n    );\n    setEdges(updated);\n  };\n\n  const onConnect = (params) => {\n    const newEdge = {\n      ...params,\n      id: `edge-${params.source}-${params.target}`,\n      markerEnd: { type: MarkerType.ArrowClosed },\n      style: { strokeWidth: 2 }\n    };\n    const updatedEdges = [...manualEdges, newEdge];\n    setEdges(updatedEdges);\n    pushToHistory(nodes, updatedEdges);\n  };\n\n  const submitFlow = () => {\n    const flowData = getExportJSON();\n    setSubmittedFlow(flowData);\n    setChatbotReady(true);\n    setChatHistory([]);\n    setUserInputs({});\n    setCurrentNodeId(\"1\");\n    setGptMode(false);\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n  };\n  const handleUserMessage = async () => {\n    if (!inputValue.trim()) return;\n\n    const newChat = [...chatHistory, { sender: \"user\", text: inputValue }];\n    setChatHistory(newChat);\n    setInputValue(\"\");\n\n    const systemPromptToSend = submittedFlow?.settings?.system_prompt || systemPrompt;\n    const gptModelToSend = submittedFlow?.settings?.gpt_model || gptModel;\n\n    try {\n      const response = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          messages: newChat,\n          summary: JSON.stringify(userInputs),\n          system_prompt: systemPromptToSend,\n          gpt_model: gptModelToSend\n        })\n      });\n      const data = await response.json();\n      const reply = data.reply;\n      setChatHistory([...newChat, { sender: \"bot\", text: reply }]);\n    } catch (error) {\n      console.error(\"GPT error:\", error);\n    }\n  };\n\n  const exportChat = () => {\n    const content = chatHistory.map(msg => `${msg.sender === \"user\" ? \"You\" : \"Bot\"}: ${msg.text}`).join(\"\\n\\n\");\n    const blob = new Blob([content], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"chat_history.txt\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", fontFamily: \"Segoe UI, sans-serif\" }}>\n      <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\" }}>\n        <div style={{ padding: 10 }}>\n          <button onClick={addNode} style={{ backgroundColor: \"#0284c7\", color: \"white\", marginRight: 5 }}>Add Node</button>\n          <button onClick={exportToJson} style={{ backgroundColor: \"green\", color: \"white\", marginRight: 5 }}>Export JSON</button>\n          <button onClick={deleteNode} style={{ backgroundColor: \"red\", color: \"white\", marginRight: 5 }}>Delete Node</button>\n          <label style={{ marginRight: 5 }}>\n            <input type=\"file\" accept=\".json\" onChange={importJson} style={{ display: \"none\" }} id=\"fileInput\" />\n            <span style={{ backgroundColor: \"orange\", color: \"white\", padding: \"5px 10px\", borderRadius: 4, cursor: \"pointer\" }} onClick={() => document.getElementById(\"fileInput\").click()}>Import JSON</span>\n          </label>\n          <button onClick={submitFlow} style={{ backgroundColor: \"#0ea5e9\", color: \"white\", marginRight: 5 }}>Submit Flow</button>\n          <button onClick={undo} style={{ backgroundColor: \"#f59e0b\", color: \"white\", marginRight: 5 }}>Undo</button>\n          <button onClick={redo} style={{ backgroundColor: \"#8b5cf6\", color: \"white\" }}>Redo</button>\n        </div>\n\n        <div style={{ flex: 1 }}>\n          <ReactFlow\n            nodes={nodes.map(n => ({ ...n, style: getNodeStyle(n.data.type) }))}\n            edges={allEdges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onNodeClick={(_, node) => setSelectedNodeId(node.id)}\n            onEdgeClick={(_, edge) => setSelectedEdgeId(edge.id)}\n            fitView\n          >\n            <Background />\n            <Controls />\n            <MiniMap />\n          </ReactFlow>\n        </div>\n      </div>\n\n      <div style={{ width: \"320px\", padding: 20, borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", position: \"relative\" }}>\n        {/* Prompt Settings Panel */}\n        <div style={{ marginBottom: 10 }}>\n          <h4>🧠 Prompt Settings</h4>\n          <div style={{ fontSize: \"0.9rem\", marginBottom: 4 }}>System Prompt:</div>\n          <textarea\n            value={systemPrompt}\n            onChange={(e) => setSystemPrompt(e.target.value)}\n            rows={4}\n            style={{ width: \"100%\", marginBottom: 8 }}\n          />\n          <div style={{ fontSize: \"0.9rem\", marginBottom: 4 }}>GPT Model:</div>\n          <select\n            value={gptModel}\n            onChange={(e) => setGptModel(e.target.value)}\n            style={{ width: \"100%\", marginBottom: 8 }}\n          >\n            <option value=\"gpt-3.5-turbo\">gpt-3.5-turbo</option>\n            <option value=\"gpt-4\">gpt-4</option>\n          </select>\n        </div>\n\n        {/* Chat History */}\n        <div style={{ flex: 1, overflowY: \"auto\", background: \"#f9f9f9\", padding: 10, border: \"1px solid #ddd\", borderRadius: 4, marginBottom: 10 }}>\n          {chatHistory.map((msg, index) => (\n            <div key={index} style={{ textAlign: msg.sender === \"user\" ? \"right\" : \"left\", margin: \"4px 0\" }}>\n              <span\n                style={{\n                  display: \"inline-block\",\n                  padding: \"6px 10px\",\n                  borderRadius: 12,\n                  background: msg.sender === \"user\" ? \"#e0f2fe\" : \"#ede9fe\",\n                  color: \"#111\",\n                  maxWidth: \"90%\",\n                  wordWrap: \"break-word\"\n                }}\n              >\n                {msg.text}\n              </span>\n            </div>\n          ))}\n        </div>\n\n        {/* Input + Send */}\n        <div style={{ display: \"flex\" }}>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleUserMessage()}\n            placeholder=\"Type your message...\"\n            style={{ flex: 1, padding: \"8px\", borderRadius: \"6px 0 0 6px\", border: \"1px solid #ccc\", fontSize: \"14px\" }}\n          />\n          <button\n            onClick={handleUserMessage}\n            style={{ backgroundColor: \"#6366f1\", color: \"white\", padding: \"8px 14px\", borderRadius: \"0 6px 6px 0\", border: \"none\", cursor: \"pointer\" }}\n          >\n            Send\n          </button>\n        </div>\n\n        {/* Export Chat Button */}\n        <button\n          onClick={exportChat}\n          style={{\n            position: \"absolute\",\n            top: 10,\n            right: 10,\n            padding: \"4px 8px\",\n            backgroundColor: \"orange\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: 4,\n            fontSize: \"12px\"\n          }}\n        >\n          Export Chat\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}