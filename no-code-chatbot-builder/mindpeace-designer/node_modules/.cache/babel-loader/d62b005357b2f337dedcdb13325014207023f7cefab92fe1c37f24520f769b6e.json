{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [chatError, setChatError] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n  const sendMessage = async () => {\n    if (!chatInput.trim()) return;\n    const userMsg = chatInput.trim();\n    setChatMessages(prev => [...prev, {\n      role: \"user\",\n      content: userMsg\n    }]);\n    setChatInput(\"\");\n    setChatError(\"\");\n    try {\n      const payload = getExportJSON();\n      const systemPrompt = payload.settings.system_prompt;\n      const gptModel = payload.settings.gpt_model;\n      const summary = Object.values(payload.nodes).filter(n => n.capture).map(n => `${n.capture}: [user response]`).join(\", \");\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMsg,\n          summary,\n          system_prompt: systemPrompt,\n          gpt_model: gptModel\n        })\n      });\n      const data = await res.json();\n      if (data.reply) {\n        setChatMessages(prev => [...prev, {\n          role: \"assistant\",\n          content: data.reply\n        }]);\n      } else {\n        setChatError(\"Something went wrong. Try again.\");\n      }\n    } catch (err) {\n      setChatError(\"Backend error. Please check the server.\");\n    }\n  };\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  // Other helper functions like addNode, deleteNode, exportJSON, updateNodeField, updateEdgeLabel...\n  // [You can keep them same from your previous working code — they don’t need to change.]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"350px\",\n        padding: \"20px\",\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          overflowY: \"auto\",\n          flexGrow: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), chatMessages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: msg.role === \"user\" ? \"#E0F2FE\" : \"#DCFCE7\",\n            padding: 8,\n            borderRadius: 8,\n            marginBottom: 6\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.role === \"user\" ? \"You\" : \"MindPeace\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), \" \", msg.content]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)), !chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: chatInput,\n          onChange: e => setChatInput(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && sendMessage(),\n          placeholder: \"Type your message...\",\n          style: {\n            width: \"100%\",\n            padding: \"8px\",\n            borderRadius: \"6px\",\n            border: \"1px solid #ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), chatError && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\",\n          marginTop: 4\n        },\n        children: chatError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6obosLPVPoN1ykTS6Ic5MXUkBRc=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","chatInput","setChatInput","chatMessages","setChatMessages","chatError","setChatError","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","submitFlow","payload","getExportJSON","res","fetch","method","headers","body","JSON","stringify","ok","alert","error","sendMessage","trim","userMsg","prev","role","content","systemPrompt","settings","system_prompt","gptModel","gpt_model","summary","Object","values","filter","join","json","reply","err","output","forEach","nodeObj","keys","onNodeClick","_","onEdgeClick","edge","width","height","display","children","borderLeft","flexDirection","justifyContent","overflowY","flexGrow","fileName","_jsxFileName","lineNumber","columnNumber","msg","idx","marginBottom","marginTop","value","onChange","onKeyDown","key","placeholder","color","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [chatError, setChatError] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!chatInput.trim()) return;\n\n    const userMsg = chatInput.trim();\n    setChatMessages((prev) => [...prev, { role: \"user\", content: userMsg }]);\n    setChatInput(\"\");\n    setChatError(\"\");\n\n    try {\n      const payload = getExportJSON();\n      const systemPrompt = payload.settings.system_prompt;\n      const gptModel = payload.settings.gpt_model;\n\n      const summary = Object.values(payload.nodes)\n        .filter((n) => n.capture)\n        .map((n) => `${n.capture}: [user response]`)\n        .join(\", \");\n\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          message: userMsg,\n          summary,\n          system_prompt: systemPrompt,\n          gpt_model: gptModel\n        })\n      });\n\n      const data = await res.json();\n      if (data.reply) {\n        setChatMessages((prev) => [...prev, { role: \"assistant\", content: data.reply }]);\n      } else {\n        setChatError(\"Something went wrong. Try again.\");\n      }\n    } catch (err) {\n      setChatError(\"Backend error. Please check the server.\");\n    }\n  };\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    return output;\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  // Other helper functions like addNode, deleteNode, exportJSON, updateNodeField, updateEdgeLabel...\n  // [You can keep them same from your previous working code — they don’t need to change.]\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* LEFT — React Flow Editor (Unchanged) */}\n      {/* Paste your previous working left panel here, unchanged */}\n\n      {/* RIGHT — Chatbot Panel */}\n      <div style={{ width: \"350px\", padding: \"20px\", borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n        <div style={{ overflowY: \"auto\", flexGrow: 1 }}>\n          <h3>MindPeace Chat</h3>\n          {chatMessages.map((msg, idx) => (\n            <div key={idx} style={{ background: msg.role === \"user\" ? \"#E0F2FE\" : \"#DCFCE7\", padding: 8, borderRadius: 8, marginBottom: 6 }}>\n              <strong>{msg.role === \"user\" ? \"You\" : \"MindPeace\"}:</strong> {msg.content}\n            </div>\n          ))}\n          {!chatbotReady && <div>Please submit your flow to activate the chatbot.</div>}\n        </div>\n        {chatbotReady && (\n          <div style={{ marginTop: \"10px\" }}>\n            <input\n              type=\"text\"\n              value={chatInput}\n              onChange={(e) => setChatInput(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n              placeholder=\"Type your message...\"\n              style={{ width: \"100%\", padding: \"8px\", borderRadius: \"6px\", border: \"1px solid #ccc\" }}\n            />\n          </div>\n        )}\n        {chatError && <div style={{ color: \"red\", marginTop: 4 }}>{chatError}</div>}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}