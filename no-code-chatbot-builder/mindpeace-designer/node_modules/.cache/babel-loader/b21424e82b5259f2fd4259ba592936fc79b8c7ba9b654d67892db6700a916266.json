{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  // Hard-disable page scrolling (no browser scrollbar at all)\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt Editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n\n  // Shared card style (Node/Prompt/Edge)\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\"\n  };\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(({\n      id,\n      data\n    }) => {\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else {\n        alert(\"Submission failed.\");\n      }\n    } catch {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"40px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\",\n            cursor: \"pointer\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8\n        },\n        children: opts.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            padding: \"8px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\",\n            cursor: \"pointer\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"40px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Edge cleanup\n  const handleEdgesChange = changes => {\n    const removedIds = new Set(changes.filter(c => c.type === \"remove\" && c.id).map(c => c.id));\n    const removedEdges = manualEdges.filter(e => removedIds.has(e.id));\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n    const updatedNodes = nodes.map(n => {\n      let data = {\n        ...n.data\n      };\n      let mutated = false;\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = {\n              ...data.options\n            };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = {\n              ...data.options\n            };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n      return mutated ? {\n        ...n,\n        data\n      } : n;\n    });\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter(e => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n      overflow: \"hidden\",\n      // lock app scrolling\n      overscrollBehavior: \"contain\" // avoid bounce on some browsers\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          height: 64,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          padding: \"0 12px\",\n          background: \"#ffffffcc\",\n          backdropFilter: \"blur(6px)\",\n          borderBottom: \"1px solid #e5e7eb\",\n          zIndex: 12,\n          boxSizing: \"border-box\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            gap: 10,\n            padding: \"10px 14px\",\n            background: \"#fff\",\n            borderRadius: 12,\n            border: \"1px solid #e5e7eb\",\n            boxShadow: \"0 6px 14px rgba(0,0,0,0.08)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: 10,\n              height: 10,\n              borderRadius: \"50%\",\n              background: \"#0284c7\",\n              boxShadow: \"0 0 0 3px rgba(2,132,199,0.15)\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontWeight: 700,\n              color: \"#0f172a\"\n            },\n            children: \"Your AI Chatbot Designer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: 6,\n              color: \"#64748b\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: pill(\"#0ea5e9\"),\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\xB7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: pill(\"#16a34a\"),\n              children: \"Visual\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\xB7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: pill(\"#7c3aed\"),\n              children: \"Code-Free\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#38bdf8\"),\n            onClick: () => {\n              const newId = nodeCounter.toString();\n              nodeCounter++;\n              const position = selectedNodeId ? {\n                x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n                y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n              } : {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              };\n              const newNode = {\n                id: newId,\n                data: {\n                  message: `This is node ${newId}`,\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position,\n                type: \"default\"\n              };\n              const updatedNodes = [...nodes, newNode];\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            children: \"Add Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#22c55e\"),\n            onClick: () => {\n              const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n                type: \"application/json\"\n              });\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"conversation_data.json\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            },\n            children: \"Export JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#ef4444\"),\n            onClick: () => {\n              if (!selectedNodeId) return;\n              const deletedId = selectedNodeId;\n              const updatedNodesBase = nodes.filter(n => n.id !== deletedId);\n              const updatedEdges = manualEdges.filter(e => e.source !== deletedId && e.target !== deletedId);\n              const updatedNodes = updatedNodesBase.map(n => {\n                const data = {\n                  ...n.data\n                };\n                let mutated = false;\n                if (data.next === deletedId) {\n                  data.next = \"\";\n                  mutated = true;\n                }\n                if (data.options && Object.keys(data.options).length) {\n                  const opts = {\n                    ...data.options\n                  };\n                  for (const [k, v] of Object.entries(opts)) {\n                    if (v === deletedId) delete opts[k];\n                  }\n                  if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                    data.options = opts;\n                    mutated = true;\n                  }\n                }\n                return mutated ? {\n                  ...n,\n                  data\n                } : n;\n              });\n              setNodes(updatedNodes);\n              setEdges(updatedEdges);\n              setSelectedNodeId(null);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            children: \"Delete Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#10b981\"),\n            onClick: submitFlow,\n            children: \"Submit Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#a855f7\"),\n            onClick: undo,\n            children: \"Undo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: btn(\"#f59e0b\"),\n            onClick: redo,\n            children: \"Redo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 76,\n          left: 10,\n          bottom: 10,\n          width: 350,\n          boxSizing: \"border-box\",\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 28,\n          paddingLeft: 4,\n          scrollbarGutter: \"stable both-edges\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n          zIndex: 11\n        },\n        children: [selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: [\"Editing Node: \", selectedNode.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  message: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const newType = e.target.value;\n              const updatedNodes = nodes.map(node => {\n                if (node.id !== selectedNodeId) return node;\n                const nd = {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    type: newType\n                  }\n                };\n                if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                  nd.data.options = {};\n                }\n                return nd;\n              });\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  capture: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  next: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PromptEditor, {\n          promptSettings: promptSettings,\n          setPromptSettings: setPromptSettings,\n          containerStyle: cardStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 11\n        }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: \"Editing Edge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedEdge.label,\n            onChange: e => {\n              const newLabel = e.target.value;\n              const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n                ...edge,\n                label: newLabel\n              } : edge);\n              const sourceId = selectedEdge.source;\n              const targetId = selectedEdge.target;\n              const updatedNodes = nodes.map(node => {\n                if (node.id === sourceId) {\n                  const updated = {\n                    ...node\n                  };\n                  if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                    const newOptions = {\n                      ...updated.data.options\n                    };\n                    delete newOptions[selectedEdge.label];\n                    newOptions[newLabel] = targetId;\n                    updated.data.options = newOptions;\n                  } else {\n                    updated.data.next = targetId;\n                  }\n                  return updated;\n                }\n                return node;\n              });\n              setEdges(updatedEdges);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: handleEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 320,\n        margin: 10,\n        padding: 12,\n        background: \"#fff7ed\",\n        border: \"1px solid #f59e0b\",\n        borderRadius: 10,\n        boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"calc(100vh - 20px)\",\n        boxSizing: \"border-box\",\n        overflow: \"hidden\" // no panel scrollbar\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 8,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"MindPeace Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: {\n            background: \"#6366f1\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"6px\",\n            padding: \"4px 8px\",\n            fontSize: \"12px\",\n            cursor: \"pointer\"\n          },\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 6,\n          paddingLeft: 2,\n          paddingTop: 2,\n          background: \"transparent\",\n          borderRadius: 8\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 8\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\",\n              boxSizing: \"border-box\",\n              overflowWrap: \"anywhere\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 952,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 950,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            opacity: 0.8\n          },\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 937,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0,\n          paddingTop: 8,\n          background: \"transparent\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 515,\n    columnNumber: 5\n  }, this);\n}\n\n/* helper styles */\n_s(App, \"Hl+EyM85h9LffewKEj/fqFbqL3c=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nfunction btn(bg) {\n  return {\n    background: bg,\n    color: \"white\",\n    borderRadius: 6,\n    padding: \"6px 12px\",\n    border: \"none\",\n    cursor: \"pointer\"\n  };\n}\nfunction pill(color) {\n  return {\n    padding: \"2px 8px\",\n    borderRadius: 999,\n    border: `1px solid ${color}22`,\n    background: `${color}11`,\n    color,\n    fontWeight: 600,\n    fontSize: 12\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","useEffect","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","PromptEditor","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","prevHtmlOverflow","document","documentElement","style","overflow","prevBodyOverflow","body","prevBodyMargin","margin","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","promptSettings","setPromptSettings","system_prompt","gpt_model","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","cardStyle","background","padding","border","borderRadius","width","boxSizing","marginRight","boxShadow","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","color","autoGeneratedEdges","existing","Set","map","source","target","autoEdges","node","_node$data","has","animated","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","user_inputs","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","cursor","opts","flexDirection","opt","checked","includes","filter","o","join","marginTop","handleEdgesChange","changes","removedIds","c","removedEdges","updatedNodes","mutated","k","v","entries","remainingEdges","overscrollBehavior","top","left","right","alignItems","justifyContent","backdropFilter","borderBottom","zIndex","fontWeight","pill","btn","newId","toString","Math","random","newNode","blob","Blob","url","URL","createObjectURL","link","createElement","href","download","appendChild","click","removeChild","deletedId","updatedNodesBase","updatedEdges","bottom","overflowY","overflowX","paddingRight","paddingLeft","scrollbarGutter","newType","nd","containerStyle","newLabel","edge","sourceId","targetId","updated","newOptions","onConnect","params","prompt","edgeId","onNodeClick","_","onEdgeClick","fitView","edgeLabelMode","marginBottom","flexShrink","textContent","fontSize","paddingTop","index","alignSelf","overflowWrap","opacity","_c","bg","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\",\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\",\n  },\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  // Hard-disable page scrolling (no browser scrollbar at all)\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt Editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\",\n  });\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  // Shared card style (Node/Prompt/Edge)\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n  };\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300,\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\",\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model,\n      },\n      nodes: {},\n    };\n    nodes.forEach(({ id, data }) => {\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else {\n        alert(\"Submission failed.\");\n      }\n    } catch {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message,\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #f59e0b\",\n              background: \"#fff7ed\",\n              height: \"40px\",\n              boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n              cursor: \"pointer\",\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n          {opts.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => handleUserResponse(opt)}\n              style={{\n                padding: \"8px\",\n                width: \"100%\",\n                borderRadius: 6,\n                border: \"1px solid #0369a1\",\n                background: \"#0284c7\",\n                color: \"white\",\n                cursor: \"pointer\",\n              }}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div\n              key={opt}\n              style={{\n                background: \"#facc15\",\n                padding: \"4px 8px\",\n                borderRadius: \"4px\",\n                margin: \"4px 0\",\n              }}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\",\n              cursor: \"pointer\",\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #f59e0b\",\n              background: \"#fff7ed\",\n              height: \"40px\",\n              boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n              cursor: \"pointer\",\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // Edge cleanup\n  const handleEdgesChange = (changes) => {\n    const removedIds = new Set(\n      changes.filter((c) => c.type === \"remove\" && c.id).map((c) => c.id)\n    );\n    const removedEdges = manualEdges.filter((e) => removedIds.has(e.id));\n\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n\n    const updatedNodes = nodes.map((n) => {\n      let data = { ...n.data };\n      let mutated = false;\n\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = { ...data.options };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = { ...data.options };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n\n      return mutated ? { ...n, data } : n;\n    });\n\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter((e) => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        overflow: \"hidden\",            // lock app scrolling\n        overscrollBehavior: \"contain\", // avoid bounce on some browsers\n      }}\n    >\n      {/* Left workspace */}\n      <div style={{ flex: 1, position: \"relative\", overflow: \"hidden\" }}>\n        {/* Header BAR with title box + actions */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            padding: \"0 12px\",\n            background: \"#ffffffcc\",\n            backdropFilter: \"blur(6px)\",\n            borderBottom: \"1px solid #e5e7eb\",\n            zIndex: 12,\n            boxSizing: \"border-box\",\n          }}\n        >\n          {/* Title in rounded shadow box */}\n          <div\n            style={{\n              display: \"inline-flex\",\n              alignItems: \"center\",\n              gap: 10,\n              padding: \"10px 14px\",\n              background: \"#fff\",\n              borderRadius: 12,\n              border: \"1px solid #e5e7eb\",\n              boxShadow: \"0 6px 14px rgba(0,0,0,0.08)\",\n            }}\n          >\n            <div\n              style={{\n                width: 10,\n                height: 10,\n                borderRadius: \"50%\",\n                background: \"#0284c7\",\n                boxShadow: \"0 0 0 3px rgba(2,132,199,0.15)\",\n              }}\n            />\n            <div style={{ fontWeight: 700, color: \"#0f172a\" }}>\n              Your AI Chatbot Designer\n            </div>\n            <div style={{ display: \"flex\", alignItems: \"center\", gap: 6, color: \"#64748b\" }}>\n              <span style={pill(\"#0ea5e9\")}>Fast</span>\n              <span>·</span>\n              <span style={pill(\"#16a34a\")}>Visual</span>\n              <span>·</span>\n              <span style={pill(\"#7c3aed\")}>Code-Free</span>\n            </div>\n          </div>\n\n          {/* Main actions */}\n          <div style={{ display: \"flex\", gap: 10 }}>\n            <button\n              style={btn(\"#38bdf8\")}\n              onClick={() => {\n                const newId = nodeCounter.toString();\n                nodeCounter++;\n                const position = selectedNodeId\n                  ? {\n                      x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                      y: nodes.find((n) => n.id === selectedNodeId).position.y + 50,\n                    }\n                  : { x: Math.random() * 400, y: Math.random() * 400 };\n                const newNode = {\n                  id: newId,\n                  data: {\n                    message: `This is node ${newId}`,\n                    type: \"choice\",\n                    options: {},\n                    capture: \"\",\n                    next: \"\",\n                  },\n                  position,\n                  type: \"default\",\n                };\n                const updatedNodes = [...nodes, newNode];\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }}\n            >\n              Add Node\n            </button>\n\n            <button\n              style={btn(\"#22c55e\")}\n              onClick={() => {\n                const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n                  type: \"application/json\",\n                });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"conversation_data.json\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n            >\n              Export JSON\n            </button>\n\n            <button\n              style={btn(\"#ef4444\")}\n              onClick={() => {\n                if (!selectedNodeId) return;\n\n                const deletedId = selectedNodeId;\n\n                const updatedNodesBase = nodes.filter((n) => n.id !== deletedId);\n                const updatedEdges = manualEdges.filter(\n                  (e) => e.source !== deletedId && e.target !== deletedId\n                );\n\n                const updatedNodes = updatedNodesBase.map((n) => {\n                  const data = { ...n.data };\n                  let mutated = false;\n\n                  if (data.next === deletedId) {\n                    data.next = \"\";\n                    mutated = true;\n                  }\n                  if (data.options && Object.keys(data.options).length) {\n                    const opts = { ...data.options };\n                    for (const [k, v] of Object.entries(opts)) {\n                      if (v === deletedId) delete opts[k];\n                    }\n                    if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                      data.options = opts;\n                      mutated = true;\n                    }\n                  }\n                  return mutated ? { ...n, data } : n;\n                });\n\n                setNodes(updatedNodes);\n                setEdges(updatedEdges);\n                setSelectedNodeId(null);\n                pushToHistory(updatedNodes, updatedEdges);\n              }}\n            >\n              Delete Node\n            </button>\n\n            <button style={btn(\"#10b981\")} onClick={submitFlow}>\n              Submit Flow\n            </button>\n          </div>\n\n          {/* Undo / Redo */}\n          <div style={{ display: \"flex\", gap: 10 }}>\n            <button style={btn(\"#a855f7\")} onClick={undo}>\n              Undo\n            </button>\n            <button style={btn(\"#f59e0b\")} onClick={redo}>\n              Redo\n            </button>\n          </div>\n        </div>\n\n        {/* Inspector column */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 76,\n            left: 10,\n            bottom: 10,\n            width: 350,\n            boxSizing: \"border-box\",\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 28,\n            paddingLeft: 4,\n            scrollbarGutter: \"stable both-edges\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 12,\n            zIndex: 11,\n          }}\n        >\n          {selectedNode && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Node: {selectedNode.id}</h4>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, message: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\", height: 60 }}\n              />\n              <label>Type:</label>\n              <select\n                value={selectedNode.data.type}\n                onChange={(e) => {\n                  const newType = e.target.value;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id !== selectedNodeId) return node;\n                    const nd = { ...node, data: { ...node.data, type: newType } };\n                    if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                      nd.data.options = {};\n                    }\n                    return nd;\n                  });\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              >\n                <option value=\"choice\">choice</option>\n                <option value=\"input\">input</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n              <label>Capture Field:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.capture}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, capture: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n              <label>Next Node ID:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.next}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, next: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n\n          <PromptEditor\n            promptSettings={promptSettings}\n            setPromptSettings={setPromptSettings}\n            containerStyle={cardStyle}\n          />\n\n          {selectedEdge && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Edge</h4>\n              <label>Option Label:</label>\n              <input\n                type=\"text\"\n                value={selectedEdge.label}\n                onChange={(e) => {\n                  const newLabel = e.target.value;\n                  const updatedEdges = manualEdges.map((edge) =>\n                    edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n                  );\n                  const sourceId = selectedEdge.source;\n                  const targetId = selectedEdge.target;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id === sourceId) {\n                      const updated = { ...node };\n                      if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                        const newOptions = { ...updated.data.options };\n                        delete newOptions[selectedEdge.label];\n                        newOptions[newLabel] = targetId;\n                        updated.data.options = newOptions;\n                      } else {\n                        updated.data.next = targetId;\n                      }\n                      return updated;\n                    }\n                    return node;\n                  });\n                  setEdges(updatedEdges);\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, updatedEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Flow canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type),\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={handleEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge(\n              { ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label },\n              manualEdges\n            );\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          }}\n          onEdgeClick={(_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel — single color, only vertical scroll inside messages */}\n      <div\n        style={{\n          width: 320,\n          margin: 10,\n          padding: 12,\n          background: \"#fff7ed\",\n          border: \"1px solid #f59e0b\",\n          borderRadius: 10,\n          boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"calc(100vh - 20px)\",\n          boxSizing: \"border-box\",\n          overflow: \"hidden\", // no panel scrollbar\n        }}\n      >\n        <div\n          style={{\n            fontWeight: \"bold\",\n            marginBottom: 8,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            flexShrink: 0,\n          }}\n        >\n          <span>MindPeace Chat</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"chat_history.txt\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n              style={{\n                background: \"#6366f1\",\n                color: \"white\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                padding: \"4px 8px\",\n                fontSize: \"12px\",\n                cursor: \"pointer\",\n              }}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        {/* messages area — ONLY this scrolls vertically */}\n        <div\n          style={{\n            flex: 1,\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 6,\n            paddingLeft: 2,\n            paddingTop: 2,\n            background: \"transparent\",\n            borderRadius: 8,\n          }}\n        >\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n              {chatHistory.map((entry, index) => (\n                <div\n                  key={index}\n                  style={{\n                    alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                    background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n                    padding: 8,\n                    borderRadius: 6,\n                    maxWidth: \"90%\",\n                    boxSizing: \"border-box\",\n                    overflowWrap: \"anywhere\",\n                  }}\n                >\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div style={{ opacity: 0.8 }}>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {/* input area */}\n        {chatbotReady && (\n          <div style={{ flexShrink: 0, paddingTop: 8, background: \"transparent\" }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/* helper styles */\nfunction btn(bg) {\n  return {\n    background: bg,\n    color: \"white\",\n    borderRadius: 6,\n    padding: \"6px 12px\",\n    border: \"none\",\n    cursor: \"pointer\",\n  };\n}\n\nfunction pill(color) {\n  return {\n    padding: \"2px 8px\",\n    borderRadius: 999,\n    border: `1px solid ${color}22`,\n    background: `${color}11`,\n    color,\n    fontWeight: 600,\n    fontSize: 12,\n  };\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACnE,OAAOC,SAAS,IACdC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,OAAO,EACPC,UAAU,QACL,WAAW;AAClB,OAAO,0BAA0B;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE;IACJC,OAAO,EACL,oHAAoH;IACtHC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE,CAAC,CAAC;IACXC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE;EACR,CAAC;EACDC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC;EAC1BN,IAAI,EAAE;AACR,CAAC,CACF;AAED,MAAMO,YAAY,GAAG,EAAE;AACvB,IAAIC,WAAW,GAAG,CAAC;AAEnB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B;EACA1B,SAAS,CAAC,MAAM;IACd,MAAM2B,gBAAgB,GAAGC,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,QAAQ;IAChE,MAAMC,gBAAgB,GAAGJ,QAAQ,CAACK,IAAI,CAACH,KAAK,CAACC,QAAQ;IACrD,MAAMG,cAAc,GAAGN,QAAQ,CAACK,IAAI,CAACH,KAAK,CAACK,MAAM;IACjDP,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,QAAQ,GAAG,QAAQ;IAClDH,QAAQ,CAACK,IAAI,CAACH,KAAK,CAACC,QAAQ,GAAG,QAAQ;IACvCH,QAAQ,CAACK,IAAI,CAACH,KAAK,CAACK,MAAM,GAAG,GAAG;IAChC,OAAO,MAAM;MACXP,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,QAAQ,GAAGJ,gBAAgB;MAC1DC,QAAQ,CAACK,IAAI,CAACH,KAAK,CAACC,QAAQ,GAAGC,gBAAgB;MAC/CJ,QAAQ,CAACK,IAAI,CAACH,KAAK,CAACK,MAAM,GAAGD,cAAc;IAC7C,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACE,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGjC,aAAa,CAACO,YAAY,CAAC;EACpE,MAAM,CAAC2B,WAAW,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGnC,aAAa,CAACiB,YAAY,CAAC;EAC1E,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAG9C,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAAC+C,cAAc,EAAEC,iBAAiB,CAAC,GAAGhD,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACiD,YAAY,EAAEC,eAAe,CAAC,GAAGlD,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACmD,aAAa,EAAEC,gBAAgB,CAAC,GAAGpD,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACqD,aAAa,EAAEC,gBAAgB,CAAC,GAAGtD,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACuD,OAAO,EAAEC,UAAU,CAAC,GAAGxD,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACyD,WAAW,EAAEC,cAAc,CAAC,GAAG1D,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC2D,UAAU,EAAEC,aAAa,CAAC,GAAG5D,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAAC6D,UAAU,EAAEC,aAAa,CAAC,GAAG9D,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC+D,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhE,QAAQ,CAAC,EAAE,CAAC;;EAEpE;EACA,MAAM,CAACiE,cAAc,EAAEC,iBAAiB,CAAC,GAAGlE,QAAQ,CAAC;IACnDmE,aAAa,EACX,4JAA4J;IAC9JC,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAMC,OAAO,GAAGnE,MAAM,CAAC,CAAC;IAAEqC,KAAK,EAAExB,YAAY;IAAEuD,KAAK,EAAE5C;EAAa,CAAC,CAAC,CAAC;EACtE,MAAM6C,YAAY,GAAGrE,MAAM,CAAC,CAAC,CAAC;EAE9B,MAAMsE,YAAY,GAAGjC,KAAK,CAACkC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC1D,EAAE,KAAK6B,cAAc,CAAC;EAC/D,MAAM8B,YAAY,GAAGjC,WAAW,CAAC+B,IAAI,CAAEG,CAAC,IAAKA,CAAC,CAAC5D,EAAE,KAAK+B,cAAc,CAAC;;EAErE;EACA,MAAM8B,SAAS,GAAG;IAChBC,UAAU,EAAE,SAAS;IACrBC,OAAO,EAAE,EAAE;IACXC,MAAM,EAAE,mBAAmB;IAC3BC,YAAY,EAAE,EAAE;IAChBC,KAAK,EAAE,MAAM;IACbC,SAAS,EAAE,YAAY;IACvBC,WAAW,EAAE,EAAE;IACfC,SAAS,EAAE;EACb,CAAC;EAED,MAAMC,aAAa,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC5C,MAAMC,YAAY,GAAG;MAAElD,KAAK,EAAEgD,QAAQ;MAAEjB,KAAK,EAAEkB;IAAS,CAAC;IACzD,MAAME,UAAU,GAAGrB,OAAO,CAACsB,OAAO,CAACC,KAAK,CAAC,CAAC,EAAErB,YAAY,CAACoB,OAAO,GAAG,CAAC,CAAC;IACrED,UAAU,CAACG,IAAI,CAACJ,YAAY,CAAC;IAC7BpB,OAAO,CAACsB,OAAO,GAAGD,UAAU;IAC5BnB,YAAY,CAACoB,OAAO,EAAE;EACxB,CAAC;EAED,MAAMG,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIvB,YAAY,CAACoB,OAAO,GAAG,CAAC,EAAE;MAC5BpB,YAAY,CAACoB,OAAO,EAAE;MACtB,MAAM;QAAEpD,KAAK;QAAE+B;MAAM,CAAC,GAAGD,OAAO,CAACsB,OAAO,CAACpB,YAAY,CAACoB,OAAO,CAAC;MAC9DnD,QAAQ,CAACD,KAAK,CAAC;MACfI,QAAQ,CAAC2B,KAAK,CAAC;IACjB;EACF,CAAC;EAED,MAAMyB,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIxB,YAAY,CAACoB,OAAO,GAAGtB,OAAO,CAACsB,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;MACrDzB,YAAY,CAACoB,OAAO,EAAE;MACtB,MAAM;QAAEpD,KAAK;QAAE+B;MAAM,CAAC,GAAGD,OAAO,CAACsB,OAAO,CAACpB,YAAY,CAACoB,OAAO,CAAC;MAC9DnD,QAAQ,CAACD,KAAK,CAAC;MACfI,QAAQ,CAAC2B,KAAK,CAAC;IACjB;EACF,CAAC;EAED,MAAM2B,YAAY,GAAI9E,IAAI,IAAK;IAC7B,MAAM+E,SAAS,GAAG;MAChBjB,YAAY,EAAE,EAAE;MAChBF,OAAO,EAAE,EAAE;MACXM,SAAS,EAAE,kBAAkB;MAC7Bc,UAAU,EAAE,UAAU;MACtBC,QAAQ,EAAE,YAAY;MACtBC,UAAU,EAAE,sBAAsB;MAClCC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE;IACZ,CAAC;IACD,QAAQpF,IAAI;MACV,KAAK,QAAQ;QACX,OAAO;UAAE,GAAG+E,SAAS;UAAEpB,UAAU,EAAE,SAAS;UAAEE,MAAM,EAAE,mBAAmB;UAAEwB,KAAK,EAAE;QAAQ,CAAC;MAC7F,KAAK,OAAO;QACV,OAAO;UAAE,GAAGN,SAAS;UAAEpB,UAAU,EAAE,SAAS;UAAEE,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,cAAc;QACjB,OAAO;UAAE,GAAGkB,SAAS;UAAEpB,UAAU,EAAE,SAAS;UAAEE,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,KAAK;QACR,OAAO;UAAE,GAAGkB,SAAS;UAAEpB,UAAU,EAAE,SAAS;UAAEE,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,KAAK;QACR,OAAO;UAAE,GAAGkB,SAAS;UAAEpB,UAAU,EAAE,SAAS;UAAEE,MAAM,EAAE;QAAoB,CAAC;MAC7E;QACE,OAAO;UAAE,GAAGkB,SAAS;UAAEpB,UAAU,EAAE,SAAS;UAAEE,MAAM,EAAE;QAAoB,CAAC;IAC/E;EACF,CAAC;EAED,MAAMyB,kBAAkB,GAAGxG,OAAO,CAAC,MAAM;IACvC,MAAMyG,QAAQ,GAAG,IAAIC,GAAG,CAACjE,WAAW,CAACkE,GAAG,CAAEhC,CAAC,IAAK,GAAGA,CAAC,CAACiC,MAAM,KAAKjC,CAAC,CAACkC,MAAM,EAAE,CAAC,CAAC;IAC5E,MAAMC,SAAS,GAAG,EAAE;IACpB,KAAK,MAAMC,IAAI,IAAIzE,KAAK,EAAE;MAAA,IAAA0E,UAAA;MACxB,MAAMH,MAAM,IAAAG,UAAA,GAAGD,IAAI,CAAC/F,IAAI,cAAAgG,UAAA,uBAATA,UAAA,CAAW3F,IAAI;MAC9B,IAAIwF,MAAM,IAAI,CAACJ,QAAQ,CAACQ,GAAG,CAAC,GAAGF,IAAI,CAAChG,EAAE,KAAK8F,MAAM,EAAE,CAAC,EAAE;QACpDC,SAAS,CAAClB,IAAI,CAAC;UACb7E,EAAE,EAAE,QAAQgG,IAAI,CAAChG,EAAE,IAAI8F,MAAM,EAAE;UAC/BD,MAAM,EAAEG,IAAI,CAAChG,EAAE;UACf8F,MAAM;UACN3F,IAAI,EAAE,SAAS;UACfgG,QAAQ,EAAE,KAAK;UACflF,KAAK,EAAE;YAAEmF,eAAe,EAAE,KAAK;YAAEC,MAAM,EAAE;UAAO,CAAC;UACjDC,SAAS,EAAE;YAAEnG,IAAI,EAAER,UAAU,CAAC4G;UAAY,CAAC;UAC3CC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;IACF;IACA,OAAOT,SAAS;EAClB,CAAC,EAAE,CAACxE,KAAK,EAAEG,WAAW,CAAC,CAAC;EAExB,MAAM+E,QAAQ,GAAG,CAAC,GAAG/E,WAAW,EAAE,GAAG+D,kBAAkB,CAAC;EAExD,MAAMiB,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,MAAM,GAAG;MACbC,QAAQ,EAAE;QACRzD,aAAa,EAAEF,cAAc,CAACE,aAAa;QAC3CC,SAAS,EAAEH,cAAc,CAACG;MAC5B,CAAC;MACD7B,KAAK,EAAE,CAAC;IACV,CAAC;IACDA,KAAK,CAACsF,OAAO,CAAC,CAAC;MAAE7G,EAAE;MAAEC;IAAK,CAAC,KAAK;MAC9B,MAAM;QAAEC,OAAO;QAAEC,IAAI;QAAEC,OAAO;QAAEC,OAAO;QAAEC;MAAK,CAAC,GAAGL,IAAI;MACtD,MAAM6G,OAAO,GAAG;QAAE5G,OAAO;QAAEC;MAAK,CAAC;MACjC,IAAIC,OAAO,IAAI2G,MAAM,CAACC,IAAI,CAAC5G,OAAO,CAAC,CAAC4E,MAAM,EAAE8B,OAAO,CAAC1G,OAAO,GAAGA,OAAO;MACrE,IAAIC,OAAO,EAAEyG,OAAO,CAACzG,OAAO,GAAGA,OAAO;MACtC,IAAIC,IAAI,EAAEwG,OAAO,CAACxG,IAAI,GAAGA,IAAI;MAC7BqG,MAAM,CAACpF,KAAK,CAACvB,EAAE,CAAC,GAAG8G,OAAO;IAC5B,CAAC,CAAC;IACF,OAAOH,MAAM;EACf,CAAC;EACD,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,OAAO,GAAGR,aAAa,CAAC,CAAC;IAC/B,IAAI;MACF,MAAMS,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QACtDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/ClG,IAAI,EAAEmG,IAAI,CAACC,SAAS,CAACN,OAAO;MAC9B,CAAC,CAAC;MACF,IAAIC,GAAG,CAACM,EAAE,EAAE;QAAA,IAAAC,eAAA;QACV,MAAMC,QAAQ,GAAG,EAAAD,eAAA,GAAAR,OAAO,CAAC3F,KAAK,CAAC,GAAG,CAAC,cAAAmG,eAAA,uBAAlBA,eAAA,CAAoBxH,OAAO,KAAI,cAAc;QAC9DkC,gBAAgB,CAAC8E,OAAO,CAAC;QACzBhF,eAAe,CAAC,IAAI,CAAC;QACrBQ,cAAc,CAAC,CAAC;UAAEkF,MAAM,EAAE,KAAK;UAAE1H,OAAO,EAAEyH;QAAS,CAAC,CAAC,CAAC;QACtD/E,aAAa,CAAC,CAAC,CAAC,CAAC;QACjBE,aAAa,CAAC,EAAE,CAAC;QACjBR,gBAAgB,CAAC,GAAG,CAAC;QACrBE,UAAU,CAAC,KAAK,CAAC;QACjBqF,KAAK,CAAC,8BAA8B,CAAC;MACvC,CAAC,MAAM;QACLA,KAAK,CAAC,oBAAoB,CAAC;MAC7B;IACF,CAAC,CAAC,MAAM;MACNA,KAAK,CAAC,gBAAgB,CAAC;IACzB;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;IAAA,IAAAC,oBAAA,EAAAC,oBAAA;IAC7C,IAAI,CAAC9F,aAAa,EAAE;IAEpB,MAAM+F,cAAc,GAAG,CAAC,GAAGzF,WAAW,EAAE;MAAEmF,MAAM,EAAE,MAAM;MAAE1H,OAAO,EAAE6H;IAAS,CAAC,CAAC;IAC9ErF,cAAc,CAACwF,cAAc,CAAC;IAE9B,MAAMC,gBAAgB,GAAGD,cAAc,CAACtC,GAAG,CAAEwC,KAAK,KAAM;MACtDC,IAAI,EAAED,KAAK,CAACR,MAAM,KAAK,MAAM,GAAG,MAAM,GAAG,WAAW;MACpDU,OAAO,EAAEF,KAAK,CAAClI;IACjB,CAAC,CAAC,CAAC;IAEH,IAAIqC,OAAO,EAAE;MACX,IAAI;QACF,MAAM4E,GAAG,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACpDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/ClG,IAAI,EAAEmG,IAAI,CAACC,SAAS,CAAC;YACnBe,YAAY,EAAEJ,gBAAgB;YAC9BhF,aAAa,EAAEhB,aAAa,CAACyE,QAAQ,CAACzD,aAAa;YACnDC,SAAS,EAAEjB,aAAa,CAACyE,QAAQ,CAACxD,SAAS;YAC3CoF,WAAW,EAAE7F;UACf,CAAC;QACH,CAAC,CAAC;QACF,MAAM1C,IAAI,GAAG,MAAMkH,GAAG,CAACsB,IAAI,CAAC,CAAC;QAC7B,MAAMC,QAAQ,GAAGzI,IAAI,CAAC0I,KAAK,IAAI,uBAAuB;QACtDjG,cAAc,CAAEkG,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;UAAEhB,MAAM,EAAE,KAAK;UAAE1H,OAAO,EAAEwI;QAAS,CAAC,CAAC,CAAC;MAC3E,CAAC,CAAC,MAAM;QACNhG,cAAc,CAAEkG,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;UAAEhB,MAAM,EAAE,KAAK;UAAE1H,OAAO,EAAE;QAAwB,CAAC,CAAC,CAAC;MAC1F;MACA;IACF;IAEA,MAAM2I,WAAW,GAAG1G,aAAa,CAACZ,KAAK,CAACc,aAAa,CAAC;IACtD,MAAMyG,SAAS,GAAG;MAAE,GAAGnG;IAAW,CAAC;IACnC,IAAIkG,WAAW,CAACxI,OAAO,EAAEyI,SAAS,CAACD,WAAW,CAACxI,OAAO,CAAC,GAAG0H,QAAQ;IAElE,IAAIgB,MAAM,GAAGF,WAAW,CAACvI,IAAI,MAAA0H,oBAAA,GAAIa,WAAW,CAACzI,OAAO,cAAA4H,oBAAA,uBAAnBA,oBAAA,CAAsBD,QAAQ,CAAC;IAChE,MAAMiB,QAAQ,IAAAf,oBAAA,GAAG9F,aAAa,CAACZ,KAAK,cAAA0G,oBAAA,uBAAnBA,oBAAA,CAAsBc,MAAM,CAAC;IAE9C,IAAI,CAACC,QAAQ,EAAE;MACbpG,aAAa,CAACkG,SAAS,CAAC;MACxBpG,cAAc,CAAC,CAAC,GAAGwF,cAAc,EAAE;QAAEN,MAAM,EAAE,KAAK;QAAE1H,OAAO,EAAE;MAAyB,CAAC,CAAC,CAAC;MACzFoC,gBAAgB,CAAC,IAAI,CAAC;MACtB;IACF;IAEA,IAAI0G,QAAQ,CAAC7I,IAAI,KAAK,KAAK,EAAE;MAC3B,MAAMD,OAAO,GAAG8I,QAAQ,CAAC9I,OAAO,IAAI,iBAAiB;MACrD,IAAI;QACF,MAAMiH,GAAG,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACpDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/ClG,IAAI,EAAEmG,IAAI,CAACC,SAAS,CAAC;YACnBe,YAAY,EAAE,CAAC,GAAGJ,gBAAgB,EAAE;cAAEE,IAAI,EAAE,MAAM;cAAEC,OAAO,EAAEP;YAAS,CAAC,CAAC;YACxE5E,aAAa,EAAEhB,aAAa,CAACyE,QAAQ,CAACzD,aAAa;YACnDC,SAAS,EAAEjB,aAAa,CAACyE,QAAQ,CAACxD,SAAS;YAC3CoF,WAAW,EAAEM;UACf,CAAC;QACH,CAAC,CAAC;QACF,MAAM7I,IAAI,GAAG,MAAMkH,GAAG,CAACsB,IAAI,CAAC,CAAC;QAC7B,MAAMC,QAAQ,GAAGzI,IAAI,CAAC0I,KAAK,IAAI,uBAAuB;QACtDjG,cAAc,CAAC,CACb,GAAGwF,cAAc,EACjB;UAAEN,MAAM,EAAE,KAAK;UAAE1H;QAAQ,CAAC,EAC1B;UAAE0H,MAAM,EAAE,KAAK;UAAE1H,OAAO,EAAEwI;QAAS,CAAC,CACrC,CAAC;QACFpG,gBAAgB,CAAC,IAAI,CAAC;QACtBE,UAAU,CAAC,IAAI,CAAC;QAChBI,aAAa,CAACkG,SAAS,CAAC;MAC1B,CAAC,CAAC,MAAM;QACNpG,cAAc,CAAC,CACb,GAAGwF,cAAc,EACjB;UAAEN,MAAM,EAAE,KAAK;UAAE1H;QAAQ,CAAC,EAC1B;UAAE0H,MAAM,EAAE,KAAK;UAAE1H,OAAO,EAAE;QAAwB,CAAC,CACpD,CAAC;QACFoC,gBAAgB,CAAC,IAAI,CAAC;QACtBE,UAAU,CAAC,IAAI,CAAC;QAChBI,aAAa,CAACkG,SAAS,CAAC;MAC1B;IACF,CAAC,MAAM;MACLlG,aAAa,CAACkG,SAAS,CAAC;MACxBpG,cAAc,CAAC,CAAC,GAAGwF,cAAc,EAAE;QAAEN,MAAM,EAAE,KAAK;QAAE1H,OAAO,EAAE8I,QAAQ,CAAC9I;MAAQ,CAAC,CAAC,CAAC;MACjFoC,gBAAgB,CAACyG,MAAM,CAAC;IAC1B;EACF,CAAC;EAED,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAAC9G,aAAa,IAAK,CAACE,aAAa,IAAI,CAACE,OAAQ,EAAE,OAAO,IAAI;IAE/D,IAAIA,OAAO,EAAE;MACX,oBACEzC,OAAA;QAAKmB,KAAK,EAAE;UAAEiI,OAAO,EAAE,MAAM;UAAEC,GAAG,EAAE;QAAM,CAAE;QAAAC,QAAA,gBAC1CtJ,OAAA;UACEuJ,KAAK,EAAExG,UAAW;UAClByG,QAAQ,EAAG1F,CAAC,IAAKd,aAAa,CAACc,CAAC,CAACkC,MAAM,CAACuD,KAAK,CAAE;UAC/CE,SAAS,EAAG3F,CAAC,IAAK;YAChB,IAAIA,CAAC,CAAC4F,GAAG,KAAK,OAAO,EAAE;cACrB1B,kBAAkB,CAACjF,UAAU,CAAC;cAC9BC,aAAa,CAAC,EAAE,CAAC;YACnB;UACF,CAAE;UACF7B,KAAK,EAAE;YACLwI,IAAI,EAAE,CAAC;YACP1F,OAAO,EAAE,KAAK;YACdE,YAAY,EAAE,CAAC;YACfD,MAAM,EAAE,mBAAmB;YAC3BF,UAAU,EAAE,SAAS;YACrB4F,MAAM,EAAE,MAAM;YACdvF,SAAS,EAAE;UACb;QAAE;UAAAwF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACFhK,OAAA;UACEiK,OAAO,EAAEA,CAAA,KAAM;YACbjC,kBAAkB,CAACjF,UAAU,CAAC;YAC9BC,aAAa,CAAC,EAAE,CAAC;UACnB,CAAE;UACF7B,KAAK,EAAE;YACL6C,UAAU,EAAE,SAAS;YACrB0B,KAAK,EAAE,OAAO;YACdvB,YAAY,EAAE,CAAC;YACfF,OAAO,EAAE,QAAQ;YACjBC,MAAM,EAAE,MAAM;YACd0F,MAAM,EAAE,MAAM;YACdvE,UAAU,EAAE,QAAQ;YACpB6E,MAAM,EAAE;UACV,CAAE;UAAAZ,QAAA,EACH;QAED;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAEV;IAEA,MAAM9D,IAAI,GAAG7D,aAAa,CAACZ,KAAK,CAACc,aAAa,CAAC;IAE/C,IAAI2D,IAAI,CAAC7F,IAAI,KAAK,QAAQ,EAAE;MAC1B,MAAM8J,IAAI,GAAGlD,MAAM,CAACC,IAAI,CAAChB,IAAI,CAAC5F,OAAO,IAAI,CAAC,CAAC,CAAC;MAC5C,oBACEN,OAAA;QAAKmB,KAAK,EAAE;UAAEiI,OAAO,EAAE,MAAM;UAAEgB,aAAa,EAAE,QAAQ;UAAEf,GAAG,EAAE;QAAE,CAAE;QAAAC,QAAA,EAC9Da,IAAI,CAACrE,GAAG,CAAEuE,GAAG,iBACZrK,OAAA;UAEEiK,OAAO,EAAEA,CAAA,KAAMjC,kBAAkB,CAACqC,GAAG,CAAE;UACvClJ,KAAK,EAAE;YACL8C,OAAO,EAAE,KAAK;YACdG,KAAK,EAAE,MAAM;YACbD,YAAY,EAAE,CAAC;YACfD,MAAM,EAAE,mBAAmB;YAC3BF,UAAU,EAAE,SAAS;YACrB0B,KAAK,EAAE,OAAO;YACdwE,MAAM,EAAE;UACV,CAAE;UAAAZ,QAAA,EAEDe;QAAG,GAZCA,GAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaF,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAEV;IAEA,IAAI9D,IAAI,CAAC7F,IAAI,KAAK,cAAc,EAAE;MAChC,oBACEL,OAAA;QAAAsJ,QAAA,GACGrC,MAAM,CAACC,IAAI,CAAChB,IAAI,CAAC5F,OAAO,IAAI,CAAC,CAAC,CAAC,CAACwF,GAAG,CAAEuE,GAAG,iBACvCrK,OAAA;UAEEmB,KAAK,EAAE;YACL6C,UAAU,EAAE,SAAS;YACrBC,OAAO,EAAE,SAAS;YAClBE,YAAY,EAAE,KAAK;YACnB3C,MAAM,EAAE;UACV,CAAE;UAAA8H,QAAA,eAEFtJ,OAAA;YAAAsJ,QAAA,gBACEtJ,OAAA;cACEK,IAAI,EAAC,UAAU;cACfiK,OAAO,EAAErH,oBAAoB,CAACsH,QAAQ,CAACF,GAAG,CAAE;cAC5Cb,QAAQ,EAAEA,CAAA,KACRtG,uBAAuB,CAAE4F,IAAI,IAC3BA,IAAI,CAACyB,QAAQ,CAACF,GAAG,CAAC,GACdvB,IAAI,CAAC0B,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKJ,GAAG,CAAC,GAC7B,CAAC,GAAGvB,IAAI,EAAEuB,GAAG,CACnB;YACD;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,EAAC,GAAG,EACLK,GAAG;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC;QAAC,GArBHK,GAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAsBL,CACN,CAAC,eACFhK,OAAA;UACEiK,OAAO,EAAEA,CAAA,KAAM;YACb,IAAIhH,oBAAoB,CAACiC,MAAM,GAAG,CAAC,EAAE;cACnC8C,kBAAkB,CAAC/E,oBAAoB,CAACyH,IAAI,CAAC,IAAI,CAAC,CAAC;cACnDxH,uBAAuB,CAAC,EAAE,CAAC;cAC3BF,aAAa,CAAC,EAAE,CAAC;YACnB;UACF,CAAE;UACF7B,KAAK,EAAE;YACLwJ,SAAS,EAAE,EAAE;YACb3G,UAAU,EAAE,SAAS;YACrB0B,KAAK,EAAE,OAAO;YACdzB,OAAO,EAAE,CAAC;YACVE,YAAY,EAAE,CAAC;YACfD,MAAM,EAAE,MAAM;YACdE,KAAK,EAAE,MAAM;YACb8F,MAAM,EAAE;UACV,CAAE;UAAAZ,QAAA,EACH;QAED;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAEV;IAEA,IAAI9D,IAAI,CAAC7F,IAAI,KAAK,OAAO,EAAE;MACzB,oBACEL,OAAA;QAAKmB,KAAK,EAAE;UAAEiI,OAAO,EAAE,MAAM;UAAEC,GAAG,EAAE;QAAM,CAAE;QAAAC,QAAA,gBAC1CtJ,OAAA;UACEuJ,KAAK,EAAExG,UAAW;UAClByG,QAAQ,EAAG1F,CAAC,IAAKd,aAAa,CAACc,CAAC,CAACkC,MAAM,CAACuD,KAAK,CAAE;UAC/CE,SAAS,EAAG3F,CAAC,IAAK;YAChB,IAAIA,CAAC,CAAC4F,GAAG,KAAK,OAAO,EAAE;cACrB1B,kBAAkB,CAACjF,UAAU,CAAC;cAC9BC,aAAa,CAAC,EAAE,CAAC;YACnB;UACF,CAAE;UACF7B,KAAK,EAAE;YACLwI,IAAI,EAAE,CAAC;YACP1F,OAAO,EAAE,KAAK;YACdE,YAAY,EAAE,CAAC;YACfD,MAAM,EAAE,mBAAmB;YAC3BF,UAAU,EAAE,SAAS;YACrB4F,MAAM,EAAE,MAAM;YACdvF,SAAS,EAAE;UACb;QAAE;UAAAwF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACFhK,OAAA;UACEiK,OAAO,EAAEA,CAAA,KAAM;YACbjC,kBAAkB,CAACjF,UAAU,CAAC;YAC9BC,aAAa,CAAC,EAAE,CAAC;UACnB,CAAE;UACF7B,KAAK,EAAE;YACL6C,UAAU,EAAE,SAAS;YACrB0B,KAAK,EAAE,OAAO;YACdvB,YAAY,EAAE,CAAC;YACfF,OAAO,EAAE,QAAQ;YACjBC,MAAM,EAAE,MAAM;YACd0F,MAAM,EAAE,MAAM;YACdvE,UAAU,EAAE,QAAQ;YACpB6E,MAAM,EAAE;UACV,CAAE;UAAAZ,QAAA,EACH;QAED;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAEV;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMY,iBAAiB,GAAIC,OAAO,IAAK;IACrC,MAAMC,UAAU,GAAG,IAAIjF,GAAG,CACxBgF,OAAO,CAACL,MAAM,CAAEO,CAAC,IAAKA,CAAC,CAAC1K,IAAI,KAAK,QAAQ,IAAI0K,CAAC,CAAC7K,EAAE,CAAC,CAAC4F,GAAG,CAAEiF,CAAC,IAAKA,CAAC,CAAC7K,EAAE,CACpE,CAAC;IACD,MAAM8K,YAAY,GAAGpJ,WAAW,CAAC4I,MAAM,CAAE1G,CAAC,IAAKgH,UAAU,CAAC1E,GAAG,CAACtC,CAAC,CAAC5D,EAAE,CAAC,CAAC;IAEpE4B,aAAa,CAAC+I,OAAO,CAAC;IACtB,IAAI,CAACG,YAAY,CAAC9F,MAAM,EAAE;IAE1B,MAAM+F,YAAY,GAAGxJ,KAAK,CAACqE,GAAG,CAAElC,CAAC,IAAK;MACpC,IAAIzD,IAAI,GAAG;QAAE,GAAGyD,CAAC,CAACzD;MAAK,CAAC;MACxB,IAAI+K,OAAO,GAAG,KAAK;MAEnB,KAAK,MAAMpH,CAAC,IAAIkH,YAAY,EAAE;QAC5B,IAAIlH,CAAC,CAACiC,MAAM,KAAKnC,CAAC,CAAC1D,EAAE,EAAE;QAEvB,IAAI,CAACC,IAAI,CAACE,IAAI,KAAK,QAAQ,IAAIF,IAAI,CAACE,IAAI,KAAK,cAAc,KAAKF,IAAI,CAACG,OAAO,EAAE;UAC5E,IAAIwD,CAAC,CAAC4C,KAAK,IAAIvG,IAAI,CAACG,OAAO,CAACwD,CAAC,CAAC4C,KAAK,CAAC,KAAK5C,CAAC,CAACkC,MAAM,EAAE;YACjD,MAAMmE,IAAI,GAAG;cAAE,GAAGhK,IAAI,CAACG;YAAQ,CAAC;YAChC,OAAO6J,IAAI,CAACrG,CAAC,CAAC4C,KAAK,CAAC;YACpBvG,IAAI,CAACG,OAAO,GAAG6J,IAAI;YACnBe,OAAO,GAAG,IAAI;UAChB,CAAC,MAAM;YACL,MAAMf,IAAI,GAAG;cAAE,GAAGhK,IAAI,CAACG;YAAQ,CAAC;YAChC,KAAK,MAAM,CAAC6K,CAAC,EAAEC,CAAC,CAAC,IAAInE,MAAM,CAACoE,OAAO,CAAClB,IAAI,CAAC,EAAE;cACzC,IAAIiB,CAAC,KAAKtH,CAAC,CAACkC,MAAM,EAAE,OAAOmE,IAAI,CAACgB,CAAC,CAAC;YACpC;YACA,IAAIlE,MAAM,CAACC,IAAI,CAACiD,IAAI,CAAC,CAACjF,MAAM,KAAK+B,MAAM,CAACC,IAAI,CAAC/G,IAAI,CAACG,OAAO,CAAC,CAAC4E,MAAM,EAAE;cACjE/E,IAAI,CAACG,OAAO,GAAG6J,IAAI;cACnBe,OAAO,GAAG,IAAI;YAChB;UACF;QACF,CAAC,MAAM,IAAI/K,IAAI,CAACK,IAAI,KAAKsD,CAAC,CAACkC,MAAM,EAAE;UACjC7F,IAAI,CAACK,IAAI,GAAG,EAAE;UACd0K,OAAO,GAAG,IAAI;QAChB;MACF;MAEA,OAAOA,OAAO,GAAG;QAAE,GAAGtH,CAAC;QAAEzD;MAAK,CAAC,GAAGyD,CAAC;IACrC,CAAC,CAAC;IAEFlC,QAAQ,CAACuJ,YAAY,CAAC;IACtB,MAAMK,cAAc,GAAG1J,WAAW,CAAC4I,MAAM,CAAE1G,CAAC,IAAK,CAACgH,UAAU,CAAC1E,GAAG,CAACtC,CAAC,CAAC5D,EAAE,CAAC,CAAC;IACvEsE,aAAa,CAACyG,YAAY,EAAEK,cAAc,CAAC;EAC7C,CAAC;EACD,oBACEtL,OAAA;IACEmB,KAAK,EAAE;MACLiD,KAAK,EAAE,OAAO;MACdwF,MAAM,EAAE,OAAO;MACfR,OAAO,EAAE,MAAM;MACfhI,QAAQ,EAAE,QAAQ;MAAa;MAC/BmK,kBAAkB,EAAE,SAAS,CAAE;IACjC,CAAE;IAAAjC,QAAA,gBAGFtJ,OAAA;MAAKmB,KAAK,EAAE;QAAEwI,IAAI,EAAE,CAAC;QAAElJ,QAAQ,EAAE,UAAU;QAAEW,QAAQ,EAAE;MAAS,CAAE;MAAAkI,QAAA,gBAEhEtJ,OAAA;QACEmB,KAAK,EAAE;UACLV,QAAQ,EAAE,UAAU;UACpB+K,GAAG,EAAE,CAAC;UACNC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,CAAC;UACR9B,MAAM,EAAE,EAAE;UACVR,OAAO,EAAE,MAAM;UACfuC,UAAU,EAAE,QAAQ;UACpBC,cAAc,EAAE,eAAe;UAC/B3H,OAAO,EAAE,QAAQ;UACjBD,UAAU,EAAE,WAAW;UACvB6H,cAAc,EAAE,WAAW;UAC3BC,YAAY,EAAE,mBAAmB;UACjCC,MAAM,EAAE,EAAE;UACV1H,SAAS,EAAE;QACb,CAAE;QAAAiF,QAAA,gBAGFtJ,OAAA;UACEmB,KAAK,EAAE;YACLiI,OAAO,EAAE,aAAa;YACtBuC,UAAU,EAAE,QAAQ;YACpBtC,GAAG,EAAE,EAAE;YACPpF,OAAO,EAAE,WAAW;YACpBD,UAAU,EAAE,MAAM;YAClBG,YAAY,EAAE,EAAE;YAChBD,MAAM,EAAE,mBAAmB;YAC3BK,SAAS,EAAE;UACb,CAAE;UAAA+E,QAAA,gBAEFtJ,OAAA;YACEmB,KAAK,EAAE;cACLiD,KAAK,EAAE,EAAE;cACTwF,MAAM,EAAE,EAAE;cACVzF,YAAY,EAAE,KAAK;cACnBH,UAAU,EAAE,SAAS;cACrBO,SAAS,EAAE;YACb;UAAE;YAAAsF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACFhK,OAAA;YAAKmB,KAAK,EAAE;cAAE6K,UAAU,EAAE,GAAG;cAAEtG,KAAK,EAAE;YAAU,CAAE;YAAA4D,QAAA,EAAC;UAEnD;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACNhK,OAAA;YAAKmB,KAAK,EAAE;cAAEiI,OAAO,EAAE,MAAM;cAAEuC,UAAU,EAAE,QAAQ;cAAEtC,GAAG,EAAE,CAAC;cAAE3D,KAAK,EAAE;YAAU,CAAE;YAAA4D,QAAA,gBAC9EtJ,OAAA;cAAMmB,KAAK,EAAE8K,IAAI,CAAC,SAAS,CAAE;cAAA3C,QAAA,EAAC;YAAI;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACzChK,OAAA;cAAAsJ,QAAA,EAAM;YAAC;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACdhK,OAAA;cAAMmB,KAAK,EAAE8K,IAAI,CAAC,SAAS,CAAE;cAAA3C,QAAA,EAAC;YAAM;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC3ChK,OAAA;cAAAsJ,QAAA,EAAM;YAAC;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACdhK,OAAA;cAAMmB,KAAK,EAAE8K,IAAI,CAAC,SAAS,CAAE;cAAA3C,QAAA,EAAC;YAAS;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGNhK,OAAA;UAAKmB,KAAK,EAAE;YAAEiI,OAAO,EAAE,MAAM;YAAEC,GAAG,EAAE;UAAG,CAAE;UAAAC,QAAA,gBACvCtJ,OAAA;YACEmB,KAAK,EAAE+K,GAAG,CAAC,SAAS,CAAE;YACtBjC,OAAO,EAAEA,CAAA,KAAM;cACb,MAAMkC,KAAK,GAAGtL,WAAW,CAACuL,QAAQ,CAAC,CAAC;cACpCvL,WAAW,EAAE;cACb,MAAMJ,QAAQ,GAAGsB,cAAc,GAC3B;gBACErB,CAAC,EAAEe,KAAK,CAACkC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC1D,EAAE,KAAK6B,cAAc,CAAC,CAACtB,QAAQ,CAACC,CAAC,GAAG,GAAG;gBAC9DC,CAAC,EAAEc,KAAK,CAACkC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC1D,EAAE,KAAK6B,cAAc,CAAC,CAACtB,QAAQ,CAACE,CAAC,GAAG;cAC7D,CAAC,GACD;gBAAED,CAAC,EAAE2L,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;gBAAE3L,CAAC,EAAE0L,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;cAAI,CAAC;cACtD,MAAMC,OAAO,GAAG;gBACdrM,EAAE,EAAEiM,KAAK;gBACThM,IAAI,EAAE;kBACJC,OAAO,EAAE,gBAAgB+L,KAAK,EAAE;kBAChC9L,IAAI,EAAE,QAAQ;kBACdC,OAAO,EAAE,CAAC,CAAC;kBACXC,OAAO,EAAE,EAAE;kBACXC,IAAI,EAAE;gBACR,CAAC;gBACDC,QAAQ;gBACRJ,IAAI,EAAE;cACR,CAAC;cACD,MAAM4K,YAAY,GAAG,CAAC,GAAGxJ,KAAK,EAAE8K,OAAO,CAAC;cACxC7K,QAAQ,CAACuJ,YAAY,CAAC;cACtBzG,aAAa,CAACyG,YAAY,EAAErJ,WAAW,CAAC;YAC1C,CAAE;YAAA0H,QAAA,EACH;UAED;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAEThK,OAAA;YACEmB,KAAK,EAAE+K,GAAG,CAAC,SAAS,CAAE;YACtBjC,OAAO,EAAEA,CAAA,KAAM;cACb,MAAMuC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAChF,IAAI,CAACC,SAAS,CAACd,aAAa,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;gBAChEvG,IAAI,EAAE;cACR,CAAC,CAAC;cACF,MAAMqM,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;cACrC,MAAMK,IAAI,GAAG5L,QAAQ,CAAC6L,aAAa,CAAC,GAAG,CAAC;cACxCD,IAAI,CAACE,IAAI,GAAGL,GAAG;cACfG,IAAI,CAACG,QAAQ,GAAG,wBAAwB;cACxC/L,QAAQ,CAACK,IAAI,CAAC2L,WAAW,CAACJ,IAAI,CAAC;cAC/BA,IAAI,CAACK,KAAK,CAAC,CAAC;cACZjM,QAAQ,CAACK,IAAI,CAAC6L,WAAW,CAACN,IAAI,CAAC;YACjC,CAAE;YAAAvD,QAAA,EACH;UAED;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAEThK,OAAA;YACEmB,KAAK,EAAE+K,GAAG,CAAC,SAAS,CAAE;YACtBjC,OAAO,EAAEA,CAAA,KAAM;cACb,IAAI,CAAClI,cAAc,EAAE;cAErB,MAAMqL,SAAS,GAAGrL,cAAc;cAEhC,MAAMsL,gBAAgB,GAAG5L,KAAK,CAAC+I,MAAM,CAAE5G,CAAC,IAAKA,CAAC,CAAC1D,EAAE,KAAKkN,SAAS,CAAC;cAChE,MAAME,YAAY,GAAG1L,WAAW,CAAC4I,MAAM,CACpC1G,CAAC,IAAKA,CAAC,CAACiC,MAAM,KAAKqH,SAAS,IAAItJ,CAAC,CAACkC,MAAM,KAAKoH,SAChD,CAAC;cAED,MAAMnC,YAAY,GAAGoC,gBAAgB,CAACvH,GAAG,CAAElC,CAAC,IAAK;gBAC/C,MAAMzD,IAAI,GAAG;kBAAE,GAAGyD,CAAC,CAACzD;gBAAK,CAAC;gBAC1B,IAAI+K,OAAO,GAAG,KAAK;gBAEnB,IAAI/K,IAAI,CAACK,IAAI,KAAK4M,SAAS,EAAE;kBAC3BjN,IAAI,CAACK,IAAI,GAAG,EAAE;kBACd0K,OAAO,GAAG,IAAI;gBAChB;gBACA,IAAI/K,IAAI,CAACG,OAAO,IAAI2G,MAAM,CAACC,IAAI,CAAC/G,IAAI,CAACG,OAAO,CAAC,CAAC4E,MAAM,EAAE;kBACpD,MAAMiF,IAAI,GAAG;oBAAE,GAAGhK,IAAI,CAACG;kBAAQ,CAAC;kBAChC,KAAK,MAAM,CAAC6K,CAAC,EAAEC,CAAC,CAAC,IAAInE,MAAM,CAACoE,OAAO,CAAClB,IAAI,CAAC,EAAE;oBACzC,IAAIiB,CAAC,KAAKgC,SAAS,EAAE,OAAOjD,IAAI,CAACgB,CAAC,CAAC;kBACrC;kBACA,IAAIlE,MAAM,CAACC,IAAI,CAACiD,IAAI,CAAC,CAACjF,MAAM,KAAK+B,MAAM,CAACC,IAAI,CAAC/G,IAAI,CAACG,OAAO,CAAC,CAAC4E,MAAM,EAAE;oBACjE/E,IAAI,CAACG,OAAO,GAAG6J,IAAI;oBACnBe,OAAO,GAAG,IAAI;kBAChB;gBACF;gBACA,OAAOA,OAAO,GAAG;kBAAE,GAAGtH,CAAC;kBAAEzD;gBAAK,CAAC,GAAGyD,CAAC;cACrC,CAAC,CAAC;cAEFlC,QAAQ,CAACuJ,YAAY,CAAC;cACtBpJ,QAAQ,CAACyL,YAAY,CAAC;cACtBtL,iBAAiB,CAAC,IAAI,CAAC;cACvBwC,aAAa,CAACyG,YAAY,EAAEqC,YAAY,CAAC;YAC3C,CAAE;YAAAhE,QAAA,EACH;UAED;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAEThK,OAAA;YAAQmB,KAAK,EAAE+K,GAAG,CAAC,SAAS,CAAE;YAACjC,OAAO,EAAE9C,UAAW;YAAAmC,QAAA,EAAC;UAEpD;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGNhK,OAAA;UAAKmB,KAAK,EAAE;YAAEiI,OAAO,EAAE,MAAM;YAAEC,GAAG,EAAE;UAAG,CAAE;UAAAC,QAAA,gBACvCtJ,OAAA;YAAQmB,KAAK,EAAE+K,GAAG,CAAC,SAAS,CAAE;YAACjC,OAAO,EAAEjF,IAAK;YAAAsE,QAAA,EAAC;UAE9C;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACThK,OAAA;YAAQmB,KAAK,EAAE+K,GAAG,CAAC,SAAS,CAAE;YAACjC,OAAO,EAAEhF,IAAK;YAAAqE,QAAA,EAAC;UAE9C;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNhK,OAAA;QACEmB,KAAK,EAAE;UACLV,QAAQ,EAAE,UAAU;UACpB+K,GAAG,EAAE,EAAE;UACPC,IAAI,EAAE,EAAE;UACR8B,MAAM,EAAE,EAAE;UACVnJ,KAAK,EAAE,GAAG;UACVC,SAAS,EAAE,YAAY;UACvBmJ,SAAS,EAAE,MAAM;UACjBC,SAAS,EAAE,QAAQ;UACnBC,YAAY,EAAE,EAAE;UAChBC,WAAW,EAAE,CAAC;UACdC,eAAe,EAAE,mBAAmB;UACpCxE,OAAO,EAAE,MAAM;UACfgB,aAAa,EAAE,QAAQ;UACvBf,GAAG,EAAE,EAAE;UACP0C,MAAM,EAAE;QACV,CAAE;QAAAzC,QAAA,GAED5F,YAAY,iBACX1D,OAAA;UAAKmB,KAAK,EAAE4C,SAAU;UAAAuF,QAAA,gBACpBtJ,OAAA;YAAImB,KAAK,EAAE;cAAEwJ,SAAS,EAAE;YAAE,CAAE;YAAArB,QAAA,GAAC,gBAAc,EAAC5F,YAAY,CAACxD,EAAE;UAAA;YAAA2J,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACjEhK,OAAA;YAAAsJ,QAAA,EAAO;UAAQ;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACvBhK,OAAA;YACEuJ,KAAK,EAAE7F,YAAY,CAACvD,IAAI,CAACC,OAAQ;YACjCoJ,QAAQ,EAAG1F,CAAC,IAAK;cACf,MAAMmH,YAAY,GAAGxJ,KAAK,CAACqE,GAAG,CAAEI,IAAI,IAClCA,IAAI,CAAChG,EAAE,KAAK6B,cAAc,GACtB;gBAAE,GAAGmE,IAAI;gBAAE/F,IAAI,EAAE;kBAAE,GAAG+F,IAAI,CAAC/F,IAAI;kBAAEC,OAAO,EAAE0D,CAAC,CAACkC,MAAM,CAACuD;gBAAM;cAAE,CAAC,GAC5DrD,IACN,CAAC;cACDxE,QAAQ,CAACuJ,YAAY,CAAC;cACtBzG,aAAa,CAACyG,YAAY,EAAErJ,WAAW,CAAC;YAC1C,CAAE;YACFT,KAAK,EAAE;cAAEiD,KAAK,EAAE,MAAM;cAAEC,SAAS,EAAE,YAAY;cAAEuF,MAAM,EAAE;YAAG;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/D,CAAC,eACFhK,OAAA;YAAAsJ,QAAA,EAAO;UAAK;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpBhK,OAAA;YACEuJ,KAAK,EAAE7F,YAAY,CAACvD,IAAI,CAACE,IAAK;YAC9BmJ,QAAQ,EAAG1F,CAAC,IAAK;cACf,MAAM+J,OAAO,GAAG/J,CAAC,CAACkC,MAAM,CAACuD,KAAK;cAC9B,MAAM0B,YAAY,GAAGxJ,KAAK,CAACqE,GAAG,CAAEI,IAAI,IAAK;gBACvC,IAAIA,IAAI,CAAChG,EAAE,KAAK6B,cAAc,EAAE,OAAOmE,IAAI;gBAC3C,MAAM4H,EAAE,GAAG;kBAAE,GAAG5H,IAAI;kBAAE/F,IAAI,EAAE;oBAAE,GAAG+F,IAAI,CAAC/F,IAAI;oBAAEE,IAAI,EAAEwN;kBAAQ;gBAAE,CAAC;gBAC7D,IAAIA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,cAAc,EAAE;kBACtDC,EAAE,CAAC3N,IAAI,CAACG,OAAO,GAAG,CAAC,CAAC;gBACtB;gBACA,OAAOwN,EAAE;cACX,CAAC,CAAC;cACFpM,QAAQ,CAACuJ,YAAY,CAAC;cACtBzG,aAAa,CAACyG,YAAY,EAAErJ,WAAW,CAAC;YAC1C,CAAE;YACFT,KAAK,EAAE;cAAEiD,KAAK,EAAE,MAAM;cAAEC,SAAS,EAAE;YAAa,CAAE;YAAAiF,QAAA,gBAElDtJ,OAAA;cAAQuJ,KAAK,EAAC,QAAQ;cAAAD,QAAA,EAAC;YAAM;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtChK,OAAA;cAAQuJ,KAAK,EAAC,OAAO;cAAAD,QAAA,EAAC;YAAK;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACpChK,OAAA;cAAQuJ,KAAK,EAAC,cAAc;cAAAD,QAAA,EAAC;YAAY;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAClDhK,OAAA;cAAQuJ,KAAK,EAAC,KAAK;cAAAD,QAAA,EAAC;YAAG;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAChChK,OAAA;cAAQuJ,KAAK,EAAC,KAAK;cAAAD,QAAA,EAAC;YAAG;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACThK,OAAA;YAAAsJ,QAAA,EAAO;UAAc;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC7BhK,OAAA;YACEK,IAAI,EAAC,MAAM;YACXkJ,KAAK,EAAE7F,YAAY,CAACvD,IAAI,CAACI,OAAQ;YACjCiJ,QAAQ,EAAG1F,CAAC,IAAK;cACf,MAAMmH,YAAY,GAAGxJ,KAAK,CAACqE,GAAG,CAAEI,IAAI,IAClCA,IAAI,CAAChG,EAAE,KAAK6B,cAAc,GACtB;gBAAE,GAAGmE,IAAI;gBAAE/F,IAAI,EAAE;kBAAE,GAAG+F,IAAI,CAAC/F,IAAI;kBAAEI,OAAO,EAAEuD,CAAC,CAACkC,MAAM,CAACuD;gBAAM;cAAE,CAAC,GAC5DrD,IACN,CAAC;cACDxE,QAAQ,CAACuJ,YAAY,CAAC;cACtBzG,aAAa,CAACyG,YAAY,EAAErJ,WAAW,CAAC;YAC1C,CAAE;YACFT,KAAK,EAAE;cAAEiD,KAAK,EAAE,MAAM;cAAEC,SAAS,EAAE;YAAa;UAAE;YAAAwF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC,eACFhK,OAAA;YAAAsJ,QAAA,EAAO;UAAa;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5BhK,OAAA;YACEK,IAAI,EAAC,MAAM;YACXkJ,KAAK,EAAE7F,YAAY,CAACvD,IAAI,CAACK,IAAK;YAC9BgJ,QAAQ,EAAG1F,CAAC,IAAK;cACf,MAAMmH,YAAY,GAAGxJ,KAAK,CAACqE,GAAG,CAAEI,IAAI,IAClCA,IAAI,CAAChG,EAAE,KAAK6B,cAAc,GACtB;gBAAE,GAAGmE,IAAI;gBAAE/F,IAAI,EAAE;kBAAE,GAAG+F,IAAI,CAAC/F,IAAI;kBAAEK,IAAI,EAAEsD,CAAC,CAACkC,MAAM,CAACuD;gBAAM;cAAE,CAAC,GACzDrD,IACN,CAAC;cACDxE,QAAQ,CAACuJ,YAAY,CAAC;cACtBzG,aAAa,CAACyG,YAAY,EAAErJ,WAAW,CAAC;YAC1C,CAAE;YACFT,KAAK,EAAE;cAAEiD,KAAK,EAAE,MAAM;cAAEC,SAAS,EAAE;YAAa;UAAE;YAAAwF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CACN,eAEDhK,OAAA,CAACF,YAAY;UACXqD,cAAc,EAAEA,cAAe;UAC/BC,iBAAiB,EAAEA,iBAAkB;UACrC2K,cAAc,EAAEhK;QAAU;UAAA8F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,EAEDnG,YAAY,iBACX7D,OAAA;UAAKmB,KAAK,EAAE4C,SAAU;UAAAuF,QAAA,gBACpBtJ,OAAA;YAAImB,KAAK,EAAE;cAAEwJ,SAAS,EAAE;YAAE,CAAE;YAAArB,QAAA,EAAC;UAAY;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9ChK,OAAA;YAAAsJ,QAAA,EAAO;UAAa;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5BhK,OAAA;YACEK,IAAI,EAAC,MAAM;YACXkJ,KAAK,EAAE1F,YAAY,CAAC6C,KAAM;YAC1B8C,QAAQ,EAAG1F,CAAC,IAAK;cACf,MAAMkK,QAAQ,GAAGlK,CAAC,CAACkC,MAAM,CAACuD,KAAK;cAC/B,MAAM+D,YAAY,GAAG1L,WAAW,CAACkE,GAAG,CAAEmI,IAAI,IACxCA,IAAI,CAAC/N,EAAE,KAAK2D,YAAY,CAAC3D,EAAE,GAAG;gBAAE,GAAG+N,IAAI;gBAAEvH,KAAK,EAAEsH;cAAS,CAAC,GAAGC,IAC/D,CAAC;cACD,MAAMC,QAAQ,GAAGrK,YAAY,CAACkC,MAAM;cACpC,MAAMoI,QAAQ,GAAGtK,YAAY,CAACmC,MAAM;cACpC,MAAMiF,YAAY,GAAGxJ,KAAK,CAACqE,GAAG,CAAEI,IAAI,IAAK;gBACvC,IAAIA,IAAI,CAAChG,EAAE,KAAKgO,QAAQ,EAAE;kBACxB,MAAME,OAAO,GAAG;oBAAE,GAAGlI;kBAAK,CAAC;kBAC3B,IAAIkI,OAAO,CAACjO,IAAI,CAACE,IAAI,KAAK,QAAQ,IAAI+N,OAAO,CAACjO,IAAI,CAACE,IAAI,KAAK,cAAc,EAAE;oBAC1E,MAAMgO,UAAU,GAAG;sBAAE,GAAGD,OAAO,CAACjO,IAAI,CAACG;oBAAQ,CAAC;oBAC9C,OAAO+N,UAAU,CAACxK,YAAY,CAAC6C,KAAK,CAAC;oBACrC2H,UAAU,CAACL,QAAQ,CAAC,GAAGG,QAAQ;oBAC/BC,OAAO,CAACjO,IAAI,CAACG,OAAO,GAAG+N,UAAU;kBACnC,CAAC,MAAM;oBACLD,OAAO,CAACjO,IAAI,CAACK,IAAI,GAAG2N,QAAQ;kBAC9B;kBACA,OAAOC,OAAO;gBAChB;gBACA,OAAOlI,IAAI;cACb,CAAC,CAAC;cACFrE,QAAQ,CAACyL,YAAY,CAAC;cACtB5L,QAAQ,CAACuJ,YAAY,CAAC;cACtBzG,aAAa,CAACyG,YAAY,EAAEqC,YAAY,CAAC;YAC3C,CAAE;YACFnM,KAAK,EAAE;cAAEiD,KAAK,EAAE,MAAM;cAAEC,SAAS,EAAE;YAAa;UAAE;YAAAwF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGNhK,OAAA,CAACV,SAAS;QACRmC,KAAK,EAAEA,KAAK,CAACqE,GAAG,CAAElC,CAAC,KAAM;UACvB,GAAGA,CAAC;UACJzD,IAAI,EAAE;YAAE,GAAGyD,CAAC,CAACzD,IAAI;YAAEuG,KAAK,EAAE9C,CAAC,CAACzD,IAAI,CAACC;UAAQ,CAAC;UAC1Ce,KAAK,EAAEgE,YAAY,CAACvB,CAAC,CAACzD,IAAI,CAACE,IAAI;QACjC,CAAC,CAAC,CAAE;QACJmD,KAAK,EAAEmD,QAAS;QAChBhF,aAAa,EAAEA,aAAc;QAC7BG,aAAa,EAAE8I,iBAAkB;QACjC0D,SAAS,EAAGC,MAAM,IAAK;UACrB,MAAM7H,KAAK,GAAG8H,MAAM,CAAC,uCAAuC,EAAE,EAAE,CAAC;UACjE,IAAI,CAAC9H,KAAK,EAAE;UACZ,MAAM+H,MAAM,GAAG,IAAIF,MAAM,CAACxI,MAAM,IAAIwI,MAAM,CAACvI,MAAM,EAAE;UACnD,MAAMsH,YAAY,GAAG1N,OAAO,CAC1B;YAAE,GAAG2O,MAAM;YAAErO,EAAE,EAAEuO,MAAM;YAAEjI,SAAS,EAAE;cAAEnG,IAAI,EAAER,UAAU,CAAC4G;YAAY,CAAC;YAAEC;UAAM,CAAC,EAC7E9E,WACF,CAAC;UACD,MAAMqJ,YAAY,GAAGxJ,KAAK,CAACqE,GAAG,CAAEI,IAAI,IAAK;YACvC,IAAIA,IAAI,CAAChG,EAAE,KAAKqO,MAAM,CAACxI,MAAM,EAAE;cAC7B,MAAMqI,OAAO,GAAG;gBAAE,GAAGlI;cAAK,CAAC;cAC3B,IAAIkI,OAAO,CAACjO,IAAI,CAACE,IAAI,KAAK,QAAQ,IAAI+N,OAAO,CAACjO,IAAI,CAACE,IAAI,KAAK,cAAc,EAAE;gBAC1E+N,OAAO,CAACjO,IAAI,CAACG,OAAO,GAAG;kBAAE,GAAG8N,OAAO,CAACjO,IAAI,CAACG,OAAO;kBAAE,CAACoG,KAAK,GAAG6H,MAAM,CAACvI;gBAAO,CAAC;cAC5E,CAAC,MAAM;gBACLoI,OAAO,CAACjO,IAAI,CAACK,IAAI,GAAG+N,MAAM,CAACvI,MAAM;cACnC;cACA,OAAOoI,OAAO;YAChB;YACA,OAAOlI,IAAI;UACb,CAAC,CAAC;UACFrE,QAAQ,CAACyL,YAAY,CAAC;UACtB5L,QAAQ,CAACuJ,YAAY,CAAC;UACtBzG,aAAa,CAACyG,YAAY,EAAEqC,YAAY,CAAC;QAC3C,CAAE;QACFoB,WAAW,EAAEA,CAACC,CAAC,EAAEzI,IAAI,KAAK;UACxBlE,iBAAiB,CAACkE,IAAI,CAAChG,EAAE,CAAC;UAC1BgC,iBAAiB,CAAC,IAAI,CAAC;QACzB,CAAE;QACF0M,WAAW,EAAEA,CAACD,CAAC,EAAEV,IAAI,KAAK;UACxB/L,iBAAiB,CAAC+L,IAAI,CAAC/N,EAAE,CAAC;UAC1B8B,iBAAiB,CAAC,IAAI,CAAC;QACzB,CAAE;QACF6M,OAAO;QACPC,aAAa,EAAC,QAAQ;QAAAxF,QAAA,gBAEtBtJ,OAAA,CAACT,OAAO;UAAAsK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXhK,OAAA,CAACR,QAAQ;UAAAqK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACZhK,OAAA,CAACP,UAAU;UAAAoK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eAGNhK,OAAA;MACEmB,KAAK,EAAE;QACLiD,KAAK,EAAE,GAAG;QACV5C,MAAM,EAAE,EAAE;QACVyC,OAAO,EAAE,EAAE;QACXD,UAAU,EAAE,SAAS;QACrBE,MAAM,EAAE,mBAAmB;QAC3BC,YAAY,EAAE,EAAE;QAChBI,SAAS,EAAE,4BAA4B;QACvC6E,OAAO,EAAE,MAAM;QACfgB,aAAa,EAAE,QAAQ;QACvBR,MAAM,EAAE,oBAAoB;QAC5BvF,SAAS,EAAE,YAAY;QACvBjD,QAAQ,EAAE,QAAQ,CAAE;MACtB,CAAE;MAAAkI,QAAA,gBAEFtJ,OAAA;QACEmB,KAAK,EAAE;UACL6K,UAAU,EAAE,MAAM;UAClB+C,YAAY,EAAE,CAAC;UACf3F,OAAO,EAAE,MAAM;UACfwC,cAAc,EAAE,eAAe;UAC/BD,UAAU,EAAE,QAAQ;UACpBqD,UAAU,EAAE;QACd,CAAE;QAAA1F,QAAA,gBAEFtJ,OAAA;UAAAsJ,QAAA,EAAM;QAAc;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAC1B7H,YAAY,iBACXnC,OAAA;UACEiK,OAAO,EAAEA,CAAA,KAAM;YACb,MAAMgF,WAAW,GAAGtM,WAAW,CAC5BmD,GAAG,CAAEwC,KAAK,IAAK,GAAGA,KAAK,CAACR,MAAM,KAAK,MAAM,GAAG,KAAK,GAAG,WAAW,KAAKQ,KAAK,CAAClI,OAAO,EAAE,CAAC,CACpFsK,IAAI,CAAC,MAAM,CAAC;YACf,MAAM8B,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACwC,WAAW,CAAC,EAAE;cAAE5O,IAAI,EAAE;YAAa,CAAC,CAAC;YAC5D,MAAMqM,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;YACrC,MAAMK,IAAI,GAAG5L,QAAQ,CAAC6L,aAAa,CAAC,GAAG,CAAC;YACxCD,IAAI,CAACE,IAAI,GAAGL,GAAG;YACfG,IAAI,CAACG,QAAQ,GAAG,kBAAkB;YAClC/L,QAAQ,CAACK,IAAI,CAAC2L,WAAW,CAACJ,IAAI,CAAC;YAC/BA,IAAI,CAACK,KAAK,CAAC,CAAC;YACZjM,QAAQ,CAACK,IAAI,CAAC6L,WAAW,CAACN,IAAI,CAAC;UACjC,CAAE;UACF1L,KAAK,EAAE;YACL6C,UAAU,EAAE,SAAS;YACrB0B,KAAK,EAAE,OAAO;YACdxB,MAAM,EAAE,MAAM;YACdC,YAAY,EAAE,KAAK;YACnBF,OAAO,EAAE,SAAS;YAClBiL,QAAQ,EAAE,MAAM;YAChBhF,MAAM,EAAE;UACV,CAAE;UAAAZ,QAAA,EACH;QAED;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGNhK,OAAA;QACEmB,KAAK,EAAE;UACLwI,IAAI,EAAE,CAAC;UACP6D,SAAS,EAAE,MAAM;UACjBC,SAAS,EAAE,QAAQ;UACnBC,YAAY,EAAE,CAAC;UACfC,WAAW,EAAE,CAAC;UACdwB,UAAU,EAAE,CAAC;UACbnL,UAAU,EAAE,aAAa;UACzBG,YAAY,EAAE;QAChB,CAAE;QAAAmF,QAAA,EAEDnH,YAAY,gBACXnC,OAAA;UAAKmB,KAAK,EAAE;YAAEiI,OAAO,EAAE,MAAM;YAAEgB,aAAa,EAAE,QAAQ;YAAEf,GAAG,EAAE;UAAE,CAAE;UAAAC,QAAA,EAC9D3G,WAAW,CAACmD,GAAG,CAAC,CAACwC,KAAK,EAAE8G,KAAK,kBAC5BpP,OAAA;YAEEmB,KAAK,EAAE;cACLkO,SAAS,EAAE/G,KAAK,CAACR,MAAM,KAAK,MAAM,GAAG,UAAU,GAAG,YAAY;cAC9D9D,UAAU,EAAEsE,KAAK,CAACR,MAAM,KAAK,MAAM,GAAG,SAAS,GAAG,SAAS;cAC3D7D,OAAO,EAAE,CAAC;cACVE,YAAY,EAAE,CAAC;cACfsB,QAAQ,EAAE,KAAK;cACfpB,SAAS,EAAE,YAAY;cACvBiL,YAAY,EAAE;YAChB,CAAE;YAAAhG,QAAA,EAEDhB,KAAK,CAAClI;UAAO,GAXTgP,KAAK;YAAAvF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAYP,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,gBAENhK,OAAA;UAAKmB,KAAK,EAAE;YAAEoO,OAAO,EAAE;UAAI,CAAE;UAAAjG,QAAA,EAAC;QAAgD;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MACpF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,EAGL7H,YAAY,iBACXnC,OAAA;QAAKmB,KAAK,EAAE;UAAE6N,UAAU,EAAE,CAAC;UAAEG,UAAU,EAAE,CAAC;UAAEnL,UAAU,EAAE;QAAc,CAAE;QAAAsF,QAAA,EACrEH,eAAe,CAAC;MAAC;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AAAAjJ,EAAA,CAv7BwBD,GAAG;EAAA,QAgBgBpB,aAAa,EACPC,aAAa;AAAA;AAAA6P,EAAA,GAjBtC1O,GAAG;AAw7B3B,SAASoL,GAAGA,CAACuD,EAAE,EAAE;EACf,OAAO;IACLzL,UAAU,EAAEyL,EAAE;IACd/J,KAAK,EAAE,OAAO;IACdvB,YAAY,EAAE,CAAC;IACfF,OAAO,EAAE,UAAU;IACnBC,MAAM,EAAE,MAAM;IACdgG,MAAM,EAAE;EACV,CAAC;AACH;AAEA,SAAS+B,IAAIA,CAACvG,KAAK,EAAE;EACnB,OAAO;IACLzB,OAAO,EAAE,SAAS;IAClBE,YAAY,EAAE,GAAG;IACjBD,MAAM,EAAE,aAAawB,KAAK,IAAI;IAC9B1B,UAAU,EAAE,GAAG0B,KAAK,IAAI;IACxBA,KAAK;IACLsG,UAAU,EAAE,GAAG;IACfkD,QAAQ,EAAE;EACZ,CAAC;AACH;AAAC,IAAAM,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}