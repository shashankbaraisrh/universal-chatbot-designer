{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gptActive, setGptActive] = useState(false);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptActive(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptActive(true); // activate open chat\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const handleGptMessage = async message => {\n    const summaryText = Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message\n    }];\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message,\n          summary: summaryText,\n          system_prompt: submittedFlow.settings.system_prompt,\n          gpt_model: submittedFlow.settings.gpt_model\n        })\n      });\n      const data = await res.json();\n      const gptReply = data.reply || \"No response from GPT.\";\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: gptReply\n      }]);\n    } catch (err) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Error contacting GPT.\"\n      }]);\n    }\n  };\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: () => {\n            const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n              type: \"application/json\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"conversation_data.json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          padding: 12,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\",\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Option Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedEdge.label,\n          onChange: e => updateEdgeLabel(e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\");\n          if (label) {\n            const newEdge = {\n              ...params,\n              id: `${params.source}-${params.target}`,\n              label,\n              markerEnd: {\n                type: MarkerType.ArrowClosed\n              }\n            };\n            setEdges(eds => [...eds, newEdge]);\n            const updatedNodes = nodes.map(node => node.id === params.source ? {\n              ...node,\n              data: {\n                ...node.data,\n                options: {\n                  ...(node.data.options || {}),\n                  [label]: params.target\n                }\n              }\n            } : node);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, [...manualEdges, newEdge]);\n          }\n        },\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"30%\",\n        borderLeft: \"2px solid #ccc\",\n        height: \"100vh\",\n        overflow: \"auto\"\n      },\n      children: chatbotReady && /*#__PURE__*/_jsxDEV(ChatbotPanel, {\n        chatHistory: chatHistory,\n        currentNodeId: currentNodeId,\n        flow: submittedFlow,\n        onRespond: handleUserResponse,\n        gptActive: gptActive,\n        inputValue: inputValue,\n        setInputValue: setInputValue,\n        handleGptMessage: handleGptMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cZKN7M0G8xBoZJW9Ozou3r/UqEY=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","ChatbotPanel","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","gptActive","setGptActive","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","currentNode","updatedHistory","newInputs","nextId","nextNode","summaryText","entries","k","v","join","summary","json","gptReply","reply","handleGptMessage","addNode","newId","toString","Math","random","newNode","updatedNodes","deleteNode","filter","updatedEdges","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","updated","newOptions","onNodeClick","_","onEdgeClick","width","height","display","children","flex","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","gap","color","onClick","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","right","onChange","onConnect","params","prompt","newEdge","eds","fitView","borderLeft","overflow","flow","onRespond","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gptActive, setGptActive] = useState(false);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptActive(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptActive(true); // activate open chat\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const handleGptMessage = async (message) => {\n    const summaryText = Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n    const updatedHistory = [...chatHistory, { sender: \"user\", message }];\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          message,\n          summary: summaryText,\n          system_prompt: submittedFlow.settings.system_prompt,\n          gpt_model: submittedFlow.settings.gpt_model\n        })\n      });\n      const data = await res.json();\n      const gptReply = data.reply || \"No response from GPT.\";\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: gptReply }]);\n    } catch (err) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n    }\n  };\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Side: React Flow */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div style={{ textAlign: \"center\", padding: \"12px\", background: \"#f1f5f9\", boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\", borderRadius: \"8px\", fontSize: \"18px\", fontWeight: \"bold\", fontFamily: \"Segoe UI, sans-serif\", width: \"fit-content\", margin: \"10px auto\", zIndex: 20, position: \"relative\" }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={addNode}>Add Node</button>\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={() => {\n            const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"conversation_data.json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          }}>Export JSON</button>\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={deleteNode}>Delete Node</button>\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={submitFlow}>Submit Flow</button>\n        </div>\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={undo}>Undo</button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={redo}>Redo</button>\n        </div>\n\n        {selectedNode && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f8fafc\", padding: 12, border: \"1px solid #d1d5db\", borderRadius: \"10px\", width: 300, boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Node: {selectedNode.id}</h4>\n            <label>Message:</label>\n            <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} />\n            <label>Type:</label>\n            <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}>\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n            <label>Capture Field:</label>\n            <input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} />\n            <label>Next Node ID:</label>\n            <input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        {selectedEdge && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f9fafb\", padding: 12, border: \"1px solid #ccc\", borderRadius: \"8px\", width: \"300px\", boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Edge</h4>\n            <label>Option Label:</label>\n            <input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message }, style: getNodeStyle(n.data.type) }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\");\n            if (label) {\n              const newEdge = {\n                ...params,\n                id: `${params.source}-${params.target}`,\n                label,\n                markerEnd: { type: MarkerType.ArrowClosed }\n              };\n              setEdges((eds) => [...eds, newEdge]);\n              const updatedNodes = nodes.map((node) =>\n                node.id === params.source\n                  ? {\n                      ...node,\n                      data: {\n                        ...node.data,\n                        options: {\n                          ...(node.data.options || {}),\n                          [label]: params.target\n                        }\n                      }\n                    }\n                  : node\n              );\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, [...manualEdges, newEdge]);\n            }\n          }}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Side: Chatbot Panel */}\n      <div style={{ width: \"30%\", borderLeft: \"2px solid #ccc\", height: \"100vh\", overflow: \"auto\" }}>\n        {chatbotReady && (\n          <ChatbotPanel\n            chatHistory={chatHistory}\n            currentNodeId={currentNodeId}\n            flow={submittedFlow}\n            onRespond={handleUserResponse}\n            gptActive={gptActive}\n            inputValue={inputValue}\n            setInputValue={setInputValue}\n            handleGptMessage={handleGptMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}