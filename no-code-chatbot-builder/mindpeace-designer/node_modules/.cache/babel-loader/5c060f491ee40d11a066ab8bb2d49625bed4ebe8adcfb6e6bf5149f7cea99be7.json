{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n\n  // Chatbot state\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [chatError, setChatError] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    const userMsg = userInput.trim();\n    setChatMessages(prev => [...prev, {\n      sender: \"user\",\n      text: userMsg\n    }]);\n    setUserInput(\"\");\n    const payload = {\n      message: userMsg,\n      summary: \"User provided some background during pre-chat flow.\",\n      system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    };\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const data = await res.json();\n      if (data.reply) {\n        setChatMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: data.reply\n        }]);\n      } else {\n        setChatError(\"GPT error.\");\n      }\n    } catch (e) {\n      setChatError(\"Backend connection failed.\");\n    }\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportJSON,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"300px\",\n        padding: \"20px\",\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), chatbotReady ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            overflowY: \"auto\",\n            marginBottom: \"10px\"\n          },\n          children: chatMessages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: msg.sender === \"user\" ? \"right\" : \"left\",\n              margin: \"4px 0\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                background: msg.sender === \"user\" ? \"#dcfce7\" : \"#e5e7eb\",\n                padding: \"8px 10px\",\n                borderRadius: \"12px\",\n                display: \"inline-block\",\n                maxWidth: \"100%\",\n                fontFamily: \"Segoe UI, sans-serif\"\n              },\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 19\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: \"6px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              flex: 1,\n              padding: \"6px\"\n            },\n            value: userInput,\n            onChange: e => setUserInput(e.target.value),\n            onKeyDown: e => e.key === \"Enter\" && sendMessage(),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this), chatError && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"red\"\n          },\n          children: chatError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Please submit your flow to activate the chatbot.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"h12FpxeeOZW0drHBgcXiyVfY2RA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","Fragment","_Fragment","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","chatMessages","setChatMessages","userInput","setUserInput","chatError","setChatError","history","edges","historyIndex","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","selectedNode","find","n","selectedEdge","e","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","output","getExportJSON","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","ok","alert","error","sendMessage","trim","userMsg","prev","sender","text","summary","json","reply","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","width","height","display","children","flex","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","gap","onClick","right","fitView","edgeLabelMode","borderLeft","flexDirection","overflowY","marginBottom","msg","i","onChange","onKeyDown","key","placeholder","color","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n\n  // Chatbot state\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [chatError, setChatError] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    const userMsg = userInput.trim();\n    setChatMessages((prev) => [...prev, { sender: \"user\", text: userMsg }]);\n    setUserInput(\"\");\n\n    const payload = {\n      message: userMsg,\n      summary: \"User provided some background during pre-chat flow.\",\n      system_prompt:\n        \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    };\n\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      const data = await res.json();\n      if (data.reply) {\n        setChatMessages((prev) => [...prev, { sender: \"bot\", text: data.reply }]);\n      } else {\n        setChatError(\"GPT error.\");\n      }\n    } catch (e) {\n      setChatError(\"Backend connection failed.\");\n    }\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* LEFT SIDE: React Flow */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        {/* Headline */}\n        <div style={{\n          textAlign: \"center\", padding: \"12px\", background: \"#f1f5f9\", boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\", borderRadius: \"8px\",\n          fontSize: \"18px\", fontWeight: \"bold\", fontFamily: \"Segoe UI, sans-serif\", width: \"fit-content\",\n          margin: \"10px auto\", zIndex: 20, position: \"relative\"\n        }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button onClick={addNode}>Add Node</button>\n          <button onClick={exportJSON}>Export JSON</button>\n          <button onClick={deleteNode}>Delete Node</button>\n          <button onClick={submitFlow}>Submit Flow</button>\n        </div>\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button onClick={undo}>Undo</button>\n          <button onClick={redo}>Redo</button>\n        </div>\n\n        {/* Node/Edge Editors */}\n        {/* [Unchanged — Skipped for brevity] */}\n\n        {/* React Flow Canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* RIGHT SIDE: Chatbot UI */}\n      <div style={{ width: \"300px\", padding: \"20px\", borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\" }}>\n        <h3>MindPeace Chat</h3>\n        {chatbotReady ? (\n          <>\n            <div style={{ flex: 1, overflowY: \"auto\", marginBottom: \"10px\" }}>\n              {chatMessages.map((msg, i) => (\n                <div key={i} style={{\n                  textAlign: msg.sender === \"user\" ? \"right\" : \"left\",\n                  margin: \"4px 0\"\n                }}>\n                  <span style={{\n                    background: msg.sender === \"user\" ? \"#dcfce7\" : \"#e5e7eb\",\n                    padding: \"8px 10px\",\n                    borderRadius: \"12px\",\n                    display: \"inline-block\",\n                    maxWidth: \"100%\",\n                    fontFamily: \"Segoe UI, sans-serif\"\n                  }}>\n                    {msg.text}\n                  </span>\n                </div>\n              ))}\n            </div>\n            <div style={{ display: \"flex\", gap: \"6px\" }}>\n              <input\n                style={{ flex: 1, padding: \"6px\" }}\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n                placeholder=\"Type your message...\"\n              />\n              <button onClick={sendMessage}>Send</button>\n            </div>\n            {chatError && <div style={{ color: \"red\" }}>{chatError}</div>}\n          </>\n        ) : (\n          <div>Please submit your flow to activate the chatbot.</div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}