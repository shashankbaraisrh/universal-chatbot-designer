{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, applyNodeChanges, applyEdgeChanges, addEdge } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [];\nconst initialEdges = [];\nexport default function App() {\n  _s();\n  var _getNodeById, _getNodeById2, _getNodeById3, _edges$find;\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [userInputs, setUserInputs] = useState({});\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [multiChoiceSelections, setMultiChoiceSelections] = useState([]);\n  const [showMultiSubmit, setShowMultiSubmit] = useState(false);\n  const inputRef = useRef(null);\n  const nodeTypes = {\n    start: \"#cceeff\",\n    choice: \"#ffffcc\",\n    multi_choice: \"#ffcc99\",\n    gpt: \"#e0ccff\",\n    message: \"#f8d7da\"\n  };\n  const getNodeById = id => nodes.find(n => n.id === id);\n  const handleNodeClick = (_event, node) => setSelectedNodeId(node.id);\n  const handleEdgeClick = (_event, edge) => setSelectedEdgeId(edge.id);\n  const handleNodesChange = changes => setNodes(nds => applyNodeChanges(changes, nds));\n  const handleEdgesChange = changes => setEdges(eds => applyEdgeChanges(changes, eds));\n  const handleConnect = params => setEdges(eds => addEdge({\n    ...params,\n    label: \"next\"\n  }, eds));\n  const getOutgoingEdges = nodeId => edges.filter(e => e.source === nodeId);\n  const getNextNodeId = (edgeList, label) => {\n    const match = edgeList.find(e => e.label === label || e.label === \"next\");\n    return (match === null || match === void 0 ? void 0 : match.target) || null;\n  };\n  const getNodeStyle = type => ({\n    padding: 10,\n    borderRadius: 10,\n    boxShadow: \"2px 2px 10px rgba(0,0,0,0.2)\",\n    background: nodeTypes[type] || \"#ffffff\",\n    border: \"1px solid #ccc\",\n    width: 180,\n    textAlign: \"center\",\n    whiteSpace: \"pre-wrap\"\n  });\n  const handleNodeFieldChange = (field, value) => {\n    setNodes(prev => prev.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node));\n  };\n  const handleEdgeLabelChange = value => {\n    setEdges(prev => prev.map(edge => edge.id === selectedEdgeId ? {\n      ...edge,\n      label: value\n    } : edge));\n  };\n  const addNode = () => {\n    const id = (nodes.length + 1).toString();\n    const newNode = {\n      id,\n      type: \"default\",\n      position: {\n        x: 100 + nodes.length * 20,\n        y: 100 + nodes.length * 20\n      },\n      data: {\n        label: `This is node ${id}`,\n        type: \"message\",\n        message: \"\"\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setEdges(eds => eds.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setNodes(nds => nds.filter(n => n.id !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n  const exportFlow = () => {\n    const settings = {\n      system_prompt: \"You are a helpful assistant.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    };\n    const exportData = {\n      settings,\n      nodes: nodes.map(n => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture || \"\",\n        next: getOutgoingEdges(n.id).filter(e => e.label === \"next\").map(e => e.target)[0] || null,\n        options: getOutgoingEdges(n.id).filter(e => e.label !== \"next\").map(e => ({\n          label: e.label,\n          next_id: e.target\n        }))\n      }))\n    };\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\"\n    });\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(blob);\n    a.download = \"conversation_data.json\";\n    a.click();\n  };\n  const submitFlow = async () => {\n    const settings = {\n      system_prompt: \"You are a helpful assistant.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    };\n    const exportData = {\n      settings,\n      nodes: nodes.map(n => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture || \"\",\n        next: getOutgoingEdges(n.id).filter(e => e.label === \"next\").map(e => e.target)[0] || null,\n        options: getOutgoingEdges(n.id).filter(e => e.label !== \"next\").map(e => ({\n          label: e.label,\n          next_id: e.target\n        }))\n      }))\n    };\n    setSubmittedFlow(exportData);\n    setChatStarted(true);\n    setCurrentNodeId(\"1\");\n    setChatHistory([]);\n    setUserInputs({});\n    setChatInput(\"\");\n    setMultiChoiceSelections([]);\n    setShowMultiSubmit(false);\n    await fetch(\"http://localhost:5000/submit\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(exportData)\n    });\n  };\n  const handleUserInput = async () => {\n    const currentNode = submittedFlow.nodes.find(n => n.id === currentNodeId);\n    if (!currentNode) return;\n    const updatedHistory = [...chatHistory, {\n      role: \"user\",\n      content: chatInput\n    }];\n    setChatHistory(updatedHistory);\n    const res = await fetch(\"http://localhost:5000/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        chat_history: updatedHistory,\n        user_inputs: userInputs,\n        system_prompt: submittedFlow.settings.system_prompt,\n        gpt_model: submittedFlow.settings.gpt_model\n      })\n    });\n    const data = await res.json();\n    setChatHistory(prev => [...prev, {\n      role: \"assistant\",\n      content: data.reply\n    }]);\n    setChatInput(\"\");\n  };\n  const proceedToNextNode = async (response, selectedOptionLabel = null) => {\n    var _currentNode$options, _currentNode$options$;\n    const currentNode = submittedFlow.nodes.find(n => n.id === currentNodeId);\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    const formattedHistory = [...chatHistory, {\n      role: \"assistant\",\n      content: currentNode.message\n    }, {\n      role: \"user\",\n      content: response\n    }];\n    setChatHistory(formattedHistory);\n    setUserInputs(newInputs);\n    if (currentNode.type === \"gpt\") {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          chat_history: formattedHistory,\n          user_inputs: newInputs,\n          system_prompt: submittedFlow.settings.system_prompt,\n          gpt_model: submittedFlow.settings.gpt_model\n        })\n      });\n      const data = await res.json();\n      setChatHistory(prev => [...prev, {\n        role: \"assistant\",\n        content: data.reply\n      }]);\n      setChatInput(\"\");\n    }\n    const nextNodeId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : (_currentNode$options$ = _currentNode$options.find(opt => opt.label === selectedOptionLabel)) === null || _currentNode$options$ === void 0 ? void 0 : _currentNode$options$.next_id) || null;\n    setCurrentNodeId(nextNodeId);\n    setMultiChoiceSelections([]);\n    setShowMultiSubmit(false);\n  };\n  const renderChatInput = () => {\n    if (!chatStarted || !currentNodeId) return null;\n    const currentNode = submittedFlow.nodes.find(n => n.id === currentNodeId);\n    if (!currentNode) return null;\n    if (currentNode.type === \"choice\") {\n      return currentNode.options.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => proceedToNextNode(opt.label, opt.label),\n        style: {\n          marginRight: \"10px\"\n        },\n        children: opt.label\n      }, opt.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this));\n    }\n    if (currentNode.type === \"multi_choice\") {\n      const handleCheckboxChange = label => {\n        setMultiChoiceSelections(prev => prev.includes(label) ? prev.filter(l => l !== label) : [...prev, label]);\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [currentNode.options.map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelections.includes(opt.label),\n              onChange: () => handleCheckboxChange(opt.label)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 17\n            }, this), opt.label]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this)\n        }, opt.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            marginTop: \"10px\",\n            background: \"green\",\n            color: \"white\"\n          },\n          onClick: () => proceedToNextNode(multiChoiceSelections.join(\", \"), \"next\"),\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this);\n    }\n    if (currentNode.type === \"gpt\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: chatInput,\n          onChange: e => setChatInput(e.target.value),\n          style: {\n            flex: 1,\n            marginRight: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUserInput,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => proceedToNextNode(\"\"),\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        style: {\n          background: \"deepskyblue\"\n        },\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportFlow,\n        style: {\n          background: \"limegreen\"\n        },\n        children: \"Export JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        style: {\n          background: \"red\",\n          color: \"white\"\n        },\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitFlow,\n        style: {\n          background: \"mediumseagreen\"\n        },\n        children: \"Submit Flow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 100,\n          left: 10,\n          zIndex: 10\n        },\n        children: [selectedNodeId && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Editing Node: \", selectedNodeId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: 3,\n            value: ((_getNodeById = getNodeById(selectedNodeId)) === null || _getNodeById === void 0 ? void 0 : _getNodeById.data.message) || \"\",\n            onChange: e => handleNodeFieldChange(\"message\", e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: ((_getNodeById2 = getNodeById(selectedNodeId)) === null || _getNodeById2 === void 0 ? void 0 : _getNodeById2.data.type) || \"message\",\n            onChange: e => handleNodeFieldChange(\"type\", e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"message\",\n              children: \"message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: ((_getNodeById3 = getNodeById(selectedNodeId)) === null || _getNodeById3 === void 0 ? void 0 : _getNodeById3.data.capture) || \"\",\n            onChange: e => handleNodeFieldChange(\"capture\", e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this), selectedEdgeId && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Editing Edge: \", selectedEdgeId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: ((_edges$find = edges.find(e => e.id === selectedEdgeId)) === null || _edges$find === void 0 ? void 0 : _edges$find.label) || \"\",\n            onChange: e => handleEdgeLabelChange(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          style: getNodeStyle(n.data.type),\n          data: {\n            ...n.data,\n            label: n.data.message\n          }\n        })),\n        edges: edges,\n        onNodesChange: handleNodesChange,\n        onEdgesChange: handleEdgesChange,\n        onConnect: handleConnect,\n        onNodeClick: handleNodeClick,\n        onEdgeClick: handleEdgeClick,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"30%\",\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\",\n        overflowY: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), chatHistory.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: msg.role === \"user\" ? \"#cce5ff\" : \"#f1f1f1\",\n          padding: \"8px\",\n          borderRadius: \"10px\",\n          margin: \"5px 0\",\n          alignSelf: msg.role === \"user\" ? \"flex-end\" : \"flex-start\",\n          maxWidth: \"90%\"\n        },\n        children: msg.content\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this)), renderChatInput()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BkymT3z1bEupiwXWeNzlv+wMz5w=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","ReactFlow","MiniMap","Controls","Background","applyNodeChanges","applyEdgeChanges","addEdge","jsxDEV","_jsxDEV","initialNodes","initialEdges","App","_s","_getNodeById","_getNodeById2","_getNodeById3","_edges$find","nodes","setNodes","edges","setEdges","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","userInputs","setUserInputs","submittedFlow","setSubmittedFlow","chatStarted","setChatStarted","chatHistory","setChatHistory","currentNodeId","setCurrentNodeId","chatInput","setChatInput","multiChoiceSelections","setMultiChoiceSelections","showMultiSubmit","setShowMultiSubmit","inputRef","nodeTypes","start","choice","multi_choice","gpt","message","getNodeById","id","find","n","handleNodeClick","_event","node","handleEdgeClick","edge","handleNodesChange","changes","nds","handleEdgesChange","eds","handleConnect","params","label","getOutgoingEdges","nodeId","filter","e","source","getNextNodeId","edgeList","match","target","getNodeStyle","type","padding","borderRadius","boxShadow","background","border","width","textAlign","whiteSpace","handleNodeFieldChange","field","value","prev","map","data","handleEdgeLabelChange","addNode","length","toString","newNode","position","x","y","deleteNode","exportFlow","settings","system_prompt","gpt_model","exportData","capture","next","options","next_id","blob","Blob","JSON","stringify","a","document","createElement","href","URL","createObjectURL","download","click","submitFlow","fetch","method","headers","body","handleUserInput","currentNode","updatedHistory","role","content","res","chat_history","user_inputs","json","reply","proceedToNextNode","response","selectedOptionLabel","_currentNode$options","_currentNode$options$","newInputs","formattedHistory","nextNodeId","opt","renderChatInput","onClick","style","marginRight","children","fileName","_jsxFileName","lineNumber","columnNumber","handleCheckboxChange","includes","l","checked","onChange","marginTop","color","join","display","ref","flex","height","top","left","zIndex","rows","onNodesChange","onEdgesChange","onConnect","onNodeClick","onEdgeClick","fitView","borderLeft","overflowY","msg","i","margin","alignSelf","maxWidth","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  applyNodeChanges,\n  applyEdgeChanges,\n  addEdge\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport \"./styles.css\";\n\nconst initialNodes = [];\nconst initialEdges = [];\n\nexport default function App() {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [userInputs, setUserInputs] = useState({});\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [multiChoiceSelections, setMultiChoiceSelections] = useState([]);\n  const [showMultiSubmit, setShowMultiSubmit] = useState(false);\n  const inputRef = useRef(null);\n\n  const nodeTypes = {\n    start: \"#cceeff\",\n    choice: \"#ffffcc\",\n    multi_choice: \"#ffcc99\",\n    gpt: \"#e0ccff\",\n    message: \"#f8d7da\"\n  };\n\n  const getNodeById = (id) => nodes.find((n) => n.id === id);\n\n  const handleNodeClick = (_event, node) => setSelectedNodeId(node.id);\n  const handleEdgeClick = (_event, edge) => setSelectedEdgeId(edge.id);\n\n  const handleNodesChange = (changes) => setNodes((nds) => applyNodeChanges(changes, nds));\n  const handleEdgesChange = (changes) => setEdges((eds) => applyEdgeChanges(changes, eds));\n\n  const handleConnect = (params) =>\n    setEdges((eds) => addEdge({ ...params, label: \"next\" }, eds));\n\n  const getOutgoingEdges = (nodeId) =>\n    edges.filter((e) => e.source === nodeId);\n\n  const getNextNodeId = (edgeList, label) => {\n    const match = edgeList.find((e) => e.label === label || e.label === \"next\");\n    return match?.target || null;\n  };\n\n  const getNodeStyle = (type) => ({\n    padding: 10,\n    borderRadius: 10,\n    boxShadow: \"2px 2px 10px rgba(0,0,0,0.2)\",\n    background: nodeTypes[type] || \"#ffffff\",\n    border: \"1px solid #ccc\",\n    width: 180,\n    textAlign: \"center\",\n    whiteSpace: \"pre-wrap\"\n  });\n\n  const handleNodeFieldChange = (field, value) => {\n    setNodes((prev) =>\n      prev.map((node) =>\n        node.id === selectedNodeId\n          ? { ...node, data: { ...node.data, [field]: value } }\n          : node\n      )\n    );\n  };\n\n  const handleEdgeLabelChange = (value) => {\n    setEdges((prev) =>\n      prev.map((edge) =>\n        edge.id === selectedEdgeId ? { ...edge, label: value } : edge\n      )\n    );\n  };\n\n  const addNode = () => {\n    const id = (nodes.length + 1).toString();\n    const newNode = {\n      id,\n      type: \"default\",\n      position: { x: 100 + nodes.length * 20, y: 100 + nodes.length * 20 },\n      data: { label: `This is node ${id}`, type: \"message\", message: \"\" }\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setEdges((eds) => eds.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setNodes((nds) => nds.filter((n) => n.id !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n\n  const exportFlow = () => {\n    const settings = {\n      system_prompt: \"You are a helpful assistant.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    };\n    const exportData = {\n      settings,\n      nodes: nodes.map((n) => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture || \"\",\n        next: getOutgoingEdges(n.id)\n          .filter((e) => e.label === \"next\")\n          .map((e) => e.target)[0] || null,\n        options: getOutgoingEdges(n.id)\n          .filter((e) => e.label !== \"next\")\n          .map((e) => ({ label: e.label, next_id: e.target }))\n      }))\n    };\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: \"application/json\" });\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(blob);\n    a.download = \"conversation_data.json\";\n    a.click();\n  };\n\n  const submitFlow = async () => {\n    const settings = {\n      system_prompt: \"You are a helpful assistant.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    };\n    const exportData = {\n      settings,\n      nodes: nodes.map((n) => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture || \"\",\n        next: getOutgoingEdges(n.id)\n          .filter((e) => e.label === \"next\")\n          .map((e) => e.target)[0] || null,\n        options: getOutgoingEdges(n.id)\n          .filter((e) => e.label !== \"next\")\n          .map((e) => ({ label: e.label, next_id: e.target }))\n      }))\n    };\n    setSubmittedFlow(exportData);\n    setChatStarted(true);\n    setCurrentNodeId(\"1\");\n    setChatHistory([]);\n    setUserInputs({});\n    setChatInput(\"\");\n    setMultiChoiceSelections([]);\n    setShowMultiSubmit(false);\n\n    await fetch(\"http://localhost:5000/submit\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(exportData)\n    });\n  };\n\n  const handleUserInput = async () => {\n    const currentNode = submittedFlow.nodes.find((n) => n.id === currentNodeId);\n    if (!currentNode) return;\n\n    const updatedHistory = [...chatHistory, { role: \"user\", content: chatInput }];\n    setChatHistory(updatedHistory);\n\n    const res = await fetch(\"http://localhost:5000/chat\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        chat_history: updatedHistory,\n        user_inputs: userInputs,\n        system_prompt: submittedFlow.settings.system_prompt,\n        gpt_model: submittedFlow.settings.gpt_model\n      })\n    });\n\n    const data = await res.json();\n    setChatHistory((prev) => [...prev, { role: \"assistant\", content: data.reply }]);\n    setChatInput(\"\");\n  };\n\n  const proceedToNextNode = async (response, selectedOptionLabel = null) => {\n    const currentNode = submittedFlow.nodes.find((n) => n.id === currentNodeId);\n    const newInputs = { ...userInputs };\n\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    const formattedHistory = [\n      ...chatHistory,\n      { role: \"assistant\", content: currentNode.message },\n      { role: \"user\", content: response }\n    ];\n    setChatHistory(formattedHistory);\n    setUserInputs(newInputs);\n\n    if (currentNode.type === \"gpt\") {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          chat_history: formattedHistory,\n          user_inputs: newInputs,\n          system_prompt: submittedFlow.settings.system_prompt,\n          gpt_model: submittedFlow.settings.gpt_model\n        })\n      });\n      const data = await res.json();\n      setChatHistory((prev) => [...prev, { role: \"assistant\", content: data.reply }]);\n      setChatInput(\"\");\n    }\n\n    const nextNodeId =\n      currentNode.next ||\n      currentNode.options?.find((opt) => opt.label === selectedOptionLabel)?.next_id ||\n      null;\n\n    setCurrentNodeId(nextNodeId);\n    setMultiChoiceSelections([]);\n    setShowMultiSubmit(false);\n  };\n\n  const renderChatInput = () => {\n    if (!chatStarted || !currentNodeId) return null;\n\n    const currentNode = submittedFlow.nodes.find((n) => n.id === currentNodeId);\n    if (!currentNode) return null;\n\n    if (currentNode.type === \"choice\") {\n      return currentNode.options.map((opt) => (\n        <button\n          key={opt.label}\n          onClick={() => proceedToNextNode(opt.label, opt.label)}\n          style={{ marginRight: \"10px\" }}\n        >\n          {opt.label}\n        </button>\n      ));\n    }\n\n    if (currentNode.type === \"multi_choice\") {\n      const handleCheckboxChange = (label) => {\n        setMultiChoiceSelections((prev) =>\n          prev.includes(label) ? prev.filter((l) => l !== label) : [...prev, label]\n        );\n      };\n\n      return (\n        <div>\n          {currentNode.options.map((opt) => (\n            <div key={opt.label}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelections.includes(opt.label)}\n                  onChange={() => handleCheckboxChange(opt.label)}\n                />\n                {opt.label}\n              </label>\n            </div>\n          ))}\n          <button\n            style={{ marginTop: \"10px\", background: \"green\", color: \"white\" }}\n            onClick={() => proceedToNextNode(multiChoiceSelections.join(\", \"), \"next\")}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (currentNode.type === \"gpt\") {\n      return (\n        <div style={{ display: \"flex\", marginTop: 10 }}>\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={chatInput}\n            onChange={(e) => setChatInput(e.target.value)}\n            style={{ flex: 1, marginRight: 10 }}\n          />\n          <button onClick={handleUserInput}>Send</button>\n        </div>\n      );\n    }\n\n    return (\n      <button onClick={() => proceedToNextNode(\"\")}>Continue</button>\n    );\n  };\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", width: \"100vw\" }}>\n      {/* Left Designer Panel */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <h2>Your AI Chatbot Designer — Fast. Visual. Code-Free</h2>\n        <button onClick={addNode} style={{ background: \"deepskyblue\" }}>Add Node</button>\n        <button onClick={exportFlow} style={{ background: \"limegreen\" }}>Export JSON</button>\n        <button onClick={deleteNode} style={{ background: \"red\", color: \"white\" }}>Delete Node</button>\n        <button onClick={submitFlow} style={{ background: \"mediumseagreen\" }}>Submit Flow</button>\n\n        <div style={{ position: \"absolute\", top: 100, left: 10, zIndex: 10 }}>\n          {selectedNodeId && (\n            <div>\n              <h4>Editing Node: {selectedNodeId}</h4>\n              <label>Message:</label>\n              <textarea\n                rows={3}\n                value={getNodeById(selectedNodeId)?.data.message || \"\"}\n                onChange={(e) => handleNodeFieldChange(\"message\", e.target.value)}\n              />\n              <br />\n              <label>Type:</label>\n              <select\n                value={getNodeById(selectedNodeId)?.data.type || \"message\"}\n                onChange={(e) => handleNodeFieldChange(\"type\", e.target.value)}\n              >\n                <option value=\"message\">message</option>\n                <option value=\"choice\">choice</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n              </select>\n              <br />\n              <label>Capture Field:</label>\n              <input\n                value={getNodeById(selectedNodeId)?.data.capture || \"\"}\n                onChange={(e) => handleNodeFieldChange(\"capture\", e.target.value)}\n              />\n            </div>\n          )}\n\n          {selectedEdgeId && (\n            <div>\n              <h4>Editing Edge: {selectedEdgeId}</h4>\n              <label>Label:</label>\n              <input\n                value={edges.find((e) => e.id === selectedEdgeId)?.label || \"\"}\n                onChange={(e) => handleEdgeLabelChange(e.target.value)}\n              />\n            </div>\n          )}\n        </div>\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({ ...n, style: getNodeStyle(n.data.type), data: { ...n.data, label: n.data.message } }))}\n          edges={edges}\n          onNodesChange={handleNodesChange}\n          onEdgesChange={handleEdgesChange}\n          onConnect={handleConnect}\n          onNodeClick={handleNodeClick}\n          onEdgeClick={handleEdgeClick}\n          fitView\n        >\n          <Background />\n          <Controls />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel */}\n      <div style={{ width: \"30%\", padding: \"10px\", borderLeft: \"1px solid #ccc\", overflowY: \"auto\" }}>\n        <h4>MindPeace Chat</h4>\n        {chatHistory.map((msg, i) => (\n          <div\n            key={i}\n            style={{\n              background: msg.role === \"user\" ? \"#cce5ff\" : \"#f1f1f1\",\n              padding: \"8px\",\n              borderRadius: \"10px\",\n              margin: \"5px 0\",\n              alignSelf: msg.role === \"user\" ? \"flex-end\" : \"flex-start\",\n              maxWidth: \"90%\"\n            }}\n          >\n            {msg.content}\n          </div>\n        ))}\n        {renderChatInput()}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}