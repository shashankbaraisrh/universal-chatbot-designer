{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const {\n        id,\n        data\n      } = node;\n      if (data !== null && data !== void 0 && data.next && !existing.has(`${id}->${data.next}`)) {\n        autoEdges.push({\n          id: `auto-${id}-${data.next}`,\n          source: id,\n          target: data.next,\n          animated: false,\n          type: \"default\",\n          label: \"next\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          }\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges]);\n  const addNode = () => {\n    const newId = `${nodeCounter++}`;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updated = [...nodes, newNode];\n    setNodes(updated);\n    pushToHistory(updated, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant...\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"conversation_data.json\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n  const importJSON = e => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      try {\n        const json = JSON.parse(fileReader.result);\n        const newNodes = Object.entries(json.nodes || {}).map(([id, data], index) => ({\n          id,\n          data,\n          position: {\n            x: 100 + index * 100,\n            y: 100 + index * 50\n          },\n          type: \"default\"\n        }));\n        const newEdges = [];\n        newNodes.forEach(node => {\n          if (node.data.next) {\n            newEdges.push({\n              id: `auto-${node.id}-${node.data.next}`,\n              source: node.id,\n              target: node.data.next,\n              label: \"next\",\n              style: {\n                strokeDasharray: \"5,5\",\n                stroke: \"#999\"\n              },\n              markerEnd: {\n                type: MarkerType.ArrowClosed\n              }\n            });\n          }\n          if (node.data.options) {\n            Object.entries(node.data.options).forEach(([key, target]) => {\n              newEdges.push({\n                id: `e${node.id}-${target}-${key}`,\n                source: node.id,\n                target,\n                label: key,\n                markerEnd: {\n                  type: MarkerType.ArrowClosed\n                }\n              });\n            });\n          }\n        });\n        setNodes(newNodes);\n        setEdges(newEdges);\n        pushToHistory(newNodes, newEdges);\n      } catch (err) {\n        alert(\"Invalid JSON file.\");\n      }\n    };\n    fileReader.readAsText(e.target.files[0]);\n  };\n  const updateNodeField = (field, value) => {\n    const updated = nodes.map(n => n.id === selectedNodeId ? {\n      ...n,\n      data: {\n        ...n.data,\n        [field]: value\n      }\n    } : n);\n    setNodes(updated);\n    pushToHistory(updated, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.options) {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        padding: \"12px\",\n        background: \"#f1f5f9\",\n        boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n        borderRadius: \"8px\",\n        fontSize: \"18px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Segoe UI, sans-serif\",\n        width: \"fit-content\",\n        margin: \"10px auto\"\n      },\n      children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 60,\n        left: 10,\n        display: \"flex\",\n        gap: 10,\n        zIndex: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        style: {\n          background: \"#38bdf8\",\n          color: \"white\",\n          padding: \"6px 12px\",\n          borderRadius: 6\n        },\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        style: {\n          background: \"#22c55e\",\n          color: \"white\",\n          padding: \"6px 12px\",\n          borderRadius: 6\n        },\n        children: \"Export JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        style: {\n          background: \"#ef4444\",\n          color: \"white\",\n          padding: \"6px 12px\",\n          borderRadius: 6\n        },\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          background: \"#6366f1\",\n          color: \"white\",\n          padding: \"6px 12px\",\n          borderRadius: 6,\n          cursor: \"pointer\"\n        },\n        children: [\"Import JSON\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importJSON,\n          style: {\n            display: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 60,\n        right: 10,\n        display: \"flex\",\n        gap: 10,\n        zIndex: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: undo,\n        style: {\n          background: \"#a855f7\",\n          color: \"white\",\n          padding: \"6px 12px\",\n          borderRadius: 6\n        },\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: redo,\n        style: {\n          background: \"#f59e0b\",\n          color: \"white\",\n          padding: \"6px 12px\",\n          borderRadius: 6\n        },\n        children: \"Redo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 110,\n        left: 10,\n        zIndex: 10,\n        background: \"#f8fafc\",\n        padding: 12,\n        border: \"1px solid #d1d5db\",\n        borderRadius: \"10px\",\n        width: 300,\n        boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Editing Node: \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: selectedNode.data.message,\n        onChange: e => updateNodeField(\"message\", e.target.value),\n        style: {\n          width: \"100%\",\n          height: 60\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedNode.data.type,\n        onChange: e => updateNodeField(\"type\", e.target.value),\n        style: {\n          width: \"100%\",\n          marginTop: 8\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"choice\",\n          children: \"choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"multi_choice\",\n          children: \"multi_choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt\",\n          children: \"gpt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"end\",\n          children: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Capture Field\",\n        value: selectedNode.data.capture,\n        onChange: e => updateNodeField(\"capture\", e.target.value),\n        style: {\n          width: \"100%\",\n          marginTop: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Next Node ID\",\n        value: selectedNode.data.next,\n        onChange: e => updateNodeField(\"next\", e.target.value),\n        style: {\n          width: \"100%\",\n          marginTop: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 110,\n        left: 10,\n        zIndex: 10,\n        background: \"#f9fafb\",\n        padding: 12,\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        width: \"300px\",\n        boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedEdge.label,\n        onChange: e => updateEdgeLabel(e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data,\n          label: n.data.message\n        },\n        style: getNodeStyle(n.data.type)\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HD/VGRdoNKuO1pWy9XDJ73unYys=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","history","edges","historyIndex","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","selectedNode","find","n","selectedEdge","e","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existing","Set","map","source","target","autoEdges","node","has","animated","label","style","strokeDasharray","stroke","markerEnd","ArrowClosed","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","addNode","newId","Math","random","newNode","deleteNode","filter","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","blob","Blob","JSON","stringify","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","importJSON","fileReader","FileReader","onload","json","parse","result","entries","index","key","err","alert","readAsText","files","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","width","height","children","textAlign","fontSize","fontWeight","margin","fileName","_jsxFileName","lineNumber","columnNumber","top","left","display","gap","zIndex","onClick","color","cursor","accept","onChange","right","marginTop","placeholder","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const { id, data } = node;\n      if (data?.next && !existing.has(`${id}->${data.next}`)) {\n        autoEdges.push({\n          id: `auto-${id}-${data.next}`,\n          source: id,\n          target: data.next,\n          animated: false,\n          type: \"default\",\n          label: \"next\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed }\n        });\n      }\n    }\n\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges]\n  );\n\n  const addNode = () => {\n    const newId = `${nodeCounter++}`;\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updated = [...nodes, newNode];\n    setNodes(updated);\n    pushToHistory(updated, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant...\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"conversation_data.json\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n\n  const importJSON = (e) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      try {\n        const json = JSON.parse(fileReader.result);\n        const newNodes = Object.entries(json.nodes || {}).map(([id, data], index) => ({\n          id,\n          data,\n          position: { x: 100 + index * 100, y: 100 + index * 50 },\n          type: \"default\"\n        }));\n\n        const newEdges = [];\n        newNodes.forEach((node) => {\n          if (node.data.next) {\n            newEdges.push({\n              id: `auto-${node.id}-${node.data.next}`,\n              source: node.id,\n              target: node.data.next,\n              label: \"next\",\n              style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n              markerEnd: { type: MarkerType.ArrowClosed }\n            });\n          }\n          if (node.data.options) {\n            Object.entries(node.data.options).forEach(([key, target]) => {\n              newEdges.push({\n                id: `e${node.id}-${target}-${key}`,\n                source: node.id,\n                target,\n                label: key,\n                markerEnd: { type: MarkerType.ArrowClosed }\n              });\n            });\n          }\n        });\n\n        setNodes(newNodes);\n        setEdges(newEdges);\n        pushToHistory(newNodes, newEdges);\n      } catch (err) {\n        alert(\"Invalid JSON file.\");\n      }\n    };\n    fileReader.readAsText(e.target.files[0]);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updated = nodes.map(n =>\n      n.id === selectedNodeId ? { ...n, data: { ...n.data, [field]: value } } : n\n    );\n    setNodes(updated);\n    pushToHistory(updated, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map(edge =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.options) {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <div style={{\n        textAlign: \"center\",\n        padding: \"12px\",\n        background: \"#f1f5f9\",\n        boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n        borderRadius: \"8px\",\n        fontSize: \"18px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Segoe UI, sans-serif\",\n        width: \"fit-content\",\n        margin: \"10px auto\"\n      }}>\n        Your AI Chatbot Designer — Fast. Visual. Code-Free\n      </div>\n\n      <div style={{ position: \"absolute\", top: 60, left: 10, display: \"flex\", gap: 10, zIndex: 10 }}>\n        <button onClick={addNode} style={{ background: \"#38bdf8\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Add Node</button>\n        <button onClick={exportJSON} style={{ background: \"#22c55e\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Export JSON</button>\n        <button onClick={deleteNode} style={{ background: \"#ef4444\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Delete Node</button>\n        <label style={{ background: \"#6366f1\", color: \"white\", padding: \"6px 12px\", borderRadius: 6, cursor: \"pointer\" }}>\n          Import JSON\n          <input type=\"file\" accept=\".json\" onChange={importJSON} style={{ display: \"none\" }} />\n        </label>\n      </div>\n\n      <div style={{ position: \"absolute\", top: 60, right: 10, display: \"flex\", gap: 10, zIndex: 10 }}>\n        <button onClick={undo} style={{ background: \"#a855f7\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Undo</button>\n        <button onClick={redo} style={{ background: \"#f59e0b\", color: \"white\", padding: \"6px 12px\", borderRadius: 6 }}>Redo</button>\n      </div>\n\n      {selectedNode && (\n        <div style={{\n          position: \"absolute\", top: 110, left: 10, zIndex: 10,\n          background: \"#f8fafc\", padding: 12, border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\", width: 300, boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\"\n        }}>\n          <h4>Editing Node: {selectedNode.id}</h4>\n          <textarea value={selectedNode.data.message} onChange={e => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} />\n          <select value={selectedNode.data.type} onChange={e => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\", marginTop: 8 }}>\n            <option value=\"choice\">choice</option>\n            <option value=\"input\">input</option>\n            <option value=\"multi_choice\">multi_choice</option>\n            <option value=\"gpt\">gpt</option>\n            <option value=\"end\">end</option>\n          </select>\n          <input type=\"text\" placeholder=\"Capture Field\" value={selectedNode.data.capture} onChange={e => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\", marginTop: 8 }} />\n          <input type=\"text\" placeholder=\"Next Node ID\" value={selectedNode.data.next} onChange={e => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\", marginTop: 8 }} />\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div style={{\n          position: \"absolute\", top: 110, left: 10, zIndex: 10,\n          background: \"#f9fafb\", padding: 12, border: \"1px solid #ccc\",\n          borderRadius: \"8px\", width: \"300px\", boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\"\n        }}>\n          <h4>Editing Edge</h4>\n          <input type=\"text\" value={selectedEdge.label} onChange={e => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} />\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({\n          ...n,\n          data: { ...n.data, label: n.data.message },\n          style: getNodeStyle(n.data.type)\n        }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}