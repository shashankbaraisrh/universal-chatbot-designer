{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: payload.nodes[\"1\"].message\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: \"Server error during GPT response.\"\n        }]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId) return null;\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\" || node.type === \"multi_choice\") {\n      return Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUserResponse(opt),\n        style: {\n          padding: \"8px\",\n          margin: \"4px\",\n          width: \"100%\",\n          borderRadius: 6,\n          border: \"1px solid #ccc\",\n          background: \"#e0f2fe\"\n        },\n        children: opt\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this));\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(inputValue),\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: exportJSON,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          padding: 12,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\",\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Option Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedEdge.label,\n          onChange: e => updateEdgeLabel(e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10\n        },\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          overflowY: \"auto\",\n          marginBottom: 10\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), chatbotReady && renderChatInput()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kpvbw4ZUr6bpSw0VuRRea918wec=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","addNode","newId","toString","Math","random","newNode","updatedNodes","deleteNode","filter","updatedEdges","exportJSON","output","getExportJSON","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","ok","sender","alert","error","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","currentNode","updatedHistory","newInputs","nextId","nextNode","summaryText","entries","k","v","join","summary","json","gptReply","reply","err","renderChatInput","opt","onClick","margin","width","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","onKeyDown","key","marginBottom","color","updateNodeField","field","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","updated","newOptions","onNodeClick","_","onEdgeClick","height","display","flex","textAlign","fontSize","fontWeight","zIndex","top","left","gap","right","onConnect","params","prompt","edgeId","fitView","edgeLabelMode","borderLeft","flexDirection","justifyContent","flexGrow","overflowY","entry","index","alignSelf","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: payload.nodes[\"1\"].message }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: \"Server error during GPT response.\" }\n        ]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId) return null;\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\" || node.type === \"multi_choice\") {\n      return Object.keys(node.options || {}).map((opt) => (\n        <button key={opt} onClick={() => handleUserResponse(opt)} style={{ padding: \"8px\", margin: \"4px\", width: \"100%\", borderRadius: 6, border: \"1px solid #ccc\", background: \"#e0f2fe\" }}>\n          {opt}\n        </button>\n      ));\n    }\n    if (node.type === \"input\") {\n      return (\n        <div>\n          <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} onKeyDown={(e) => e.key === \"Enter\" && handleUserResponse(inputValue)} style={{ width: \"100%\", padding: 8, marginBottom: 8, borderRadius: 6, border: \"1px solid #ccc\" }} />\n          <button onClick={() => handleUserResponse(inputValue)} style={{ width: \"100%\", background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"8px 12px\", border: \"none\" }}>\n            Submit\n          </button>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div style={{ textAlign: \"center\", padding: \"12px\", background: \"#f1f5f9\", boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\", borderRadius: \"8px\", fontSize: \"18px\", fontWeight: \"bold\", fontFamily: \"Segoe UI, sans-serif\", width: \"fit-content\", margin: \"10px auto\", zIndex: 20, position: \"relative\" }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={addNode}>Add Node</button>\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={exportJSON}>Export JSON</button>\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={deleteNode}>Delete Node</button>\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={submitFlow}>Submit Flow</button>\n        </div>\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={undo}>Undo</button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={redo}>Redo</button>\n        </div>\n\n        {selectedNode && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f8fafc\", padding: 12, border: \"1px solid #d1d5db\", borderRadius: \"10px\", width: 300, boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Node: {selectedNode.id}</h4>\n            <label>Message:</label>\n            <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} />\n            <label>Type:</label>\n            <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}>\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n            <label>Capture Field:</label>\n            <input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} />\n            <label>Next Node ID:</label>\n            <input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        {selectedEdge && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f9fafb\", padding: 12, border: \"1px solid #ccc\", borderRadius: \"8px\", width: \"300px\", boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Edge</h4>\n            <label>Option Label:</label>\n            <input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message }, style: getNodeStyle(n.data.type) }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge({ ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label }, manualEdges);\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      <div style={{ width: \"320px\", padding: 20, borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n        <div style={{ fontWeight: \"bold\", marginBottom: 10 }}>MindPeace Chat</div>\n        <div style={{ flexGrow: 1, overflowY: \"auto\", marginBottom: 10 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{ alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\", background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\", padding: 8, borderRadius: 6, maxWidth: \"90%\" }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n        {chatbotReady && renderChatInput()}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}