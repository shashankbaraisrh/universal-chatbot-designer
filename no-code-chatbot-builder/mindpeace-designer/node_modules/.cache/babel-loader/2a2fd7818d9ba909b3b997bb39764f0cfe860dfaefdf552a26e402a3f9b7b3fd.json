{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {\n      yes: \"2\",\n      no: \"3\"\n    },\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}, {\n  id: \"2\",\n  data: {\n    message: \"What is your name?\",\n    type: \"input\",\n    capture: \"name\",\n    next: \"4\"\n  },\n  position: {\n    x: 100,\n    y: 200\n  },\n  type: \"default\"\n}, {\n  id: \"3\",\n  data: {\n    message: \"Please take care\",\n    type: \"end\"\n  },\n  position: {\n    x: 400,\n    y: 200\n  },\n  type: \"default\"\n}, {\n  id: \"4\",\n  data: {\n    message: \"Thank you! How are you feeling today?\",\n    type: \"gpt\"\n  },\n  position: {\n    x: 250,\n    y: 400\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const nodeObj = {\n        message: data.message,\n        type: data.type\n      };\n      if (data.options) nodeObj.options = data.options;\n      if (data.capture) nodeObj.capture = data.capture;\n      if (data.next) nodeObj.next = data.next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = () => {\n    var _payload$nodes$;\n    const payload = getExportJSON();\n    const firstMessage = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n    setSubmittedFlow(payload);\n    setChatbotReady(true);\n    setChatHistory([{\n      sender: \"bot\",\n      message: firstMessage\n    }]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setCurrentNodeId(\"1\");\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options;\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response.toLowerCase()]);\n    const nextNode = submittedFlow.nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const summary = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: \"Error reaching GPT.\"\n        }]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setUserInputs(newInputs);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const autoEdges = nodes.flatMap(node => {\n    const edges = [];\n    if (node.data.next) {\n      edges.push({\n        id: `edge-${node.id}-${node.data.next}`,\n        source: node.id,\n        target: node.data.next,\n        markerEnd: {\n          type: MarkerType.ArrowClosed\n        },\n        style: {\n          stroke: \"#888\",\n          strokeDasharray: \"4 2\"\n        }\n      });\n    }\n    if (node.data.options) {\n      for (const [label, target] of Object.entries(node.data.options)) {\n        edges.push({\n          id: `edge-${node.id}-${label}`,\n          source: node.id,\n          target,\n          label,\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          }\n        });\n      }\n    }\n    return edges;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 10\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitFlow,\n          style: {\n            background: \"green\",\n            color: \"white\",\n            padding: \"6px 12px\",\n            borderRadius: 4\n          },\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: autoEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(ChatbotPanel, {\n        chatbotReady: chatbotReady,\n        submittedFlow: submittedFlow,\n        currentNodeId: currentNodeId,\n        chatHistory: chatHistory,\n        handleUserResponse: handleUserResponse,\n        inputValue: inputValue,\n        setInputValue: setInputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aBifYfc1RI6ZPnxLdKFYXWgxCf8=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","MarkerType","ChatbotPanel","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","yes","no","capture","next","position","x","y","initialEdges","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","getExportJSON","output","settings","system_prompt","gpt_model","forEach","node","nodeObj","submitFlow","_payload$nodes$","payload","firstMessage","sender","handleUserResponse","response","_currentNode$options","currentNode","updatedHistory","newInputs","nextId","toLowerCase","nextNode","summary","Object","entries","map","k","v","join","res","fetch","method","headers","body","JSON","stringify","json","gptReply","reply","err","autoEdges","flatMap","edges","push","source","target","markerEnd","ArrowClosed","style","stroke","strokeDasharray","label","display","height","width","children","flex","padding","onClick","background","color","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","fitView","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: { yes: \"2\", no: \"3\" },\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  },\n  {\n    id: \"2\",\n    data: {\n      message: \"What is your name?\",\n      type: \"input\",\n      capture: \"name\",\n      next: \"4\"\n    },\n    position: { x: 100, y: 200 },\n    type: \"default\"\n  },\n  {\n    id: \"3\",\n    data: {\n      message: \"Please take care\",\n      type: \"end\"\n    },\n    position: { x: 400, y: 200 },\n    type: \"default\"\n  },\n  {\n    id: \"4\",\n    data: {\n      message: \"Thank you! How are you feeling today?\",\n      type: \"gpt\"\n    },\n    position: { x: 250, y: 400 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const nodeObj = {\n        message: data.message,\n        type: data.type\n      };\n      if (data.options) nodeObj.options = data.options;\n      if (data.capture) nodeObj.capture = data.capture;\n      if (data.next) nodeObj.next = data.next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = () => {\n    const payload = getExportJSON();\n    const firstMessage = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n    setSubmittedFlow(payload);\n    setChatbotReady(true);\n    setChatHistory([{ sender: \"bot\", message: firstMessage }]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setCurrentNodeId(\"1\");\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow || !currentNodeId) return;\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response.toLowerCase()];\n    const nextNode = submittedFlow.nodes[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const summary = Object.entries(newInputs)\n        .map(([k, v]) => `${k}: ${v}`)\n        .join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: \"Error reaching GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n      }\n    } else {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setUserInputs(newInputs);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const autoEdges = nodes.flatMap((node) => {\n    const edges = [];\n    if (node.data.next) {\n      edges.push({\n        id: `edge-${node.id}-${node.data.next}`,\n        source: node.id,\n        target: node.data.next,\n        markerEnd: { type: MarkerType.ArrowClosed },\n        style: { stroke: \"#888\", strokeDasharray: \"4 2\" }\n      });\n    }\n    if (node.data.options) {\n      for (const [label, target] of Object.entries(node.data.options)) {\n        edges.push({\n          id: `edge-${node.id}-${label}`,\n          source: node.id,\n          target,\n          label,\n          markerEnd: { type: MarkerType.ArrowClosed }\n        });\n      }\n    }\n    return edges;\n  });\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", width: \"100vw\" }}>\n      <div style={{ flex: 3 }}>\n        <div style={{ padding: 10 }}>\n          <button onClick={submitFlow} style={{ background: \"green\", color: \"white\", padding: \"6px 12px\", borderRadius: 4 }}>\n            Submit Flow\n          </button>\n        </div>\n        <ReactFlow nodes={nodes} edges={autoEdges} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange} fitView>\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n      <div style={{ flex: 1 }}>\n        <ChatbotPanel\n          chatbotReady={chatbotReady}\n          submittedFlow={submittedFlow}\n          currentNodeId={currentNodeId}\n          chatHistory={chatHistory}\n          handleUserResponse={handleUserResponse}\n          inputValue={inputValue}\n          setInputValue={setInputValue}\n        />\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}