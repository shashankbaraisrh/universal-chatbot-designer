{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, applyNodeChanges, applyEdgeChanges } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {};\nlet nodeId = 1;\nfunction App() {\n  _s();\n  var _nodes$find, _nodes$find2, _nodes$find3, _nodes$find4, _edges$find;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [manualEdges, setManualEdges] = useState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [submittedFlow, setSubmittedFlow] = useState({\n    settings: {\n      system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    },\n    nodes: [],\n    edges: []\n  });\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), []);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n  const onConnect = useCallback(params => {\n    const newEdge = {\n      ...params,\n      id: `${params.source}-${params.target}`,\n      label: \"\",\n      type: \"default\"\n    };\n    setEdges(eds => [...eds, newEdge]);\n    setManualEdges(eds => [...eds, newEdge]);\n    const sourceNode = nodes.find(n => n.id === params.source);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceNode.id) {\n        if (!node.data.options) node.data.options = {};\n        node.data.options[\"Option\"] = params.target;\n      }\n      return node;\n    });\n    setNodes(updatedNodes);\n  }, [nodes]);\n  const addNode = () => {\n    const newNode = {\n      id: `${++nodeId}`,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label: `Node ${nodeId}`,\n        message: \"\",\n        type: \"text\"\n      },\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes(nds => nds.filter(n => n.id !== selectedNodeId));\n    setEdges(eds => eds.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (id, field, value) => {\n    setNodes(nds => nds.map(n => {\n      if (n.id === id) {\n        n.data = {\n          ...n.data,\n          [field]: value\n        };\n      }\n      return n;\n    }));\n  };\n  const updateEdgeLabel = (id, value) => {\n    setEdges(eds => eds.map(e => {\n      if (e.id === id) {\n        return {\n          ...e,\n          label: value\n        };\n      }\n      return e;\n    }));\n    setManualEdges(eds => eds.map(e => {\n      if (e.id === id) {\n        return {\n          ...e,\n          label: value\n        };\n      }\n      return e;\n    }));\n  };\n  const handleExport = () => {\n    const exported = {\n      settings: submittedFlow.settings,\n      nodes: nodes.map(n => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture || \"\",\n        next: n.data.next || \"\",\n        options: n.data.options || {}\n      })),\n      edges: manualEdges.map(e => ({\n        source: e.source,\n        target: e.target,\n        label: e.label || \"\"\n      }))\n    };\n    const blob = new Blob([JSON.stringify(exported, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.download = \"conversation_data.json\";\n    link.href = url;\n    link.click();\n  };\n  const handleSubmitFlow = () => {\n    var _flow$nodes$;\n    const flow = {\n      settings: submittedFlow.settings,\n      nodes: nodes.map(n => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture || \"\",\n        next: n.data.next || \"\",\n        options: n.data.options || {}\n      })),\n      edges: manualEdges.map(e => ({\n        source: e.source,\n        target: e.target,\n        label: e.label || \"\"\n      }))\n    };\n    setSubmittedFlow(flow);\n    setChatbotReady(true);\n    setChatHistory([]);\n    setCurrentNodeId(((_flow$nodes$ = flow.nodes[0]) === null || _flow$nodes$ === void 0 ? void 0 : _flow$nodes$.id) || null);\n    setUserInputs({});\n  };\n  const updatePrompt = e => {\n    setSubmittedFlow(prev => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        system_prompt: e.target.value\n      }\n    }));\n  };\n  const updateModel = e => {\n    setSubmittedFlow(prev => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        gpt_model: e.target.value\n      }\n    }));\n  };\n  const fetchGPTResponse = async userData => {\n    const summary = Object.entries(userData).map(([key, value]) => `${key}: ${value}`).join(\", \");\n    const userMessage = `User provided the following information: ${summary}. Continue the conversation empathetically.`;\n    try {\n      const res = await fetch(\"http://localhost:5000/gpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          system_prompt: submittedFlow.settings.system_prompt,\n          gpt_model: submittedFlow.settings.gpt_model,\n          user_message: userMessage\n        })\n      });\n      const data = await res.json();\n      setChatHistory(prev => [...prev, {\n        sender: \"bot\",\n        text: data.response\n      }]);\n    } catch (err) {\n      console.error(\"GPT fetch error:\", err);\n      setChatHistory(prev => [...prev, {\n        sender: \"bot\",\n        text: \"Sorry, something went wrong.\"\n      }]);\n    }\n  };\n  const renderChatInput = () => {\n    const current = submittedFlow.nodes.find(n => n.id === currentNodeId);\n    if (!current) return null;\n    if (current.type === \"choice\") {\n      const buttons = Object.entries(current.options || {}).map(([label, target]) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setChatHistory(prev => [...prev, {\n            sender: \"user\",\n            text: label\n          }]);\n          setCurrentNodeId(target);\n        },\n        style: {\n          margin: \"4px\"\n        },\n        children: label\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: buttons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 14\n      }, this);\n    }\n    if (current.type === \"multi_choice\") {\n      const options = Object.entries(current.options || {}).map(([label, target]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: multiChoiceSelection.includes(label),\n            onChange: e => {\n              if (e.target.checked) {\n                setMultiChoiceSelection(prev => [...prev, label]);\n              } else {\n                setMultiChoiceSelection(prev => prev.filter(item => item !== label));\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [options, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setChatHistory(prev => [...prev, {\n              sender: \"user\",\n              text: multiChoiceSelection.join(\", \")\n            }]);\n            if (current.capture) {\n              setUserInputs(prev => ({\n                ...prev,\n                [current.capture]: multiChoiceSelection\n              }));\n            }\n            const firstTarget = current.options[multiChoiceSelection[0]];\n            setCurrentNodeId(firstTarget || null);\n            setMultiChoiceSelection([]);\n          },\n          style: {\n            marginTop: \"5px\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this);\n    }\n    if (current.type === \"gpt\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          placeholder: \"Type your message...\",\n          style: {\n            width: \"100%\",\n            padding: \"8px\",\n            marginBottom: \"4px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const userInput = inputValue.trim();\n            if (!userInput) return;\n            setChatHistory(prev => [...prev, {\n              sender: \"user\",\n              text: userInput\n            }]);\n            fetchGPTResponse({\n              ...userInputs,\n              [current.data.capture]: userInput\n            });\n            setInputValue(\"\");\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        placeholder: \"Enter response...\",\n        style: {\n          width: \"100%\",\n          padding: \"8px\",\n          marginBottom: \"4px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const userInput = inputValue.trim();\n          if (!userInput) return;\n          setChatHistory(prev => [...prev, {\n            sender: \"user\",\n            text: userInput\n          }]);\n          if (current.capture) {\n            setUserInputs(prev => ({\n              ...prev,\n              [current.capture]: userInput\n            }));\n          }\n          setCurrentNodeId(current.next || null);\n          setInputValue(\"\");\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"75%\",\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"10px\",\n          borderBottom: \"1px solid #ccc\",\n          background: \"#f9f9f9\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: \"0\",\n            fontSize: \"18px\"\n          },\n          children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addNode,\n            style: {\n              background: \"#007bff\",\n              color: \"#fff\",\n              marginRight: \"5px\"\n            },\n            children: \"Add Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleExport,\n            style: {\n              background: \"#28a745\",\n              color: \"#fff\",\n              marginRight: \"5px\"\n            },\n            children: \"Export JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteNode,\n            style: {\n              background: \"#dc3545\",\n              color: \"#fff\"\n            },\n            children: \"Delete Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSubmitFlow,\n            style: {\n              background: \"#6f42c1\",\n              color: \"#fff\",\n              marginLeft: \"10px\"\n            },\n            children: \"Submit Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: (_, node) => setSelectedNodeId(node.id),\n        onEdgeClick: (_, edge) => setSelectedEdgeId(edge.id),\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"25%\",\n        padding: \"10px\",\n        background: \"#f1f1f1\",\n        overflowY: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Prompt Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"System Prompt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: submittedFlow.settings.system_prompt,\n          onChange: updatePrompt,\n          style: {\n            width: \"100%\",\n            height: \"100px\",\n            marginBottom: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"GPT Model:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: submittedFlow.settings.gpt_model,\n          onChange: updateModel,\n          style: {\n            width: \"100%\",\n            marginBottom: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), selectedNodeId && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Node Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: ((_nodes$find = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.message) || \"\",\n          onChange: e => updateNodeField(selectedNodeId, \"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: \"60px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: ((_nodes$find2 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find2 === void 0 ? void 0 : _nodes$find2.data.type) || \"\",\n          onChange: e => updateNodeField(selectedNodeId, \"type\", e.target.value),\n          style: {\n            width: \"100%\",\n            marginBottom: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"text\",\n            children: \"Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"Choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"Multi Choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"GPT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ((_nodes$find3 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find3 === void 0 ? void 0 : _nodes$find3.data.capture) || \"\",\n          onChange: e => updateNodeField(selectedNodeId, \"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ((_nodes$find4 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find4 === void 0 ? void 0 : _nodes$find4.data.next) || \"\",\n          onChange: e => updateNodeField(selectedNodeId, \"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, this), selectedEdgeId && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edge Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ((_edges$find = edges.find(e => e.id === selectedEdgeId)) === null || _edges$find === void 0 ? void 0 : _edges$find.label) || \"\",\n          onChange: e => updateEdgeLabel(selectedEdgeId, e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        right: 0,\n        top: 0,\n        width: \"25%\",\n        height: \"100%\",\n        background: \"#ffffff\",\n        borderLeft: \"1px solid #ccc\",\n        padding: \"10px\",\n        overflowY: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"80%\",\n          overflowY: \"scroll\",\n          marginBottom: \"10px\"\n        },\n        children: chatHistory.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: msg.sender === \"user\" ? \"#daf1ff\" : \"#e6e6e6\",\n            padding: \"8px\",\n            borderRadius: \"8px\",\n            marginBottom: \"5px\",\n            alignSelf: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\"\n          },\n          children: msg.text\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 11\n      }, this), renderChatInput()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lrWNESreGmtosMMNd+wRj6Bxj4A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","ReactFlow","addEdge","Background","Controls","MiniMap","applyNodeChanges","applyEdgeChanges","jsxDEV","_jsxDEV","nodeTypes","nodeId","App","_s","_nodes$find","_nodes$find2","_nodes$find3","_nodes$find4","_edges$find","nodes","setNodes","edges","setEdges","manualEdges","setManualEdges","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","chatHistory","setChatHistory","currentNodeId","setCurrentNodeId","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","submittedFlow","setSubmittedFlow","settings","system_prompt","gpt_model","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","newEdge","id","source","target","label","type","sourceNode","find","n","updatedNodes","map","node","data","options","addNode","newNode","position","x","Math","random","y","message","deleteNode","filter","e","updateNodeField","field","value","updateEdgeLabel","handleExport","exported","capture","next","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","download","href","click","handleSubmitFlow","_flow$nodes$","flow","updatePrompt","prev","updateModel","fetchGPTResponse","userData","summary","Object","entries","key","join","userMessage","res","fetch","method","headers","body","user_message","json","sender","text","response","err","console","error","renderChatInput","current","buttons","onClick","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","checked","includes","onChange","item","firstTarget","marginTop","placeholder","width","padding","marginBottom","userInput","trim","display","height","borderBottom","background","fontSize","color","marginRight","marginLeft","onNodeClick","_","onEdgeClick","edge","fitView","overflowY","right","top","borderLeft","msg","idx","borderRadius","alignSelf","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport ReactFlow, {\n  addEdge,\n  Background,\n  Controls,\n  MiniMap,\n  applyNodeChanges,\n  applyEdgeChanges\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst nodeTypes = {};\nlet nodeId = 1;\n\nfunction App() {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [manualEdges, setManualEdges] = useState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const [submittedFlow, setSubmittedFlow] = useState({\n    settings: {\n      system_prompt:\n        \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n      gpt_model: \"gpt-3.5-turbo\"\n    },\n    nodes: [],\n    edges: []\n  });\n\n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    []\n  );\n\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  const onConnect = useCallback(\n    (params) => {\n      const newEdge = {\n        ...params,\n        id: `${params.source}-${params.target}`,\n        label: \"\",\n        type: \"default\"\n      };\n      setEdges((eds) => [...eds, newEdge]);\n      setManualEdges((eds) => [...eds, newEdge]);\n\n      const sourceNode = nodes.find((n) => n.id === params.source);\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === sourceNode.id) {\n          if (!node.data.options) node.data.options = {};\n          node.data.options[\"Option\"] = params.target;\n        }\n        return node;\n      });\n      setNodes(updatedNodes);\n    },\n    [nodes]\n  );\n\n  const addNode = () => {\n    const newNode = {\n      id: `${++nodeId}`,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label: `Node ${nodeId}`,\n        message: \"\",\n        type: \"text\"\n      },\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes((nds) => nds.filter((n) => n.id !== selectedNodeId));\n    setEdges((eds) => eds.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (id, field, value) => {\n    setNodes((nds) =>\n      nds.map((n) => {\n        if (n.id === id) {\n          n.data = {\n            ...n.data,\n            [field]: value\n          };\n        }\n        return n;\n      })\n    );\n  };\n\n  const updateEdgeLabel = (id, value) => {\n    setEdges((eds) =>\n      eds.map((e) => {\n        if (e.id === id) {\n          return {\n            ...e,\n            label: value\n          };\n        }\n        return e;\n      })\n    );\n    setManualEdges((eds) =>\n      eds.map((e) => {\n        if (e.id === id) {\n          return {\n            ...e,\n            label: value\n          };\n        }\n        return e;\n      })\n    );\n  };\n  const handleExport = () => {\n    const exported = {\n      settings: submittedFlow.settings,\n      nodes: nodes.map((n) => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture || \"\",\n        next: n.data.next || \"\",\n        options: n.data.options || {},\n      })),\n      edges: manualEdges.map((e) => ({\n        source: e.source,\n        target: e.target,\n        label: e.label || \"\",\n      }))\n    };\n    const blob = new Blob([JSON.stringify(exported, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.download = \"conversation_data.json\";\n    link.href = url;\n    link.click();\n  };\n\n  const handleSubmitFlow = () => {\n    const flow = {\n      settings: submittedFlow.settings,\n      nodes: nodes.map((n) => ({\n        id: n.id,\n        message: n.data.message,\n        type: n.data.type,\n        capture: n.data.capture || \"\",\n        next: n.data.next || \"\",\n        options: n.data.options || {},\n      })),\n      edges: manualEdges.map((e) => ({\n        source: e.source,\n        target: e.target,\n        label: e.label || \"\",\n      }))\n    };\n    setSubmittedFlow(flow);\n    setChatbotReady(true);\n    setChatHistory([]);\n    setCurrentNodeId(flow.nodes[0]?.id || null);\n    setUserInputs({});\n  };\n\n  const updatePrompt = (e) => {\n    setSubmittedFlow((prev) => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        system_prompt: e.target.value\n      }\n    }));\n  };\n\n  const updateModel = (e) => {\n    setSubmittedFlow((prev) => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        gpt_model: e.target.value\n      }\n    }));\n  };\n\n  const fetchGPTResponse = async (userData) => {\n    const summary = Object.entries(userData)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(\", \");\n\n    const userMessage = `User provided the following information: ${summary}. Continue the conversation empathetically.`;\n\n    try {\n      const res = await fetch(\"http://localhost:5000/gpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          system_prompt: submittedFlow.settings.system_prompt,\n          gpt_model: submittedFlow.settings.gpt_model,\n          user_message: userMessage\n        })\n      });\n      const data = await res.json();\n      setChatHistory((prev) => [...prev, { sender: \"bot\", text: data.response }]);\n    } catch (err) {\n      console.error(\"GPT fetch error:\", err);\n      setChatHistory((prev) => [...prev, { sender: \"bot\", text: \"Sorry, something went wrong.\" }]);\n    }\n  };\n\n  const renderChatInput = () => {\n    const current = submittedFlow.nodes.find((n) => n.id === currentNodeId);\n    if (!current) return null;\n\n    if (current.type === \"choice\") {\n      const buttons = Object.entries(current.options || {}).map(([label, target]) => (\n        <button\n          key={label}\n          onClick={() => {\n            setChatHistory((prev) => [...prev, { sender: \"user\", text: label }]);\n            setCurrentNodeId(target);\n          }}\n          style={{ margin: \"4px\" }}\n        >\n          {label}\n        </button>\n      ));\n      return <div>{buttons}</div>;\n    }\n\n    if (current.type === \"multi_choice\") {\n      const options = Object.entries(current.options || {}).map(([label, target]) => (\n        <div key={label}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={multiChoiceSelection.includes(label)}\n              onChange={(e) => {\n                if (e.target.checked) {\n                  setMultiChoiceSelection((prev) => [...prev, label]);\n                } else {\n                  setMultiChoiceSelection((prev) =>\n                    prev.filter((item) => item !== label)\n                  );\n                }\n              }}\n            />\n            {label}\n          </label>\n        </div>\n      ));\n      return (\n        <div>\n          {options}\n          <button\n            onClick={() => {\n              setChatHistory((prev) => [...prev, { sender: \"user\", text: multiChoiceSelection.join(\", \") }]);\n              if (current.capture) {\n                setUserInputs((prev) => ({\n                  ...prev,\n                  [current.capture]: multiChoiceSelection\n                }));\n              }\n              const firstTarget = current.options[multiChoiceSelection[0]];\n              setCurrentNodeId(firstTarget || null);\n              setMultiChoiceSelection([]);\n            }}\n            style={{ marginTop: \"5px\" }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (current.type === \"gpt\") {\n      return (\n        <div>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Type your message...\"\n            style={{ width: \"100%\", padding: \"8px\", marginBottom: \"4px\" }}\n          />\n          <button\n            onClick={() => {\n              const userInput = inputValue.trim();\n              if (!userInput) return;\n              setChatHistory((prev) => [...prev, { sender: \"user\", text: userInput }]);\n              fetchGPTResponse({ ...userInputs, [current.data.capture]: userInput });\n              setInputValue(\"\");\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder=\"Enter response...\"\n          style={{ width: \"100%\", padding: \"8px\", marginBottom: \"4px\" }}\n        />\n        <button\n          onClick={() => {\n            const userInput = inputValue.trim();\n            if (!userInput) return;\n            setChatHistory((prev) => [...prev, { sender: \"user\", text: userInput }]);\n            if (current.capture) {\n              setUserInputs((prev) => ({\n                ...prev,\n                [current.capture]: userInput\n              }));\n            }\n            setCurrentNodeId(current.next || null);\n            setInputValue(\"\");\n          }}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  };\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\" }}>\n      <div style={{ width: \"75%\", position: \"relative\" }}>\n        <div style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\", background: \"#f9f9f9\" }}>\n          <h2 style={{ margin: \"0\", fontSize: \"18px\" }}>Your AI Chatbot Designer — Fast. Visual. Code-Free</h2>\n          <div style={{ marginTop: \"10px\" }}>\n            <button onClick={addNode} style={{ background: \"#007bff\", color: \"#fff\", marginRight: \"5px\" }}>Add Node</button>\n            <button onClick={handleExport} style={{ background: \"#28a745\", color: \"#fff\", marginRight: \"5px\" }}>Export JSON</button>\n            <button onClick={deleteNode} style={{ background: \"#dc3545\", color: \"#fff\" }}>Delete Node</button>\n            <button onClick={handleSubmitFlow} style={{ background: \"#6f42c1\", color: \"#fff\", marginLeft: \"10px\" }}>Submit Flow</button>\n          </div>\n        </div>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={(_, node) => setSelectedNodeId(node.id)}\n          onEdgeClick={(_, edge) => setSelectedEdgeId(edge.id)}\n          fitView\n        >\n          <Background />\n          <Controls />\n          <MiniMap />\n        </ReactFlow>\n      </div>\n\n      <div style={{ width: \"25%\", padding: \"10px\", background: \"#f1f1f1\", overflowY: \"auto\" }}>\n        <div style={{ marginBottom: \"20px\" }}>\n          <h3>Prompt Settings</h3>\n          <label>System Prompt:</label>\n          <textarea\n            value={submittedFlow.settings.system_prompt}\n            onChange={updatePrompt}\n            style={{ width: \"100%\", height: \"100px\", marginBottom: \"10px\" }}\n          />\n          <label>GPT Model:</label>\n          <input\n            value={submittedFlow.settings.gpt_model}\n            onChange={updateModel}\n            style={{ width: \"100%\", marginBottom: \"20px\" }}\n          />\n        </div>\n\n        {selectedNodeId && (\n          <div style={{ marginBottom: \"20px\" }}>\n            <h3>Node Editor</h3>\n            <label>Message:</label>\n            <textarea\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.message || \"\"}\n              onChange={(e) =>\n                updateNodeField(selectedNodeId, \"message\", e.target.value)\n              }\n              style={{ width: \"100%\", height: \"60px\" }}\n            />\n            <label>Type:</label>\n            <select\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.type || \"\"}\n              onChange={(e) =>\n                updateNodeField(selectedNodeId, \"type\", e.target.value)\n              }\n              style={{ width: \"100%\", marginBottom: \"10px\" }}\n            >\n              <option value=\"text\">Text</option>\n              <option value=\"choice\">Choice</option>\n              <option value=\"multi_choice\">Multi Choice</option>\n              <option value=\"gpt\">GPT</option>\n            </select>\n            <label>Capture Field:</label>\n            <input\n              type=\"text\"\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.capture || \"\"}\n              onChange={(e) =>\n                updateNodeField(selectedNodeId, \"capture\", e.target.value)\n              }\n              style={{ width: \"100%\" }}\n            />\n            <label>Next Node ID:</label>\n            <input\n              type=\"text\"\n              value={nodes.find((n) => n.id === selectedNodeId)?.data.next || \"\"}\n              onChange={(e) =>\n                updateNodeField(selectedNodeId, \"next\", e.target.value)\n              }\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        )}\n\n        {selectedEdgeId && (\n          <div>\n            <h3>Edge Editor</h3>\n            <label>Label:</label>\n            <input\n              type=\"text\"\n              value={edges.find((e) => e.id === selectedEdgeId)?.label || \"\"}\n              onChange={(e) =>\n                updateEdgeLabel(selectedEdgeId, e.target.value)\n              }\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        )}\n      </div>\n\n      {chatbotReady && (\n        <div\n          style={{\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n            width: \"25%\",\n            height: \"100%\",\n            background: \"#ffffff\",\n            borderLeft: \"1px solid #ccc\",\n            padding: \"10px\",\n            overflowY: \"auto\"\n          }}\n        >\n          <h3>MindPeace Chat</h3>\n          <div style={{ height: \"80%\", overflowY: \"scroll\", marginBottom: \"10px\" }}>\n            {chatHistory.map((msg, idx) => (\n              <div\n                key={idx}\n                style={{\n                  background: msg.sender === \"user\" ? \"#daf1ff\" : \"#e6e6e6\",\n                  padding: \"8px\",\n                  borderRadius: \"8px\",\n                  marginBottom: \"5px\",\n                  alignSelf: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\"\n                }}\n              >\n                {msg.text}\n              </div>\n            ))}\n          </div>\n          {renderChatInput()}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}