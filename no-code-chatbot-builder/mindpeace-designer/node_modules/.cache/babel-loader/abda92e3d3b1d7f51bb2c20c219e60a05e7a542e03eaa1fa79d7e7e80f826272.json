{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n// Height of the new top header bar\nconst HEADER_H = 64;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt settings (editable via Prompt Editor)\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n\n  // one shared style for ALL cards (Node, Prompt, Edge)\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    // visible gap from the scrollbar\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\"\n  };\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8\n        },\n        children: opts.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            padding: \"8px\",\n            width: \"100%\",\n            borderRadius: 6,\n            border: \"1px solid #0369a1\",\n            background: \"#0284c7\",\n            color: \"white\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            marginTop: 10,\n            background: \"#22c55e\",\n            color: \"white\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"none\",\n            width: \"100%\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            height: \"40px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"0 16px\",\n            border: \"none\",\n            height: \"40px\",\n            whiteSpace: \"nowrap\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Clean up node/edge mappings when edges are removed\n  const handleEdgesChange = changes => {\n    const removedIds = new Set(changes.filter(c => c.type === \"remove\" && c.id).map(c => c.id));\n    const removedEdges = manualEdges.filter(e => removedIds.has(e.id));\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n    const updatedNodes = nodes.map(n => {\n      let data = {\n        ...n.data\n      };\n      let mutated = false;\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = {\n              ...data.options\n            };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = {\n              ...data.options\n            };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n      return mutated ? {\n        ...n,\n        data\n      } : n;\n    });\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter(e => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        right: 0,\n        height: HEADER_H,\n        background: \"linear-gradient(90deg, #0ea5e9, #22d3ee)\",\n        color: \"white\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: 12,\n        boxShadow: \"0 2px 6px rgba(0,0,0,0.15)\",\n        zIndex: 100\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 800,\n          fontSize: 18\n        },\n        children: \"Your AI Chatbot Designer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          opacity: 0.95,\n          fontSize: 14\n        },\n        children: \"\\u2014 Fast \\u2022 Visual \\u2022 Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100vw\",\n        height: `calc(100vh - ${HEADER_H}px)`,\n        display: \"flex\",\n        marginTop: HEADER_H\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"absolute\",\n            top: 60,\n            left: 10,\n            zIndex: 10,\n            display: \"flex\",\n            gap: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            },\n            onClick: () => {\n              const newId = nodeCounter.toString();\n              nodeCounter++;\n              const position = selectedNodeId ? {\n                x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n                y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n              } : {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              };\n              const newNode = {\n                id: newId,\n                data: {\n                  message: `This is node ${newId}`,\n                  type: \"choice\",\n                  options: {},\n                  capture: \"\",\n                  next: \"\"\n                },\n                position,\n                type: \"default\"\n              };\n              const updatedNodes = [...nodes, newNode];\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            children: \"Add Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              background: \"#22c55e\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            },\n            onClick: () => {\n              const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n                type: \"application/json\"\n              });\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"conversation_data.json\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            },\n            children: \"Export JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              background: \"#ef4444\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            },\n            onClick: () => {\n              if (!selectedNodeId) return;\n              const deletedId = selectedNodeId;\n\n              // Remove the node and its edges\n              const updatedNodesBase = nodes.filter(n => n.id !== deletedId);\n              const updatedEdges = manualEdges.filter(e => e.source !== deletedId && e.target !== deletedId);\n\n              // Scrub references to the deleted node from remaining nodes\n              const updatedNodes = updatedNodesBase.map(n => {\n                const data = {\n                  ...n.data\n                };\n                let mutated = false;\n                if (data.next === deletedId) {\n                  data.next = \"\";\n                  mutated = true;\n                }\n                if (data.options && Object.keys(data.options).length) {\n                  const opts = {\n                    ...data.options\n                  };\n                  for (const [k, v] of Object.entries(opts)) {\n                    if (v === deletedId) delete opts[k];\n                  }\n                  if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                    data.options = opts;\n                    mutated = true;\n                  }\n                }\n                return mutated ? {\n                  ...n,\n                  data\n                } : n;\n              });\n              setNodes(updatedNodes);\n              setEdges(updatedEdges);\n              setSelectedNodeId(null);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            children: \"Delete Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              background: \"#10b981\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            },\n            onClick: submitFlow,\n            children: \"Submit Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"absolute\",\n            top: 60,\n            right: 10,\n            zIndex: 10,\n            display: \"flex\",\n            gap: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              background: \"#a855f7\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            },\n            onClick: undo,\n            children: \"Undo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              background: \"#f59e0b\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"6px 12px\",\n              border: \"none\"\n            },\n            onClick: redo,\n            children: \"Redo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"absolute\",\n            top: 110,\n            left: 10,\n            bottom: 10,\n            width: 350,\n            // wider column\n            boxSizing: \"border-box\",\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 28,\n            // space for scrollbar lane\n            paddingLeft: 4,\n            scrollbarGutter: \"stable both-edges\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 12,\n            zIndex: 11\n          },\n          children: [selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: cardStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginTop: 0\n              },\n              children: [\"Editing Node: \", selectedNode.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Message:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: selectedNode.data.message,\n              onChange: e => {\n                const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    message: e.target.value\n                  }\n                } : node);\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              },\n              style: {\n                width: \"100%\",\n                boxSizing: \"border-box\",\n                height: 60\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedNode.data.type,\n              onChange: e => {\n                const newType = e.target.value;\n                const updatedNodes = nodes.map(node => {\n                  if (node.id !== selectedNodeId) return node;\n                  const nd = {\n                    ...node,\n                    data: {\n                      ...node.data,\n                      type: newType\n                    }\n                  };\n                  if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                    nd.data.options = {};\n                  }\n                  return nd;\n                });\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              },\n              style: {\n                width: \"100%\",\n                boxSizing: \"border-box\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"choice\",\n                children: \"choice\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"input\",\n                children: \"input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"multi_choice\",\n                children: \"multi_choice\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 776,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"gpt\",\n                children: \"gpt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 777,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"end\",\n                children: \"end\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 778,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 757,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Capture Field:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: selectedNode.data.capture,\n              onChange: e => {\n                const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    capture: e.target.value\n                  }\n                } : node);\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              },\n              style: {\n                width: \"100%\",\n                boxSizing: \"border-box\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 781,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Next Node ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 795,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: selectedNode.data.next,\n              onChange: e => {\n                const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    next: e.target.value\n                  }\n                } : node);\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              },\n              style: {\n                width: \"100%\",\n                boxSizing: \"border-box\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 796,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(PromptEditor, {\n            promptSettings: promptSettings,\n            setPromptSettings: setPromptSettings,\n            containerStyle: cardStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 13\n          }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: cardStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginTop: 0\n              },\n              children: \"Editing Edge\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Option Label:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 822,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: selectedEdge.label,\n              onChange: e => {\n                const newLabel = e.target.value;\n                const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n                  ...edge,\n                  label: newLabel\n                } : edge);\n                const sourceId = selectedEdge.source;\n                const targetId = selectedEdge.target;\n                const updatedNodes = nodes.map(node => {\n                  if (node.id === sourceId) {\n                    const updated = {\n                      ...node\n                    };\n                    if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                      const newOptions = {\n                        ...updated.data.options\n                      };\n                      delete newOptions[selectedEdge.label];\n                      newOptions[newLabel] = targetId;\n                      updated.data.options = newOptions;\n                    } else {\n                      updated.data.next = targetId;\n                    }\n                    return updated;\n                  }\n                  return node;\n                });\n                setEdges(updatedEdges);\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, updatedEdges);\n              },\n              style: {\n                width: \"100%\",\n                boxSizing: \"border-box\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes.map(n => ({\n            ...n,\n            data: {\n              ...n.data,\n              label: n.data.message\n            },\n            style: getNodeStyle(n.data.type)\n          })),\n          edges: allEdges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: handleEdgesChange,\n          onConnect: params => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge({\n              ...params,\n              id: edgeId,\n              markerEnd: {\n                type: MarkerType.ArrowClosed\n              },\n              label\n            }, manualEdges);\n            const updatedNodes = nodes.map(node => {\n              if (node.id === params.source) {\n                const updated = {\n                  ...node\n                };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = {\n                    ...updated.data.options,\n                    [label]: params.target\n                  };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          },\n          onNodeClick: (_, node) => {\n            setSelectedNodeId(node.id);\n            setSelectedEdgeId(null);\n          },\n          onEdgeClick: (_, edge) => {\n            setSelectedEdgeId(edge.id);\n            setSelectedNodeId(null);\n          },\n          fitView: true,\n          edgeLabelMode: \"always\",\n          children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 914,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"320px\",\n          padding: 20,\n          borderLeft: \"1px solid #ddd\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"relative\",\n          height: \"100%\",\n          boxSizing: \"border-box\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontWeight: \"bold\",\n            marginBottom: 10,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            flexShrink: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"MindPeace Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 941,\n            columnNumber: 13\n          }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n              const blob = new Blob([textContent], {\n                type: \"text/plain\"\n              });\n              const url = URL.createObjectURL(blob);\n              const link = document.createElement(\"a\");\n              link.href = url;\n              link.download = \"chat_history.txt\";\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            },\n            style: {\n              background: \"#6366f1\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"6px\",\n              padding: \"4px 8px\",\n              fontSize: \"12px\",\n              cursor: \"pointer\"\n            },\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 943,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 931,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            overflowY: \"auto\",\n            marginBottom: 10,\n            paddingRight: 4\n          },\n          children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: 10\n            },\n            children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n                padding: 8,\n                borderRadius: 6,\n                maxWidth: \"90%\"\n              },\n              children: entry.message\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 981,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 979,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Please submit your flow to activate the chatbot.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 996,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flexShrink: 0,\n            maxHeight: 220,\n            overflowY: \"auto\"\n          },\n          children: renderChatInput()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1001,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"Iq2kiMQrQZLuaVlfK5NoQFrqq4w=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","PromptEditor","jsxDEV","_jsxDEV","Fragment","_Fragment","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","HEADER_H","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","promptSettings","setPromptSettings","system_prompt","gpt_model","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","cardStyle","background","padding","border","borderRadius","width","boxSizing","marginRight","boxShadow","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","color","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","user_inputs","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","opts","flexDirection","opt","margin","checked","includes","filter","o","join","marginTop","handleEdgesChange","changes","removedIds","c","removedEdges","updatedNodes","mutated","k","v","entries","remainingEdges","top","left","right","alignItems","justifyContent","zIndex","fontWeight","fontSize","opacity","newId","toString","Math","random","newNode","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","deletedId","updatedNodesBase","updatedEdges","bottom","overflowY","overflowX","paddingRight","paddingLeft","scrollbarGutter","newType","nd","containerStyle","newLabel","edge","sourceId","targetId","updated","newOptions","onConnect","params","prompt","edgeId","onNodeClick","_","onEdgeClick","fitView","edgeLabelMode","borderLeft","marginBottom","flexShrink","textContent","cursor","index","alignSelf","maxHeight","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\",\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\",\n  },\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n// Height of the new top header bar\nconst HEADER_H = 64;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt settings (editable via Prompt Editor)\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\",\n  });\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  // one shared style for ALL cards (Node, Prompt, Edge)\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10, // visible gap from the scrollbar\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n  };\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300,\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\",\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\",\n        };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(\n      manualEdges.map((e) => `${e.source}->${e.target}`)\n    );\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\",\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model,\n      },\n      nodes: {},\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message,\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\",\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n            }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n          {opts.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => handleUserResponse(opt)}\n              style={{\n                padding: \"8px\",\n                width: \"100%\",\n                borderRadius: 6,\n                border: \"1px solid #0369a1\",\n                background: \"#0284c7\",\n                color: \"white\",\n              }}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div\n              key={opt}\n              style={{\n                background: \"#facc15\",\n                padding: \"4px 8px\",\n                borderRadius: \"4px\",\n                margin: \"4px 0\",\n              }}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt)\n                        ? prev.filter((o) => o !== opt)\n                        : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              marginTop: 10,\n              background: \"#22c55e\",\n              color: \"white\",\n              padding: 8,\n              borderRadius: 6,\n              border: \"none\",\n              width: \"100%\",\n            }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (node.type === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserResponse(inputValue);\n                setInputValue(\"\");\n              }\n            }}\n            style={{\n              flex: 1,\n              padding: \"8px\",\n              borderRadius: 6,\n              border: \"1px solid #ccc\",\n              height: \"40px\",\n            }}\n          />\n          <button\n            onClick={() => {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }}\n            style={{\n              background: \"#38bdf8\",\n              color: \"white\",\n              borderRadius: 6,\n              padding: \"0 16px\",\n              border: \"none\",\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // Clean up node/edge mappings when edges are removed\n  const handleEdgesChange = (changes) => {\n    const removedIds = new Set(\n      changes.filter((c) => c.type === \"remove\" && c.id).map((c) => c.id)\n    );\n    const removedEdges = manualEdges.filter((e) => removedIds.has(e.id));\n\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n\n    const updatedNodes = nodes.map((n) => {\n      let data = { ...n.data };\n      let mutated = false;\n\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = { ...data.options };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = { ...data.options };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n\n      return mutated ? { ...n, data } : n;\n    });\n\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter((e) => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n\n  return (\n    <>\n      {/* Fixed, full-width gradient header */}\n      <div\n        style={{\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          right: 0,\n          height: HEADER_H,\n          background: \"linear-gradient(90deg, #0ea5e9, #22d3ee)\",\n          color: \"white\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          gap: 12,\n          boxShadow: \"0 2px 6px rgba(0,0,0,0.15)\",\n          zIndex: 100,\n        }}\n      >\n        <div style={{ fontWeight: 800, fontSize: 18 }}>\n          Your AI Chatbot Designer\n        </div>\n        <div style={{ opacity: 0.95, fontSize: 14 }}>— Fast • Visual • Code-Free</div>\n      </div>\n\n      {/* Main app content lives BELOW the header */}\n      <div\n        style={{\n          width: \"100vw\",\n          height: `calc(100vh - ${HEADER_H}px)`,\n          display: \"flex\",\n          marginTop: HEADER_H,\n        }}\n      >\n        {/* Left Panel */}\n        <div style={{ flex: 1, position: \"relative\" }}>\n          {/* Top Left Buttons */}\n          <div\n            style={{\n              position: \"absolute\",\n              top: 60,\n              left: 10,\n              zIndex: 10,\n              display: \"flex\",\n              gap: \"10px\",\n            }}\n          >\n            <button\n              style={{\n                background: \"#38bdf8\",\n                color: \"white\",\n                borderRadius: 6,\n                padding: \"6px 12px\",\n                border: \"none\",\n              }}\n              onClick={() => {\n                const newId = nodeCounter.toString();\n                nodeCounter++;\n                const position = selectedNodeId\n                  ? {\n                      x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                      y: nodes.find((n) => n.id === selectedNodeId).position.y + 50,\n                    }\n                  : { x: Math.random() * 400, y: Math.random() * 400 };\n                const newNode = {\n                  id: newId,\n                  data: {\n                    message: `This is node ${newId}`,\n                    type: \"choice\",\n                    options: {},\n                    capture: \"\",\n                    next: \"\",\n                  },\n                  position,\n                  type: \"default\",\n                };\n                const updatedNodes = [...nodes, newNode];\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              }}\n            >\n              Add Node\n            </button>\n\n            <button\n              style={{\n                background: \"#22c55e\",\n                color: \"white\",\n                borderRadius: 6,\n                padding: \"6px 12px\",\n                border: \"none\",\n              }}\n              onClick={() => {\n                const blob = new Blob(\n                  [JSON.stringify(getExportJSON(), null, 2)],\n                  { type: \"application/json\" }\n                );\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"conversation_data.json\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n            >\n              Export JSON\n            </button>\n\n            <button\n              style={{\n                background: \"#ef4444\",\n                color: \"white\",\n                borderRadius: 6,\n                padding: \"6px 12px\",\n                border: \"none\",\n              }}\n              onClick={() => {\n                if (!selectedNodeId) return;\n\n                const deletedId = selectedNodeId;\n\n                // Remove the node and its edges\n                const updatedNodesBase = nodes.filter((n) => n.id !== deletedId);\n                const updatedEdges = manualEdges.filter(\n                  (e) => e.source !== deletedId && e.target !== deletedId\n                );\n\n                // Scrub references to the deleted node from remaining nodes\n                const updatedNodes = updatedNodesBase.map((n) => {\n                  const data = { ...n.data };\n                  let mutated = false;\n\n                  if (data.next === deletedId) {\n                    data.next = \"\";\n                    mutated = true;\n                  }\n\n                  if (data.options && Object.keys(data.options).length) {\n                    const opts = { ...data.options };\n                    for (const [k, v] of Object.entries(opts)) {\n                      if (v === deletedId) delete opts[k];\n                    }\n                    if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                      data.options = opts;\n                      mutated = true;\n                    }\n                  }\n\n                  return mutated ? { ...n, data } : n;\n                });\n\n                setNodes(updatedNodes);\n                setEdges(updatedEdges);\n                setSelectedNodeId(null);\n                pushToHistory(updatedNodes, updatedEdges);\n              }}\n            >\n              Delete Node\n            </button>\n\n            <button\n              style={{\n                background: \"#10b981\",\n                color: \"white\",\n                borderRadius: 6,\n                padding: \"6px 12px\",\n                border: \"none\",\n              }}\n              onClick={submitFlow}\n            >\n              Submit Flow\n            </button>\n          </div>\n\n          {/* Top Right Buttons */}\n          <div\n            style={{\n              position: \"absolute\",\n              top: 60,\n              right: 10,\n              zIndex: 10,\n              display: \"flex\",\n              gap: \"10px\",\n            }}\n          >\n            <button\n              style={{\n                background: \"#a855f7\",\n                color: \"white\",\n                borderRadius: 6,\n                padding: \"6px 12px\",\n                border: \"none\",\n              }}\n              onClick={undo}\n            >\n              Undo\n            </button>\n            <button\n              style={{\n                background: \"#f59e0b\",\n                color: \"white\",\n                borderRadius: 6,\n                padding: \"6px 12px\",\n                border: \"none\",\n              }}\n              onClick={redo}\n            >\n              Redo\n            </button>\n          </div>\n\n          {/* INSPECTOR COLUMN (Node, Prompt, Edge) */}\n          <div\n            style={{\n              position: \"absolute\",\n              top: 110,\n              left: 10,\n              bottom: 10,\n              width: 350, // wider column\n              boxSizing: \"border-box\",\n              overflowY: \"auto\",\n              overflowX: \"hidden\",\n              paddingRight: 28, // space for scrollbar lane\n              paddingLeft: 4,\n              scrollbarGutter: \"stable both-edges\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: 12,\n              zIndex: 11,\n            }}\n          >\n            {selectedNode && (\n              <div style={cardStyle}>\n                <h4 style={{ marginTop: 0 }}>Editing Node: {selectedNode.id}</h4>\n                <label>Message:</label>\n                <textarea\n                  value={selectedNode.data.message}\n                  onChange={(e) => {\n                    const updatedNodes = nodes.map((node) =>\n                      node.id === selectedNodeId\n                        ? { ...node, data: { ...node.data, message: e.target.value } }\n                        : node\n                    );\n                    setNodes(updatedNodes);\n                    pushToHistory(updatedNodes, manualEdges);\n                  }}\n                  style={{ width: \"100%\", boxSizing: \"border-box\", height: 60 }}\n                />\n                <label>Type:</label>\n                <select\n                  value={selectedNode.data.type}\n                  onChange={(e) => {\n                    const newType = e.target.value;\n                    const updatedNodes = nodes.map((node) => {\n                      if (node.id !== selectedNodeId) return node;\n                      const nd = { ...node, data: { ...node.data, type: newType } };\n                      if (newType !== \"choice\" && newType !== \"multi_choice\") {\n                        nd.data.options = {};\n                      }\n                      return nd;\n                    });\n                    setNodes(updatedNodes);\n                    pushToHistory(updatedNodes, manualEdges);\n                  }}\n                  style={{ width: \"100%\", boxSizing: \"border-box\" }}\n                >\n                  <option value=\"choice\">choice</option>\n                  <option value=\"input\">input</option>\n                  <option value=\"multi_choice\">multi_choice</option>\n                  <option value=\"gpt\">gpt</option>\n                  <option value=\"end\">end</option>\n                </select>\n                <label>Capture Field:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.capture}\n                  onChange={(e) => {\n                    const updatedNodes = nodes.map((node) =>\n                      node.id === selectedNodeId\n                        ? { ...node, data: { ...node.data, capture: e.target.value } }\n                        : node\n                    );\n                    setNodes(updatedNodes);\n                    pushToHistory(updatedNodes, manualEdges);\n                  }}\n                  style={{ width: \"100%\", boxSizing: \"border-box\" }}\n                />\n                <label>Next Node ID:</label>\n                <input\n                  type=\"text\"\n                  value={selectedNode.data.next}\n                  onChange={(e) => {\n                    const updatedNodes = nodes.map((node) =>\n                      node.id === selectedNodeId\n                        ? { ...node, data: { ...node.data, next: e.target.value } }\n                        : node\n                    );\n                    setNodes(updatedNodes);\n                    pushToHistory(updatedNodes, manualEdges);\n                  }}\n                  style={{ width: \"100%\", boxSizing: \"border-box\" }}\n                />\n              </div>\n            )}\n\n            <PromptEditor\n              promptSettings={promptSettings}\n              setPromptSettings={setPromptSettings}\n              containerStyle={cardStyle}\n            />\n\n            {selectedEdge && (\n              <div style={cardStyle}>\n                <h4 style={{ marginTop: 0 }}>Editing Edge</h4>\n                <label>Option Label:</label>\n                <input\n                  type=\"text\"\n                  value={selectedEdge.label}\n                  onChange={(e) => {\n                    const newLabel = e.target.value;\n                    const updatedEdges = manualEdges.map((edge) =>\n                      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n                    );\n                    const sourceId = selectedEdge.source;\n                    const targetId = selectedEdge.target;\n                    const updatedNodes = nodes.map((node) => {\n                      if (node.id === sourceId) {\n                        const updated = { ...node };\n                        if (\n                          updated.data.type === \"choice\" ||\n                          updated.data.type === \"multi_choice\"\n                        ) {\n                          const newOptions = { ...updated.data.options };\n                          delete newOptions[selectedEdge.label];\n                          newOptions[newLabel] = targetId;\n                          updated.data.options = newOptions;\n                        } else {\n                          updated.data.next = targetId;\n                        }\n                        return updated;\n                      }\n                      return node;\n                    });\n                    setEdges(updatedEdges);\n                    setNodes(updatedNodes);\n                    pushToHistory(updatedNodes, updatedEdges);\n                  }}\n                  style={{ width: \"100%\", boxSizing: \"border-box\" }}\n                />\n              </div>\n            )}\n          </div>\n\n          {/* React Flow Canvas */}\n          <ReactFlow\n            nodes={nodes.map((n) => ({\n              ...n,\n              data: { ...n.data, label: n.data.message },\n              style: getNodeStyle(n.data.type),\n            }))}\n            edges={allEdges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={handleEdgesChange}\n            onConnect={(params) => {\n              const label = prompt(\"Enter option key for this connection:\", \"\");\n              if (!label) return;\n              const edgeId = `e${params.source}-${params.target}`;\n              const updatedEdges = addEdge(\n                { ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label },\n                manualEdges\n              );\n              const updatedNodes = nodes.map((node) => {\n                if (node.id === params.source) {\n                  const updated = { ...node };\n                  if (\n                    updated.data.type === \"choice\" ||\n                    updated.data.type === \"multi_choice\"\n                  ) {\n                    updated.data.options = {\n                      ...updated.data.options,\n                      [label]: params.target,\n                    };\n                  } else {\n                    updated.data.next = params.target;\n                  }\n                  return updated;\n                }\n                return node;\n              });\n              setEdges(updatedEdges);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, updatedEdges);\n            }}\n            onNodeClick={(_, node) => {\n              setSelectedNodeId(node.id);\n              setSelectedEdgeId(null);\n            }}\n            onEdgeClick={(_, edge) => {\n              setSelectedEdgeId(edge.id);\n              setSelectedNodeId(null);\n            }}\n            fitView\n            edgeLabelMode=\"always\"\n          >\n            <MiniMap />\n            <Controls />\n            <Background />\n          </ReactFlow>\n        </div>\n\n        {/* Right Chat Panel */}\n        <div\n          style={{\n            width: \"320px\",\n            padding: 20,\n            borderLeft: \"1px solid #ddd\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            position: \"relative\",\n            height: \"100%\",\n            boxSizing: \"border-box\",\n          }}\n        >\n          <div\n            style={{\n              fontWeight: \"bold\",\n              marginBottom: 10,\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              flexShrink: 0,\n            }}\n          >\n            <span>MindPeace Chat</span>\n            {chatbotReady && (\n              <button\n                onClick={() => {\n                  const textContent = chatHistory\n                    .map(\n                      (entry) =>\n                        `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${\n                          entry.message\n                        }`\n                    )\n                    .join(\"\\n\\n\");\n                  const blob = new Blob([textContent], { type: \"text/plain\" });\n                  const url = URL.createObjectURL(blob);\n                  const link = document.createElement(\"a\");\n                  link.href = url;\n                  link.download = \"chat_history.txt\";\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                }}\n                style={{\n                  background: \"#6366f1\",\n                  color: \"white\",\n                  border: \"none\",\n                  borderRadius: \"6px\",\n                  padding: \"4px 8px\",\n                  fontSize: \"12px\",\n                  cursor: \"pointer\",\n                }}\n              >\n                Export\n              </button>\n            )}\n          </div>\n\n          <div style={{ flex: 1, overflowY: \"auto\", marginBottom: 10, paddingRight: 4 }}>\n            {chatbotReady ? (\n              <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n                {chatHistory.map((entry, index) => (\n                  <div\n                    key={index}\n                    style={{\n                      alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                      background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n                      padding: 8,\n                      borderRadius: 6,\n                      maxWidth: \"90%\",\n                    }}\n                  >\n                    {entry.message}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div>Please submit your flow to activate the chatbot.</div>\n            )}\n          </div>\n\n          {chatbotReady && (\n            <div style={{ flexShrink: 0, maxHeight: 220, overflowY: \"auto\" }}>\n              {renderChatInput()}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}