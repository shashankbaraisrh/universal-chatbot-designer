{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch (err) {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!currentNodeId || !submittedFlow) return null;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const nodeType = currentNode.type;\n    if (nodeType === \"choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"10px\",\n          flexWrap: \"wrap\"\n        },\n        children: Object.keys(currentNode.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            padding: \"8px 12px\",\n            borderRadius: \"6px\",\n            background: \"#e0f2fe\",\n            border: \"1px solid #38bdf8\",\n            cursor: \"pointer\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this);\n    }\n    if (nodeType === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"8px\"\n          },\n          children: Object.keys(currentNode.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: \"block\",\n              marginBottom: \"4px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              value: opt,\n              onChange: e => {\n                const val = e.target.value;\n                setMultiChoiceSelection(prev => e.target.checked ? [...prev, val] : prev.filter(v => v !== val));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, opt, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n            }\n          },\n          style: {\n            padding: \"8px 12px\",\n            borderRadius: \"6px\",\n            background: \"#fef9c3\",\n            border: \"1px solid #eab308\",\n            cursor: \"pointer\"\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this);\n    }\n    if (nodeType === \"input\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your answer...\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          style: {\n            padding: \"8px\",\n            borderRadius: \"6px\",\n            border: \"1px solid #ccc\",\n            flex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (inputValue.trim() !== \"\") {\n              handleUserResponse(inputValue.trim());\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            padding: \"8px 12px\",\n            borderRadius: \"6px\",\n            background: \"#dcfce7\",\n            border: \"1px solid #22c55e\",\n            cursor: \"pointer\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  const exportChat = () => {\n    const chatText = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n    const element = document.createElement(\"a\");\n    const file = new Blob([chatText], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"MindPeace_Chat.txt\";\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          padding: \"10px\",\n          fontFamily: \"Segoe UI, sans-serif\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 50,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNode,\n          style: {\n            background: \"#3b82f6\",\n            color: \"#fff\",\n            borderRadius: 6,\n            padding: \"8px 12px\"\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportToJson,\n          style: {\n            background: \"#22c55e\",\n            color: \"#fff\",\n            borderRadius: 6,\n            padding: \"8px 12px\"\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNode,\n          style: {\n            background: \"#ef4444\",\n            color: \"#fff\",\n            borderRadius: 6,\n            padding: \"8px 12px\"\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitFlow,\n          style: {\n            background: \"#8b5cf6\",\n            color: \"#fff\",\n            borderRadius: 6,\n            padding: \"8px 12px\"\n          },\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          style: {\n            background: \"#f59e0b\",\n            color: \"#fff\",\n            borderRadius: 6,\n            padding: \"8px 12px\"\n          },\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          style: {\n            background: \"#10b981\",\n            color: \"#fff\",\n            borderRadius: 6,\n            padding: \"8px 12px\"\n          },\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(node => {\n          var _node$data2;\n          return {\n            ...node,\n            style: getNodeStyle((_node$data2 = node.data) === null || _node$data2 === void 0 ? void 0 : _node$data2.type)\n          };\n        }),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: handleEdgeAdd,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        borderLeft: \"1px solid #ccc\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          padding: \"10px\",\n          fontFamily: \"Segoe UI, sans-serif\"\n        },\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          padding: \"10px\"\n        },\n        children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"10px\",\n            textAlign: entry.sender === \"user\" ? \"right\" : \"left\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: \"inline-block\",\n              padding: \"8px 12px\",\n              borderRadius: \"12px\",\n              backgroundColor: entry.sender === \"user\" ? \"#DCFCE7\" : \"#E0F2FE\",\n              border: \"1px solid #ccc\",\n              maxWidth: \"70%\",\n              fontFamily: \"Segoe UI, sans-serif\"\n            },\n            children: entry.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"10px\",\n          borderTop: \"1px solid #ccc\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"10px\",\n          borderTop: \"1px solid #ccc\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportChat,\n          style: {\n            background: \"#0ea5e9\",\n            color: \"#fff\",\n            padding: \"10px 20px\",\n            borderRadius: \"6px\",\n            cursor: \"pointer\"\n          },\n          children: \"Export Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yHRjLEAdQzIKMVYd9jqiKyVIBwA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","nodeType","display","gap","flexWrap","children","opt","onClick","cursor","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","value","onChange","val","checked","filter","v","join","placeholder","flex","trim","exportChat","chatText","element","document","createElement","file","Blob","href","URL","createObjectURL","download","appendChild","click","removeChild","width","height","top","left","zIndex","addNode","color","exportToJson","deleteNode","_node$data2","onConnect","handleEdgeAdd","fitView","borderLeft","flexDirection","overflowY","index","textAlign","backgroundColor","borderTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch (err) {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!currentNodeId || !submittedFlow) return null;\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const nodeType = currentNode.type;\n\n    if (nodeType === \"choice\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"10px\", flexWrap: \"wrap\" }}>\n          {Object.keys(currentNode.options || {}).map((opt) => (\n            <button\n              key={opt}\n              onClick={() => handleUserResponse(opt)}\n              style={{ padding: \"8px 12px\", borderRadius: \"6px\", background: \"#e0f2fe\", border: \"1px solid #38bdf8\", cursor: \"pointer\" }}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (nodeType === \"multi_choice\") {\n      return (\n        <div>\n          <div style={{ marginBottom: \"8px\" }}>\n            {Object.keys(currentNode.options || {}).map((opt) => (\n              <label key={opt} style={{ display: \"block\", marginBottom: \"4px\" }}>\n                <input\n                  type=\"checkbox\"\n                  value={opt}\n                  onChange={(e) => {\n                    const val = e.target.value;\n                    setMultiChoiceSelection((prev) =>\n                      e.target.checked ? [...prev, val] : prev.filter((v) => v !== val)\n                    );\n                  }}\n                />{\" \"}\n                {opt}\n              </label>\n            ))}\n          </div>\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]);\n              }\n            }}\n            style={{ padding: \"8px 12px\", borderRadius: \"6px\", background: \"#fef9c3\", border: \"1px solid #eab308\", cursor: \"pointer\" }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    if (nodeType === \"input\") {\n      return (\n        <div style={{ display: \"flex\", gap: \"10px\" }}>\n          <input\n            type=\"text\"\n            placeholder=\"Type your answer...\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            style={{ padding: \"8px\", borderRadius: \"6px\", border: \"1px solid #ccc\", flex: 1 }}\n          />\n          <button\n            onClick={() => {\n              if (inputValue.trim() !== \"\") {\n                handleUserResponse(inputValue.trim());\n                setInputValue(\"\");\n              }\n            }}\n            style={{ padding: \"8px 12px\", borderRadius: \"6px\", background: \"#dcfce7\", border: \"1px solid #22c55e\", cursor: \"pointer\" }}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const exportChat = () => {\n    const chatText = chatHistory\n      .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n      .join(\"\\n\\n\");\n\n    const element = document.createElement(\"a\");\n    const file = new Blob([chatText], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"MindPeace_Chat.txt\";\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Panel: React Flow Editor */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <h2 style={{ padding: \"10px\", fontFamily: \"Segoe UI, sans-serif\" }}>\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </h2>\n        <div style={{ position: \"absolute\", top: 50, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button onClick={addNode} style={{ background: \"#3b82f6\", color: \"#fff\", borderRadius: 6, padding: \"8px 12px\" }}>\n            Add Node\n          </button>\n          <button onClick={exportToJson} style={{ background: \"#22c55e\", color: \"#fff\", borderRadius: 6, padding: \"8px 12px\" }}>\n            Export JSON\n          </button>\n          <button onClick={deleteNode} style={{ background: \"#ef4444\", color: \"#fff\", borderRadius: 6, padding: \"8px 12px\" }}>\n            Delete Node\n          </button>\n          <button onClick={submitFlow} style={{ background: \"#8b5cf6\", color: \"#fff\", borderRadius: 6, padding: \"8px 12px\" }}>\n            Submit Flow\n          </button>\n          <button onClick={undo} style={{ background: \"#f59e0b\", color: \"#fff\", borderRadius: 6, padding: \"8px 12px\" }}>\n            Undo\n          </button>\n          <button onClick={redo} style={{ background: \"#10b981\", color: \"#fff\", borderRadius: 6, padding: \"8px 12px\" }}>\n            Redo\n          </button>\n        </div>\n\n        <ReactFlow\n          nodes={nodes.map((node) => ({ ...node, style: getNodeStyle(node.data?.type) }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={handleEdgeAdd}\n          fitView\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Panel: Chatbot */}\n      <div style={{ flex: 1, borderLeft: \"1px solid #ccc\", display: \"flex\", flexDirection: \"column\" }}>\n        <h2 style={{ padding: \"10px\", fontFamily: \"Segoe UI, sans-serif\" }}>MindPeace Chat</h2>\n        <div style={{ flex: 1, overflowY: \"auto\", padding: \"10px\" }}>\n          {chatHistory.map((entry, index) => (\n            <div\n              key={index}\n              style={{\n                marginBottom: \"10px\",\n                textAlign: entry.sender === \"user\" ? \"right\" : \"left\"\n              }}\n            >\n              <span\n                style={{\n                  display: \"inline-block\",\n                  padding: \"8px 12px\",\n                  borderRadius: \"12px\",\n                  backgroundColor: entry.sender === \"user\" ? \"#DCFCE7\" : \"#E0F2FE\",\n                  border: \"1px solid #ccc\",\n                  maxWidth: \"70%\",\n                  fontFamily: \"Segoe UI, sans-serif\"\n                }}\n              >\n                {entry.message}\n              </span>\n            </div>\n          ))}\n        </div>\n\n        {/* Chat Input or Button Options */}\n        <div style={{ padding: \"10px\", borderTop: \"1px solid #ccc\" }}>{renderChatInput()}</div>\n\n        {/* Export Chat Button */}\n        <div style={{ padding: \"10px\", borderTop: \"1px solid #ccc\" }}>\n          <button\n            onClick={exportChat}\n            style={{ background: \"#0ea5e9\", color: \"#fff\", padding: \"10px 20px\", borderRadius: \"6px\", cursor: \"pointer\" }}\n          >\n            Export Chat\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}