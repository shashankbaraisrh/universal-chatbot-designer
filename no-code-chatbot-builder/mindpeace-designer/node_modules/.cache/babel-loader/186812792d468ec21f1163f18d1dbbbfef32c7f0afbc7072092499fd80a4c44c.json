{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js — PART 1/3\n\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\n\n/* ---------- Unified palette (keeps UI professional & consistent) ---------- */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst THEME = {\n  primary: {\n    from: \"#2563eb\",\n    to: \"#1d4ed8\"\n  },\n  // blue\n  secondary: {\n    from: \"#64748b\",\n    to: \"#475569\"\n  },\n  // slate/grey\n  success: {\n    from: \"#16a34a\",\n    to: \"#15803d\"\n  },\n  // green\n  danger: {\n    from: \"#ef4444\",\n    to: \"#dc2626\"\n  },\n  // red\n  neutral: {\n    from: \"#94a3b8\",\n    to: \"#64748b\"\n  } // soft grey (icons)\n};\nfunction btn(variant = \"primary\") {\n  const v = THEME[variant] || THEME.primary;\n  return {\n    background: `linear-gradient(180deg, ${v.from}, ${v.to})`,\n    color: \"white\",\n    height: 30,\n    padding: \"0 12px\",\n    borderRadius: 8,\n    border: \"1px solid rgba(0,0,0,0.06)\",\n    cursor: \"pointer\",\n    fontWeight: 600,\n    fontSize: 13,\n    boxShadow: \"0 3px 8px rgba(0,0,0,0.10)\",\n    transition: \"filter .15s ease\"\n  };\n}\nfunction iconBtn(variant = \"neutral\") {\n  const v = THEME[variant] || THEME.neutral;\n  return {\n    background: `linear-gradient(180deg, ${v.from}, ${v.to})`,\n    color: \"white\",\n    width: 28,\n    height: 28,\n    borderRadius: 999,\n    border: \"1px solid rgba(0,0,0,0.06)\",\n    cursor: \"pointer\",\n    fontWeight: 700,\n    fontSize: 16,\n    lineHeight: \"28px\",\n    textAlign: \"center\",\n    boxShadow: \"0 3px 8px rgba(0,0,0,0.10)\"\n  };\n}\n\n/* ---------- Initial canvas state ---------- */\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n/* ---------- LocalStorage persistence helpers ---------- */\nconst FLOWS_KEY = \"mindpeace_flows\"; // map id -> flow\nconst ACTIVE_KEY = \"mindpeace_active_flow\"; // active flow id\n\nfunction readFlows() {\n  try {\n    return JSON.parse(localStorage.getItem(FLOWS_KEY) || \"{}\");\n  } catch {\n    return {};\n  }\n}\nfunction writeFlows(map) {\n  localStorage.setItem(FLOWS_KEY, JSON.stringify(map));\n}\nfunction setActiveFlowId(id) {\n  localStorage.setItem(ACTIVE_KEY, id);\n}\nfunction getActiveFlowId() {\n  return localStorage.getItem(ACTIVE_KEY);\n}\nfunction computeNextCounterFromNodes(nodesArr) {\n  const maxId = nodesArr.reduce((m, n) => Math.max(m, Number(n.id) || 0), 0);\n  return isFinite(maxId) ? maxId + 1 : 2;\n}\nfunction makeFlowPayload({\n  id,\n  name,\n  nodes,\n  edges,\n  promptSettings,\n  nodeCounter\n}) {\n  return {\n    id,\n    name,\n    nodes,\n    edges,\n    promptSettings,\n    nodeCounter,\n    savedAt: Date.now()\n  };\n}\n\n/* ======================================================================== */\n/* Component                                                                */\n/* ======================================================================== */\nexport default function App() {\n  _s();\n  // Lock page scrolling\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n\n  // React Flow state\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  // UI selections\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  // Chat panel state\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\"\n  });\n\n  // Flow switcher state\n  const [flowsMeta, setFlowsMeta] = useState([]); // [{id,name,savedAt}]\n  const [activeFlowIdState, setActiveFlowIdState] = useState(null);\n  const [selectedFlowId, setSelectedFlowId] = useState(null);\n\n  // Undo/redo history\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n\n  // Shared card style\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\"\n  };\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#0284c7\",\n          border: \"1px solid #0369a1\",\n          color: \"white\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#facc15\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model\n      },\n      nodes: {}\n    };\n    nodes.forEach(({\n      id,\n      data\n    }) => {\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  // App.js — PART 2/3  (continue)\n\n  /* ---------- Flow switcher helpers ---------- */\n  const refreshFlowsMeta = () => {\n    var _list$0$id, _list$;\n    const map = readFlows();\n    const list = Object.values(map).map(f => ({\n      id: f.id,\n      name: f.name || \"(unnamed)\",\n      savedAt: f.savedAt || 0\n    })).sort((a, b) => b.savedAt - a.savedAt);\n    const activeId = getActiveFlowId();\n    setFlowsMeta(list);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId || ((_list$0$id = (_list$ = list[0]) === null || _list$ === void 0 ? void 0 : _list$.id) !== null && _list$0$id !== void 0 ? _list$0$id : null));\n  };\n  const loadFlowById = id => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    setNodes(f.nodes || initialNodes);\n    setEdges(f.edges || []);\n    setPromptSettings(f.promptSettings || promptSettings);\n    nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n\n    // reset runtime\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n    history.current = [{\n      nodes: f.nodes || initialNodes,\n      edges: f.edges || []\n    }];\n    historyIndex.current = 0;\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n  };\n  const renameFlowById = id => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    const newName = window.prompt(\"Rename flow:\", f.name || \"My Flow\");\n    if (!newName) return;\n    f.name = newName;\n    f.savedAt = Date.now();\n    flows[id] = f;\n    writeFlows(flows);\n    refreshFlowsMeta();\n  };\n  const deleteFlowById = id => {\n    const flows = readFlows();\n    if (!flows[id]) return window.alert(\"Flow not found.\");\n    if (!window.confirm(\"Delete this flow permanently?\")) return;\n    delete flows[id];\n    writeFlows(flows);\n    if (getActiveFlowId() === id) {\n      const remaining = Object.values(flows);\n      if (remaining.length) {\n        const fallback = remaining.sort((a, b) => (b.savedAt || 0) - (a.savedAt || 0))[0];\n        setActiveFlowId(fallback.id);\n        loadFlowById(fallback.id);\n      } else {\n        const newId = String(Date.now());\n        const payload = makeFlowPayload({\n          id: newId,\n          name: \"My First Flow\",\n          nodes: initialNodes,\n          edges: initialEdges,\n          promptSettings,\n          nodeCounter: 2\n        });\n        writeFlows({\n          [newId]: payload\n        });\n        setActiveFlowId(newId);\n        loadFlowById(newId);\n      }\n    } else {\n      refreshFlowsMeta();\n    }\n  };\n\n  // Restore last active flow (or create first)\n  useEffect(() => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId();\n    if (activeId && flows[activeId]) {\n      const f = flows[activeId];\n      setNodes(f.nodes || initialNodes);\n      setEdges(f.edges || []);\n      setPromptSettings(f.promptSettings || promptSettings);\n      nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n      history.current = [{\n        nodes: f.nodes || initialNodes,\n        edges: f.edges || []\n      }];\n      historyIndex.current = 0;\n    } else {\n      const id = String(Date.now());\n      const payload = makeFlowPayload({\n        id,\n        name: \"My First Flow\",\n        nodes: initialNodes,\n        edges: initialEdges,\n        promptSettings,\n        nodeCounter\n      });\n      const map = readFlows();\n      map[id] = payload;\n      writeFlows(map);\n      setActiveFlowId(id);\n    }\n    refreshFlowsMeta();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        window.alert(\"Flow submitted successfully.\");\n      } else {\n        window.alert(\"Submission failed.\");\n      }\n    } catch {\n      window.alert(\"Backend error.\");\n    }\n  };\n  const saveCurrentFlow = () => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId() || String(Date.now());\n    const existing = flows[activeId];\n    let name = existing === null || existing === void 0 ? void 0 : existing.name;\n    if (!name) {\n      name = window.prompt(\"Name this flow:\", \"My Flow\");\n      if (!name) return;\n    }\n    flows[activeId] = makeFlowPayload({\n      id: activeId,\n      name,\n      nodes,\n      edges: manualEdges,\n      promptSettings,\n      nodeCounter\n    });\n    writeFlows(flows);\n    setActiveFlowId(activeId);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId);\n    refreshFlowsMeta();\n    window.alert(`Saved ✓  (${name})`);\n  };\n  const createNewFlow = () => {\n    const name = window.prompt(\"New flow name:\", \"New Flow\");\n    if (!name) return;\n    const freshNodes = [{\n      id: \"1\",\n      data: {\n        message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: {\n        x: 250,\n        y: 0\n      },\n      type: \"default\"\n    }];\n    const freshEdges = [];\n    nodeCounter = 2;\n    setNodes(freshNodes);\n    setEdges(freshEdges);\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n    history.current = [{\n      nodes: freshNodes,\n      edges: freshEdges\n    }];\n    historyIndex.current = 0;\n    const id = String(Date.now());\n    const flows = readFlows();\n    flows[id] = makeFlowPayload({\n      id,\n      name,\n      nodes: freshNodes,\n      edges: freshEdges,\n      promptSettings,\n      nodeCounter\n    });\n    writeFlows(flows);\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n    window.alert(`New flow created ✓  (${name})`);\n  };\n\n  /* ---------- Chat logic ---------- */\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow) return;\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const formattedHistory = updatedHistory.map(entry => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message\n    }));\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n      } catch {\n        setChatHistory(prev => [...prev, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n      }\n      return;\n    }\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, {\n              role: \"user\",\n              content: response\n            }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const renderChatInput = () => {\n    if (!submittedFlow || !currentNodeId && !gptMode) return null;\n    if (gptMode) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserResponse(inputValue);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: 6,\n            border: \"1px solid #f59e0b\",\n            background: \"#fff7ed\",\n            height: \"38px\",\n            boxSizing: \"border-box\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          },\n          style: btn(\"primary\"),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this);\n    }\n    const node = submittedFlow.nodes[currentNodeId];\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 8\n        },\n        children: opts.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserResponse(opt),\n          style: {\n            ...btn(\"primary\"),\n            width: \"100%\"\n          },\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this);\n    }\n    if (node.type === \"multi_choice\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(node.options || {}).map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: \"#facc15\",\n            padding: \"4px 8px\",\n            borderRadius: 4,\n            margin: \"4px 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: multiChoiceSelection.includes(opt),\n              onChange: () => setMultiChoiceSelection(prev => prev.includes(opt) ? prev.filter(o => o !== opt) : [...prev, opt])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 17\n            }, this), \" \", opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 15\n          }, this)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (multiChoiceSelection.length > 0) {\n              handleUserResponse(multiChoiceSelection.join(\", \"));\n              setMultiChoiceSelection([]);\n              setInputValue(\"\");\n            }\n          },\n          style: {\n            ...btn(\"success\"),\n            width: \"100%\",\n            marginTop: 10\n          },\n          children: \"Submit Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this);\n    }\n\n    // input node\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"6px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        onKeyDown: e => {\n          if (e.key === \"Enter\") {\n            handleUserResponse(inputValue);\n            setInputValue(\"\");\n          }\n        },\n        style: {\n          flex: 1,\n          padding: \"8px\",\n          borderRadius: 6,\n          border: \"1px solid #f59e0b\",\n          background: \"#fff7ed\",\n          height: \"38px\",\n          boxSizing: \"border-box\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleUserResponse(inputValue);\n          setInputValue(\"\");\n        },\n        style: btn(\"primary\"),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Edge cleanup when removed\n  const handleEdgesChange = changes => {\n    const removedIds = new Set(changes.filter(c => c.type === \"remove\" && c.id).map(c => c.id));\n    const removedEdges = manualEdges.filter(e => removedIds.has(e.id));\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n    const updatedNodes = nodes.map(n => {\n      let data = {\n        ...n.data\n      };\n      let mutated = false;\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = {\n              ...data.options\n            };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = {\n              ...data.options\n            };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n      return mutated ? {\n        ...n,\n        data\n      } : n;\n    });\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter(e => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n  // App.js — PART 3/3  (finish)\n\n  // whether the selected item in the dropdown is the active (loaded) one\n  const activeSelected = Boolean(selectedFlowId && selectedFlowId === activeFlowIdState);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n      overflow: \"hidden\",\n      overscrollBehavior: \"contain\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          padding: \"8px 12px\",\n          background: \"#ffffffdd\",\n          backdropFilter: \"blur(6px)\",\n          borderBottom: \"1px solid #e5e7eb\",\n          zIndex: 12,\n          boxSizing: \"border-box\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: 6\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"inline-flex\",\n              alignItems: \"center\",\n              padding: \"10px 16px\",\n              background: \"#f3f4f6\",\n              borderRadius: 12,\n              border: \"1px solid #cbd5e1\",\n              boxShadow: \"0 14px 22px rgba(2,6,23,0.18), 0 2px 0 rgba(255,255,255,0.65) inset\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontWeight: 800,\n                fontSize: 16,\n                color: \"#334155\",\n                letterSpacing: 0.2\n              },\n              children: \"FlowChat Designer: A No-Code AI Chatbot Builder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              gap: 8,\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedFlowId || \"\",\n              onChange: e => setSelectedFlowId(e.target.value),\n              style: {\n                height: 30,\n                padding: \"0 10px\",\n                borderRadius: 8,\n                border: `1px solid ${activeSelected ? \"#16a34a\" : \"#e5e7eb\"}`,\n                background: \"#fff\",\n                outline: \"none\"\n              },\n              children: [flowsMeta.length === 0 && /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"No flows\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 751,\n                columnNumber: 44\n              }, this), flowsMeta.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: f.id,\n                children: f.name\n              }, f.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 753,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 15\n            }, this), selectedFlowId && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: \"2px 8px\",\n                height: 26,\n                display: \"inline-flex\",\n                alignItems: \"center\",\n                borderRadius: 999,\n                border: `1px solid ${activeSelected ? \"#16a34a22\" : \"#6b728022\"}`,\n                background: activeSelected ? \"#16a34a11\" : \"#6b728011\",\n                color: activeSelected ? \"#16a34a\" : \"#6b7280\",\n                fontWeight: 600,\n                fontSize: 12\n              },\n              children: activeSelected ? \"Active\" : \"Not loaded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 758,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"primary\"),\n              disabled: !selectedFlowId || activeSelected,\n              onClick: () => selectedFlowId && loadFlowById(selectedFlowId),\n              children: activeSelected ? \"Loaded\" : \"Load\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"secondary\"),\n              onClick: () => selectedFlowId && renameFlowById(selectedFlowId),\n              children: \"Rename\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"danger\"),\n              onClick: () => selectedFlowId && deleteFlowById(selectedFlowId),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 786,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              gap: 8,\n              alignItems: \"center\",\n              flexWrap: \"wrap\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"primary\"),\n              onClick: () => {\n                const newId = nodeCounter.toString();\n                nodeCounter++;\n                const position = selectedNodeId ? {\n                  x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n                  y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n                } : {\n                  x: Math.random() * 400,\n                  y: Math.random() * 400\n                };\n                const newNode = {\n                  id: newId,\n                  data: {\n                    message: `This is node ${newId}`,\n                    type: \"choice\",\n                    options: {},\n                    capture: \"\",\n                    next: \"\"\n                  },\n                  position,\n                  type: \"default\"\n                };\n                const updatedNodes = [...nodes, newNode];\n                setNodes(updatedNodes);\n                pushToHistory(updatedNodes, manualEdges);\n              },\n              children: \"Add Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 795,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"secondary\"),\n              onClick: () => {\n                const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], {\n                  type: \"application/json\"\n                });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"conversation_data.json\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              },\n              children: \"Export JSON\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 819,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"danger\"),\n              onClick: () => {\n                if (!selectedNodeId) return;\n                const deletedId = selectedNodeId;\n                const updatedNodesBase = nodes.filter(n => n.id !== deletedId);\n                const updatedEdges = manualEdges.filter(e => e.source !== deletedId && e.target !== deletedId);\n                const updatedNodes = updatedNodesBase.map(n => {\n                  const data = {\n                    ...n.data\n                  };\n                  let mutated = false;\n                  if (data.next === deletedId) {\n                    data.next = \"\";\n                    mutated = true;\n                  }\n                  if (data.options && Object.keys(data.options).length) {\n                    const opts = {\n                      ...data.options\n                    };\n                    for (const [k, v] of Object.entries(opts)) {\n                      if (v === deletedId) delete opts[k];\n                    }\n                    if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                      data.options = opts;\n                      mutated = true;\n                    }\n                  }\n                  return mutated ? {\n                    ...n,\n                    data\n                  } : n;\n                });\n                setNodes(updatedNodes);\n                setEdges(updatedEdges);\n                setSelectedNodeId(null);\n                pushToHistory(updatedNodes, updatedEdges);\n              },\n              children: \"Delete Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 832,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"success\"),\n              onClick: submitFlow,\n              children: \"Submit Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"primary\"),\n              onClick: saveCurrentFlow,\n              children: \"Save Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 868,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: btn(\"secondary\"),\n              onClick: createNewFlow,\n              children: \"New Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 869,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              gap: 12,\n              alignItems: \"flex-end\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 11,\n                  color: \"#64748b\",\n                  marginBottom: 4\n                },\n                children: \"Undo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 874,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                \"aria-label\": \"Undo\",\n                title: \"Undo\",\n                style: iconBtn(\"neutral\"),\n                onClick: undo,\n                children: \"\\u21BA\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 875,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 873,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 11,\n                  color: \"#64748b\",\n                  marginBottom: 4\n                },\n                children: \"Redo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 878,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                \"aria-label\": \"Redo\",\n                title: \"Redo\",\n                style: iconBtn(\"neutral\"),\n                onClick: redo,\n                children: \"\\u21BB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 879,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 877,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 872,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 120,\n          left: 10,\n          bottom: 10,\n          width: 350,\n          boxSizing: \"border-box\",\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 28,\n          paddingLeft: 4,\n          scrollbarGutter: \"stable both-edges\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n          zIndex: 11\n        },\n        children: [/*#__PURE__*/_jsxDEV(PromptEditor, {\n          promptSettings: promptSettings,\n          setPromptSettings: setPromptSettings,\n          containerStyle: cardStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 11\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: [\"Editing Node: \", selectedNode.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 914,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  message: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\",\n              height: 60\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 915,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedNode.data.type,\n            onChange: e => {\n              const newType = e.target.value;\n              const updatedNodes = nodes.map(node => {\n                if (node.id !== selectedNodeId) return node;\n                const nd = {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    type: newType\n                  }\n                };\n                if (newType !== \"choice\" && newType !== \"multi_choice\") nd.data.options = {};\n                return nd;\n              });\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 944,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"input\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 945,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 947,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 948,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 929,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.capture,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  capture: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 951,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next Node ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 965,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedNode.data.next,\n            onChange: e => {\n              const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  next: e.target.value\n                }\n              } : node);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, manualEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 966,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 13\n        }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: cardStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              marginTop: 0\n            },\n            children: \"Editing Edge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 985,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 986,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedEdge.label,\n            onChange: e => {\n              const newLabel = e.target.value;\n              const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n                ...edge,\n                label: newLabel\n              } : edge);\n              const sourceId = selectedEdge.source;\n              const targetId = selectedEdge.target;\n              const updatedNodes = nodes.map(node => {\n                if (node.id === sourceId) {\n                  const updated = {\n                    ...node\n                  };\n                  if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                    const newOptions = {\n                      ...updated.data.options\n                    };\n                    delete newOptions[selectedEdge.label];\n                    newOptions[newLabel] = targetId;\n                    updated.data.options = newOptions;\n                  } else {\n                    updated.data.next = targetId;\n                  }\n                  return updated;\n                }\n                return node;\n              });\n              setEdges(updatedEdges);\n              setNodes(updatedNodes);\n              pushToHistory(updatedNodes, updatedEdges);\n            },\n            style: {\n              width: \"100%\",\n              boxSizing: \"border-box\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 987,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 984,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: handleEdgesChange,\n        onConnect: params => {\n          const sourceNode = nodes.find(n => n.id === params.source);\n          let label = \"\";\n          if (sourceNode && (sourceNode.data.type === \"choice\" || sourceNode.data.type === \"multi_choice\")) {\n            label = window.prompt(\"Enter option key for this connection:\", \"\") || \"\";\n            if (!label) return;\n          }\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: (_, node) => {\n          setSelectedNodeId(node.id);\n          setSelectedEdgeId(null);\n        },\n        onEdgeClick: (_, edge) => {\n          setSelectedEdgeId(edge.id);\n          setSelectedNodeId(null);\n        },\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1067,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 320,\n        margin: 10,\n        padding: 12,\n        background: \"#fff7ed\",\n        border: \"1px solid #f59e0b\",\n        borderRadius: 10,\n        boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"calc(100vh - 20px)\",\n        boxSizing: \"border-box\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 8,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexShrink: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Chat Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1082,\n          columnNumber: 11\n        }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const textContent = chatHistory.map(entry => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`).join(\"\\n\\n\");\n            const blob = new Blob([textContent], {\n              type: \"text/plain\"\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"chat_history.txt\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          },\n          style: btn(\"secondary\"),\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1084,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          overflowY: \"auto\",\n          overflowX: \"hidden\",\n          paddingRight: 6,\n          paddingLeft: 2,\n          paddingTop: 2,\n          background: \"transparent\",\n          borderRadius: 8\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 8\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\",\n              boxSizing: \"border-box\",\n              overflowWrap: \"anywhere\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1106,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            opacity: 0.8\n          },\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexShrink: 0,\n          paddingTop: 8,\n          background: \"transparent\"\n        },\n        children: renderChatInput()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1072,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 701,\n    columnNumber: 5\n  }, this);\n} // <-- closes App component\n_s(App, \"AZuoEKg+iGmOg74GCfETlozxCjM=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","useEffect","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","PromptEditor","jsxDEV","_jsxDEV","THEME","primary","from","to","secondary","success","danger","neutral","btn","variant","v","background","color","height","padding","borderRadius","border","cursor","fontWeight","fontSize","boxShadow","transition","iconBtn","width","lineHeight","textAlign","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","FLOWS_KEY","ACTIVE_KEY","readFlows","JSON","parse","localStorage","getItem","writeFlows","map","setItem","stringify","setActiveFlowId","getActiveFlowId","computeNextCounterFromNodes","nodesArr","maxId","reduce","m","n","Math","max","Number","isFinite","makeFlowPayload","name","nodes","edges","promptSettings","savedAt","Date","now","App","_s","prevHtmlOverflow","document","documentElement","style","overflow","prevBodyOverflow","body","prevBodyMargin","margin","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","gptMode","setGptMode","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","multiChoiceSelection","setMultiChoiceSelection","setPromptSettings","system_prompt","gpt_model","flowsMeta","setFlowsMeta","activeFlowIdState","setActiveFlowIdState","selectedFlowId","setSelectedFlowId","history","historyIndex","selectedNode","find","selectedEdge","e","cardStyle","boxSizing","marginRight","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","autoGeneratedEdges","existing","Set","source","target","autoEdges","node","_node$data","has","animated","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","forEach","nodeObj","Object","keys","refreshFlowsMeta","_list$0$id","_list$","list","values","f","sort","a","b","activeId","loadFlowById","flows","window","alert","renameFlowById","newName","prompt","deleteFlowById","confirm","remaining","fallback","newId","String","payload","submitFlow","res","fetch","method","headers","ok","_payload$nodes$","firstMsg","sender","saveCurrentFlow","createNewFlow","freshNodes","freshEdges","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","updatedHistory","formattedHistory","entry","role","content","chat_history","user_inputs","json","gptReply","reply","prev","currentNode","newInputs","nextId","nextNode","renderChatInput","display","gap","children","value","onChange","onKeyDown","key","flex","fileName","_jsxFileName","lineNumber","columnNumber","onClick","opts","flexDirection","opt","checked","includes","filter","o","join","marginTop","handleEdgesChange","changes","removedIds","c","removedEdges","updatedNodes","mutated","k","entries","remainingEdges","activeSelected","Boolean","overscrollBehavior","top","left","right","backdropFilter","borderBottom","zIndex","alignItems","justifyContent","marginBottom","letterSpacing","outline","disabled","flexWrap","toString","random","newNode","blob","Blob","url","URL","createObjectURL","link","createElement","href","download","appendChild","click","removeChild","deletedId","updatedNodesBase","updatedEdges","title","bottom","overflowY","overflowX","paddingRight","paddingLeft","scrollbarGutter","containerStyle","newType","nd","newLabel","edge","sourceId","targetId","updated","newOptions","onConnect","params","sourceNode","edgeId","onNodeClick","_","onEdgeClick","fitView","edgeLabelMode","flexShrink","textContent","paddingTop","index","alignSelf","overflowWrap","opacity","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["// App.js — PART 1/3\n\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport PromptEditor from \"./PromptEditor\";\n\n/* ---------- Unified palette (keeps UI professional & consistent) ---------- */\nconst THEME = {\n  primary:   { from: \"#2563eb\", to: \"#1d4ed8\" }, // blue\n  secondary: { from: \"#64748b\", to: \"#475569\" }, // slate/grey\n  success:   { from: \"#16a34a\", to: \"#15803d\" }, // green\n  danger:    { from: \"#ef4444\", to: \"#dc2626\" }, // red\n  neutral:   { from: \"#94a3b8\", to: \"#64748b\" }, // soft grey (icons)\n};\nfunction btn(variant = \"primary\") {\n  const v = THEME[variant] || THEME.primary;\n  return {\n    background: `linear-gradient(180deg, ${v.from}, ${v.to})`,\n    color: \"white\",\n    height: 30,\n    padding: \"0 12px\",\n    borderRadius: 8,\n    border: \"1px solid rgba(0,0,0,0.06)\",\n    cursor: \"pointer\",\n    fontWeight: 600,\n    fontSize: 13,\n    boxShadow: \"0 3px 8px rgba(0,0,0,0.10)\",\n    transition: \"filter .15s ease\",\n  };\n}\nfunction iconBtn(variant = \"neutral\") {\n  const v = THEME[variant] || THEME.neutral;\n  return {\n    background: `linear-gradient(180deg, ${v.from}, ${v.to})`,\n    color: \"white\",\n    width: 28,\n    height: 28,\n    borderRadius: 999,\n    border: \"1px solid rgba(0,0,0,0.06)\",\n    cursor: \"pointer\",\n    fontWeight: 700,\n    fontSize: 16,\n    lineHeight: \"28px\",\n    textAlign: \"center\",\n    boxShadow: \"0 3px 8px rgba(0,0,0,0.10)\",\n  };\n}\n\n/* ---------- Initial canvas state ---------- */\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\",\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\",\n  },\n];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\n/* ---------- LocalStorage persistence helpers ---------- */\nconst FLOWS_KEY = \"mindpeace_flows\";        // map id -> flow\nconst ACTIVE_KEY = \"mindpeace_active_flow\"; // active flow id\n\nfunction readFlows() {\n  try { return JSON.parse(localStorage.getItem(FLOWS_KEY) || \"{}\"); }\n  catch { return {}; }\n}\nfunction writeFlows(map) { localStorage.setItem(FLOWS_KEY, JSON.stringify(map)); }\nfunction setActiveFlowId(id) { localStorage.setItem(ACTIVE_KEY, id); }\nfunction getActiveFlowId() { return localStorage.getItem(ACTIVE_KEY); }\nfunction computeNextCounterFromNodes(nodesArr) {\n  const maxId = nodesArr.reduce((m, n) => Math.max(m, Number(n.id) || 0), 0);\n  return (isFinite(maxId) ? maxId + 1 : 2);\n}\nfunction makeFlowPayload({ id, name, nodes, edges, promptSettings, nodeCounter }) {\n  return { id, name, nodes, edges, promptSettings, nodeCounter, savedAt: Date.now() };\n}\n\n/* ======================================================================== */\n/* Component                                                                */\n/* ======================================================================== */\nexport default function App() {\n  // Lock page scrolling\n  useEffect(() => {\n    const prevHtmlOverflow = document.documentElement.style.overflow;\n    const prevBodyOverflow = document.body.style.overflow;\n    const prevBodyMargin = document.body.style.margin;\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.overflow = \"hidden\";\n    document.body.style.margin = \"0\";\n    return () => {\n      document.documentElement.style.overflow = prevHtmlOverflow;\n      document.body.style.overflow = prevBodyOverflow;\n      document.body.style.margin = prevBodyMargin;\n    };\n  }, []);\n\n  // React Flow state\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  // UI selections\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  // Chat panel state\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [gptMode, setGptMode] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [multiChoiceSelection, setMultiChoiceSelection] = useState([]);\n\n  // Prompt editor state\n  const [promptSettings, setPromptSettings] = useState({\n    system_prompt:\n      \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n    gpt_model: \"gpt-3.5-turbo\",\n  });\n\n  // Flow switcher state\n  const [flowsMeta, setFlowsMeta] = useState([]); // [{id,name,savedAt}]\n  const [activeFlowIdState, setActiveFlowIdState] = useState(null);\n  const [selectedFlowId, setSelectedFlowId] = useState(null);\n\n  // Undo/redo history\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  // Shared card style\n  const cardStyle = {\n    background: \"#fff7ed\",\n    padding: 12,\n    border: \"1px solid #f59e0b\",\n    borderRadius: 10,\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    marginRight: 10,\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n  };\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes); setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes); setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300,\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#0284c7\", border: \"1px solid #0369a1\", color: \"white\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#facc15\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          type: \"default\",\n          animated: false,\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\",\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: promptSettings.system_prompt,\n        gpt_model: promptSettings.gpt_model,\n      },\n      nodes: {},\n    };\n    nodes.forEach(({ id, data }) => {\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n// App.js — PART 2/3  (continue)\n\n  /* ---------- Flow switcher helpers ---------- */\n  const refreshFlowsMeta = () => {\n    const map = readFlows();\n    const list = Object.values(map)\n      .map(f => ({ id: f.id, name: f.name || \"(unnamed)\", savedAt: f.savedAt || 0 }))\n      .sort((a, b) => b.savedAt - a.savedAt);\n    const activeId = getActiveFlowId();\n    setFlowsMeta(list);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId || (list[0]?.id ?? null));\n  };\n\n  const loadFlowById = (id) => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n\n    setNodes(f.nodes || initialNodes);\n    setEdges(f.edges || []);\n    setPromptSettings(f.promptSettings || promptSettings);\n    nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n\n    // reset runtime\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n\n    history.current = [{ nodes: f.nodes || initialNodes, edges: f.edges || [] }];\n    historyIndex.current = 0;\n\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n  };\n\n  const renameFlowById = (id) => {\n    const flows = readFlows();\n    const f = flows[id];\n    if (!f) return window.alert(\"Flow not found.\");\n    const newName = window.prompt(\"Rename flow:\", f.name || \"My Flow\");\n    if (!newName) return;\n    f.name = newName;\n    f.savedAt = Date.now();\n    flows[id] = f;\n    writeFlows(flows);\n    refreshFlowsMeta();\n  };\n\n  const deleteFlowById = (id) => {\n    const flows = readFlows();\n    if (!flows[id]) return window.alert(\"Flow not found.\");\n    if (!window.confirm(\"Delete this flow permanently?\")) return;\n\n    delete flows[id];\n    writeFlows(flows);\n\n    if (getActiveFlowId() === id) {\n      const remaining = Object.values(flows);\n      if (remaining.length) {\n        const fallback = remaining.sort((a,b) => (b.savedAt||0)-(a.savedAt||0))[0];\n        setActiveFlowId(fallback.id);\n        loadFlowById(fallback.id);\n      } else {\n        const newId = String(Date.now());\n        const payload = makeFlowPayload({\n          id: newId, name: \"My First Flow\",\n          nodes: initialNodes, edges: initialEdges, promptSettings, nodeCounter: 2\n        });\n        writeFlows({ [newId]: payload });\n        setActiveFlowId(newId);\n        loadFlowById(newId);\n      }\n    } else {\n      refreshFlowsMeta();\n    }\n  };\n\n  // Restore last active flow (or create first)\n  useEffect(() => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId();\n    if (activeId && flows[activeId]) {\n      const f = flows[activeId];\n      setNodes(f.nodes || initialNodes);\n      setEdges(f.edges || []);\n      setPromptSettings(f.promptSettings || promptSettings);\n      nodeCounter = f.nodeCounter || computeNextCounterFromNodes(f.nodes || initialNodes);\n      history.current = [{ nodes: f.nodes || initialNodes, edges: f.edges || [] }];\n      historyIndex.current = 0;\n    } else {\n      const id = String(Date.now());\n      const payload = makeFlowPayload({\n        id, name: \"My First Flow\",\n        nodes: initialNodes, edges: initialEdges, promptSettings, nodeCounter\n      });\n      const map = readFlows();\n      map[id] = payload;\n      writeFlows(map);\n      setActiveFlowId(id);\n    }\n    refreshFlowsMeta();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        setGptMode(false);\n        window.alert(\"Flow submitted successfully.\");\n      } else {\n        window.alert(\"Submission failed.\");\n      }\n    } catch {\n      window.alert(\"Backend error.\");\n    }\n  };\n\n  const saveCurrentFlow = () => {\n    const flows = readFlows();\n    const activeId = getActiveFlowId() || String(Date.now());\n    const existing = flows[activeId];\n\n    let name = existing?.name;\n    if (!name) {\n      name = window.prompt(\"Name this flow:\", \"My Flow\");\n      if (!name) return;\n    }\n\n    flows[activeId] = makeFlowPayload({\n      id: activeId, name, nodes, edges: manualEdges, promptSettings, nodeCounter\n    });\n    writeFlows(flows);\n    setActiveFlowId(activeId);\n    setActiveFlowIdState(activeId);\n    setSelectedFlowId(activeId);\n    refreshFlowsMeta();\n    window.alert(`Saved ✓  (${name})`);\n  };\n\n  const createNewFlow = () => {\n    const name = window.prompt(\"New flow name:\", \"New Flow\");\n    if (!name) return;\n\n    const freshNodes = [{\n      id: \"1\",\n      data: {\n        message:\n          \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n        type: \"choice\", options: {}, capture: \"\", next: \"\",\n      },\n      position: { x: 250, y: 0 }, type: \"default\",\n    }];\n    const freshEdges = [];\n    nodeCounter = 2;\n\n    setNodes(freshNodes);\n    setEdges(freshEdges);\n    setSelectedNodeId(null);\n    setSelectedEdgeId(null);\n    setChatbotReady(false);\n    setSubmittedFlow(null);\n    setCurrentNodeId(null);\n    setGptMode(false);\n    setChatHistory([]);\n    setUserInputs({});\n    setInputValue(\"\");\n    setMultiChoiceSelection([]);\n\n    history.current = [{ nodes: freshNodes, edges: freshEdges }];\n    historyIndex.current = 0;\n\n    const id = String(Date.now());\n    const flows = readFlows();\n    flows[id] = makeFlowPayload({\n      id, name, nodes: freshNodes, edges: freshEdges, promptSettings, nodeCounter\n    });\n    writeFlows(flows);\n    setActiveFlowId(id);\n    setActiveFlowIdState(id);\n    setSelectedFlowId(id);\n    refreshFlowsMeta();\n\n    window.alert(`New flow created ✓  (${name})`);\n  };\n\n  /* ---------- Chat logic ---------- */\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow) return;\n\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n\n    const formattedHistory = updatedHistory.map((entry) => ({\n      role: entry.sender === \"user\" ? \"user\" : \"assistant\",\n      content: entry.message,\n    }));\n\n    if (gptMode) {\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: formattedHistory,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: userInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: gptReply }]);\n      } catch {\n        setChatHistory((prev) => [...prev, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n      }\n      return;\n    }\n\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const message = nextNode.message || \"Let's continue.\";\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            chat_history: [...formattedHistory, { role: \"user\", content: response }],\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model,\n            user_inputs: newInputs,\n          }),\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: gptReply },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      } catch {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" },\n        ]);\n        setCurrentNodeId(null);\n        setGptMode(true);\n        setUserInputs(newInputs);\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const renderChatInput = () => {\n    if (!submittedFlow || (!currentNodeId && !gptMode)) return null;\n\n    if (gptMode) {\n      return (\n        <div style={{ display: \"flex\", gap: \"6px\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => { if (e.key === \"Enter\") { handleUserResponse(inputValue); setInputValue(\"\"); } }}\n            style={{\n              flex: 1, padding: \"8px\", borderRadius: 6,\n              border: \"1px solid #f59e0b\", background: \"#fff7ed\",\n              height: \"38px\", boxSizing: \"border-box\",\n            }}\n          />\n          <button\n            onClick={() => { handleUserResponse(inputValue); setInputValue(\"\"); }}\n            style={btn(\"primary\")}\n          >\n            Send\n          </button>\n        </div>\n      );\n    }\n\n    const node = submittedFlow.nodes[currentNodeId];\n\n    if (node.type === \"choice\") {\n      const opts = Object.keys(node.options || {});\n      return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n          {opts.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => handleUserResponse(opt)}\n              style={{ ...btn(\"primary\"), width: \"100%\" }}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    if (node.type === \"multi_choice\") {\n      return (\n        <div>\n          {Object.keys(node.options || {}).map((opt) => (\n            <div key={opt} style={{ background: \"#facc15\", padding: \"4px 8px\", borderRadius: 4, margin: \"4px 0\" }}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={multiChoiceSelection.includes(opt)}\n                  onChange={() =>\n                    setMultiChoiceSelection((prev) =>\n                      prev.includes(opt) ? prev.filter((o) => o !== opt) : [...prev, opt]\n                    )\n                  }\n                />{\" \"}\n                {opt}\n              </label>\n            </div>\n          ))}\n          <button\n            onClick={() => {\n              if (multiChoiceSelection.length > 0) {\n                handleUserResponse(multiChoiceSelection.join(\", \"));\n                setMultiChoiceSelection([]); setInputValue(\"\");\n              }\n            }}\n            style={{ ...btn(\"success\"), width: \"100%\", marginTop: 10 }}\n          >\n            Submit Selection\n          </button>\n        </div>\n      );\n    }\n\n    // input node\n    return (\n      <div style={{ display: \"flex\", gap: \"6px\" }}>\n        <input\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyDown={(e) => { if (e.key === \"Enter\") { handleUserResponse(inputValue); setInputValue(\"\"); } }}\n          style={{\n            flex: 1, padding: \"8px\", borderRadius: 6,\n            border: \"1px solid #f59e0b\", background: \"#fff7ed\",\n            height: \"38px\", boxSizing: \"border-box\",\n          }}\n        />\n        <button\n          onClick={() => { handleUserResponse(inputValue); setInputValue(\"\"); }}\n          style={btn(\"primary\")}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  };\n\n  // Edge cleanup when removed\n  const handleEdgesChange = (changes) => {\n    const removedIds = new Set(changes.filter((c) => c.type === \"remove\" && c.id).map((c) => c.id));\n    const removedEdges = manualEdges.filter((e) => removedIds.has(e.id));\n\n    onEdgesChange(changes);\n    if (!removedEdges.length) return;\n\n    const updatedNodes = nodes.map((n) => {\n      let data = { ...n.data };\n      let mutated = false;\n\n      for (const e of removedEdges) {\n        if (e.source !== n.id) continue;\n\n        if ((data.type === \"choice\" || data.type === \"multi_choice\") && data.options) {\n          if (e.label && data.options[e.label] === e.target) {\n            const opts = { ...data.options };\n            delete opts[e.label];\n            data.options = opts;\n            mutated = true;\n          } else {\n            const opts = { ...data.options };\n            for (const [k, v] of Object.entries(opts)) {\n              if (v === e.target) delete opts[k];\n            }\n            if (Object.keys(opts).length !== Object.keys(data.options).length) {\n              data.options = opts;\n              mutated = true;\n            }\n          }\n        } else if (data.next === e.target) {\n          data.next = \"\";\n          mutated = true;\n        }\n      }\n\n      return mutated ? { ...n, data } : n;\n    });\n\n    setNodes(updatedNodes);\n    const remainingEdges = manualEdges.filter((e) => !removedIds.has(e.id));\n    pushToHistory(updatedNodes, remainingEdges);\n  };\n// App.js — PART 3/3  (finish)\n\n  // whether the selected item in the dropdown is the active (loaded) one\n  const activeSelected = Boolean(selectedFlowId && selectedFlowId === activeFlowIdState);\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\", overflow: \"hidden\", overscrollBehavior: \"contain\" }}>\n      {/* Left workspace */}\n      <div style={{ flex: 1, position: \"relative\", overflow: \"hidden\" }}>\n        {/* Header (2 rows) */}\n        <div\n          style={{\n            position: \"absolute\", top: 0, left: 0, right: 0,\n            padding: \"8px 12px\",\n            background: \"#ffffffdd\", backdropFilter: \"blur(6px)\",\n            borderBottom: \"1px solid #e5e7eb\", zIndex: 12, boxSizing: \"border-box\",\n          }}\n        >\n          {/* Row 1: title + switcher */}\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", marginBottom: 6 }}>\n            {/* Title chip — light grey, shiny border, stronger shadow */}\n            <div\n              style={{\n                display: \"inline-flex\",\n                alignItems: \"center\",\n                padding: \"10px 16px\",\n                background: \"#f3f4f6\",\n                borderRadius: 12,\n                border: \"1px solid #cbd5e1\",\n                boxShadow:\n                  \"0 14px 22px rgba(2,6,23,0.18), 0 2px 0 rgba(255,255,255,0.65) inset\",\n              }}\n            >\n              <div\n                style={{\n                  fontWeight: 800,\n                  fontSize: 16,\n                  color: \"#334155\",\n                  letterSpacing: 0.2,\n                }}\n              >\n                FlowChat Designer: A No-Code AI Chatbot Builder\n              </div>\n            </div>\n\n            {/* Flow switcher (right) */}\n            <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\n              <select\n                value={selectedFlowId || \"\"}\n                onChange={(e) => setSelectedFlowId(e.target.value)}\n                style={{\n                  height: 30, padding: \"0 10px\", borderRadius: 8,\n                  border: `1px solid ${activeSelected ? \"#16a34a\" : \"#e5e7eb\"}`,\n                  background: \"#fff\", outline: \"none\",\n                }}\n              >\n                {flowsMeta.length === 0 && <option value=\"\">No flows</option>}\n                {flowsMeta.map((f) => (\n                  <option key={f.id} value={f.id}>{f.name}</option>\n                ))}\n              </select>\n\n              {selectedFlowId && (\n                <span\n                  style={{\n                    padding: \"2px 8px\",\n                    height: 26,\n                    display: \"inline-flex\",\n                    alignItems: \"center\",\n                    borderRadius: 999,\n                    border: `1px solid ${activeSelected ? \"#16a34a22\" : \"#6b728022\"}`,\n                    background: activeSelected ? \"#16a34a11\" : \"#6b728011\",\n                    color: activeSelected ? \"#16a34a\" : \"#6b7280\",\n                    fontWeight: 600,\n                    fontSize: 12,\n                  }}\n                >\n                  {activeSelected ? \"Active\" : \"Not loaded\"}\n                </span>\n              )}\n\n              <button\n                style={btn(\"primary\")}\n                disabled={!selectedFlowId || activeSelected}\n                onClick={() => selectedFlowId && loadFlowById(selectedFlowId)}\n              >\n                {activeSelected ? \"Loaded\" : \"Load\"}\n              </button>\n              <button style={btn(\"secondary\")} onClick={() => selectedFlowId && renameFlowById(selectedFlowId)}>\n                Rename\n              </button>\n              <button style={btn(\"danger\")} onClick={() => selectedFlowId && deleteFlowById(selectedFlowId)}>\n                Delete\n              </button>\n            </div>\n          </div>\n\n          {/* Row 2: actions + undo/redo icons */}\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n            <div style={{ display: \"flex\", gap: 8, alignItems: \"center\", flexWrap: \"wrap\" }}>\n              <button\n                style={btn(\"primary\")}\n                onClick={() => {\n                  const newId = nodeCounter.toString();\n                  nodeCounter++;\n                  const position = selectedNodeId\n                    ? {\n                        x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n                        y: nodes.find((n) => n.id === selectedNodeId).position.y + 50,\n                      }\n                    : { x: Math.random() * 400, y: Math.random() * 400 };\n                  const newNode = {\n                    id: newId,\n                    data: { message: `This is node ${newId}`, type: \"choice\", options: {}, capture: \"\", next: \"\" },\n                    position, type: \"default\",\n                  };\n                  const updatedNodes = [...nodes, newNode];\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n              >\n                Add Node\n              </button>\n\n              <button\n                style={btn(\"secondary\")}\n                onClick={() => {\n                  const blob = new Blob([JSON.stringify(getExportJSON(), null, 2)], { type: \"application/json\" });\n                  const url = URL.createObjectURL(blob);\n                  const link = document.createElement(\"a\");\n                  link.href = url; link.download = \"conversation_data.json\";\n                  document.body.appendChild(link); link.click(); document.body.removeChild(link);\n                }}\n              >\n                Export JSON\n              </button>\n\n              <button\n                style={btn(\"danger\")}\n                onClick={() => {\n                  if (!selectedNodeId) return;\n                  const deletedId = selectedNodeId;\n\n                  const updatedNodesBase = nodes.filter((n) => n.id !== deletedId);\n                  const updatedEdges = manualEdges.filter(\n                    (e) => e.source !== deletedId && e.target !== deletedId\n                  );\n\n                  const updatedNodes = updatedNodesBase.map((n) => {\n                    const data = { ...n.data };\n                    let mutated = false;\n\n                    if (data.next === deletedId) { data.next = \"\"; mutated = true; }\n                    if (data.options && Object.keys(data.options).length) {\n                      const opts = { ...data.options };\n                      for (const [k, v] of Object.entries(opts)) { if (v === deletedId) delete opts[k]; }\n                      if (Object.keys(opts).length !== Object.keys(data.options).length) {\n                        data.options = opts; mutated = true;\n                      }\n                    }\n                    return mutated ? { ...n, data } : n;\n                  });\n\n                  setNodes(updatedNodes);\n                  setEdges(updatedEdges);\n                  setSelectedNodeId(null);\n                  pushToHistory(updatedNodes, updatedEdges);\n                }}\n              >\n                Delete Node\n              </button>\n\n              <button style={btn(\"success\")} onClick={submitFlow}>Submit Flow</button>\n              <button style={btn(\"primary\")} onClick={saveCurrentFlow}>Save Flow</button>\n              <button style={btn(\"secondary\")} onClick={createNewFlow}>New Flow</button>\n            </div>\n\n            <div style={{ display: \"flex\", gap: 12, alignItems: \"flex-end\" }}>\n              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                <span style={{ fontSize: 11, color: \"#64748b\", marginBottom: 4 }}>Undo</span>\n                <button aria-label=\"Undo\" title=\"Undo\" style={iconBtn(\"neutral\")} onClick={undo}>↺</button>\n              </div>\n              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                <span style={{ fontSize: 11, color: \"#64748b\", marginBottom: 4 }}>Redo</span>\n                <button aria-label=\"Redo\" title=\"Redo\" style={iconBtn(\"neutral\")} onClick={redo}>↻</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Inspector column (push below header) */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: 120,\n            left: 10,\n            bottom: 10,\n            width: 350,\n            boxSizing: \"border-box\",\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            paddingRight: 28,\n            paddingLeft: 4,\n            scrollbarGutter: \"stable both-edges\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 12,\n            zIndex: 11,\n          }}\n        >\n          <PromptEditor\n            promptSettings={promptSettings}\n            setPromptSettings={setPromptSettings}\n            containerStyle={cardStyle}\n          />\n\n          {selectedNode && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Node: {selectedNode.id}</h4>\n              <label>Message:</label>\n              <textarea\n                value={selectedNode.data.message}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, message: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\", height: 60 }}\n              />\n              <label>Type:</label>\n              <select\n                value={selectedNode.data.type}\n                onChange={(e) => {\n                  const newType = e.target.value;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id !== selectedNodeId) return node;\n                    const nd = { ...node, data: { ...node.data, type: newType } };\n                    if (newType !== \"choice\" && newType !== \"multi_choice\") nd.data.options = {};\n                    return nd;\n                  });\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              >\n                <option value=\"choice\">choice</option>\n                <option value=\"input\">input</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n              <label>Capture Field:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.capture}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, capture: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n              <label>Next Node ID:</label>\n              <input\n                type=\"text\"\n                value={selectedNode.data.next}\n                onChange={(e) => {\n                  const updatedNodes = nodes.map((node) =>\n                    node.id === selectedNodeId\n                      ? { ...node, data: { ...node.data, next: e.target.value } }\n                      : node\n                  );\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, manualEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n\n          {selectedEdge && (\n            <div style={cardStyle}>\n              <h4 style={{ marginTop: 0 }}>Editing Edge</h4>\n              <label>Option Label:</label>\n              <input\n                type=\"text\"\n                value={selectedEdge.label}\n                onChange={(e) => {\n                  const newLabel = e.target.value;\n                  const updatedEdges = manualEdges.map((edge) =>\n                    edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n                  );\n                  const sourceId = selectedEdge.source;\n                  const targetId = selectedEdge.target;\n                  const updatedNodes = nodes.map((node) => {\n                    if (node.id === sourceId) {\n                      const updated = { ...node };\n                      if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                        const newOptions = { ...updated.data.options };\n                        delete newOptions[selectedEdge.label];\n                        newOptions[newLabel] = targetId;\n                        updated.data.options = newOptions;\n                      } else {\n                        updated.data.next = targetId;\n                      }\n                      return updated;\n                    }\n                    return node;\n                  });\n                  setEdges(updatedEdges);\n                  setNodes(updatedNodes);\n                  pushToHistory(updatedNodes, updatedEdges);\n                }}\n                style={{ width: \"100%\", boxSizing: \"border-box\" }}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Flow canvas */}\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type),\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={handleEdgesChange}\n          onConnect={(params) => {\n            const sourceNode = nodes.find(n => n.id === params.source);\n            let label = \"\";\n            if (sourceNode && (sourceNode.data.type === \"choice\" || sourceNode.data.type === \"multi_choice\")) {\n              label = window.prompt(\"Enter option key for this connection:\", \"\") || \"\";\n              if (!label) return;\n            }\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge(\n              { ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label },\n              manualEdges\n            );\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={(_, node) => { setSelectedNodeId(node.id); setSelectedEdgeId(null); }}\n          onEdgeClick={(_, edge) => { setSelectedEdgeId(edge.id); setSelectedNodeId(null); }}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel */}\n      <div\n        style={{\n          width: 320, margin: 10, padding: 12,\n          background: \"#fff7ed\", border: \"1px solid #f59e0b\",\n          borderRadius: 10, boxShadow: \"0 2px 6px rgba(0,0,0,0.08)\",\n          display: \"flex\", flexDirection: \"column\",\n          height: \"calc(100vh - 20px)\", boxSizing: \"border-box\", overflow: \"hidden\",\n        }}\n      >\n        <div style={{ fontWeight: \"bold\", marginBottom: 8, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", flexShrink: 0 }}>\n          <span>Chat Assistant</span>\n          {chatbotReady && (\n            <button\n              onClick={() => {\n                const textContent = chatHistory\n                  .map((entry) => `${entry.sender === \"user\" ? \"You\" : \"MindPeace\"}: ${entry.message}`)\n                  .join(\"\\n\\n\");\n                const blob = new Blob([textContent], { type: \"text/plain\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url; link.download = \"chat_history.txt\";\n                document.body.appendChild(link); link.click(); document.body.removeChild(link);\n              }}\n              style={btn(\"secondary\")}\n            >\n              Export\n            </button>\n          )}\n        </div>\n\n        <div style={{ flex: 1, overflowY: \"auto\", overflowX: \"hidden\", paddingRight: 6, paddingLeft: 2, paddingTop: 2, background: \"transparent\", borderRadius: 8 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\n              {chatHistory.map((entry, index) => (\n                <div\n                  key={index}\n                  style={{\n                    alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                    background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#fde68a\",\n                    padding: 8, borderRadius: 6, maxWidth: \"90%\", boxSizing: \"border-box\", overflowWrap: \"anywhere\",\n                  }}\n                >\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div style={{ opacity: 0.8 }}>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n\n        {chatbotReady && (\n          <div style={{ flexShrink: 0, paddingTop: 8, background: \"transparent\" }}>\n            {renderChatInput()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} // <-- closes App component\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}