{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isChatActive, setIsChatActive] = useState(false);\n  const [chatError, setChatError] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const importJSON = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    try {\n      const text = await file.text();\n      const json = JSON.parse(text);\n      if (!json.settings || !json.nodes) {\n        setChatError(\"Invalid JSON format.\");\n        setIsChatActive(false);\n        return;\n      }\n      setChatMessages([]);\n      setIsChatActive(true);\n      setChatError(\"\");\n      alert(\"Valid flow submitted! MindPeace Chat activated.\");\n    } catch (err) {\n      setChatError(\"Invalid JSON. Could not parse.\");\n      setIsChatActive(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportJSON,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            background: \"#ddd\",\n            padding: \"6px 12px\",\n            borderRadius: 4,\n            cursor: \"pointer\"\n          },\n          children: [\"Import JSON\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: importJSON,\n            accept: \".json\",\n            style: {\n              display: \"none\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"300px\",\n        background: \"#f8fafc\",\n        borderLeft: \"1px solid #ddd\",\n        padding: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), !isChatActive && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"#777\"\n        },\n        children: chatError || \"Submit valid flow to activate chatbot.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 27\n      }, this), isChatActive && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83E\\uDDE0 Chat UI activated \\u2014 integrate your chat screen here.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1oDN7MMaZvyjp+EtlKU0Xxiwa6Q=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatMessages","setChatMessages","isChatActive","setIsChatActive","chatError","setChatError","history","edges","historyIndex","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","selectedNode","find","n","selectedEdge","e","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","addNode","newId","toString","Math","random","newNode","deleteNode","filter","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","importJSON","event","file","files","text","json","parse","alert","err","display","height","children","flex","textAlign","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","top","left","zIndex","gap","onClick","cursor","onChange","accept","fitView","edgeLabelMode","width","borderLeft","color","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isChatActive, setIsChatActive] = useState(false);\n  const [chatError, setChatError] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const importJSON = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    try {\n      const text = await file.text();\n      const json = JSON.parse(text);\n\n      if (!json.settings || !json.nodes) {\n        setChatError(\"Invalid JSON format.\");\n        setIsChatActive(false);\n        return;\n      }\n\n      setChatMessages([]);\n      setIsChatActive(true);\n      setChatError(\"\");\n\n      alert(\"Valid flow submitted! MindPeace Chat activated.\");\n    } catch (err) {\n      setChatError(\"Invalid JSON. Could not parse.\");\n      setIsChatActive(false);\n    }\n  };\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\" }}>\n      {/* Left React Flow Editor */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <div\n          style={{\n            textAlign: \"center\",\n            padding: \"12px\",\n            background: \"#f1f5f9\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\",\n            fontFamily: \"Segoe UI, sans-serif\"\n          }}\n        >\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button onClick={addNode}>Add Node</button>\n          <button onClick={exportJSON}>Export JSON</button>\n          <button onClick={deleteNode}>Delete Node</button>\n          <label style={{ background: \"#ddd\", padding: \"6px 12px\", borderRadius: 4, cursor: \"pointer\" }}>\n            Import JSON\n            <input type=\"file\" onChange={importJSON} accept=\".json\" style={{ display: \"none\" }} />\n          </label>\n        </div>\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({\n            ...n,\n            data: { ...n.data, label: n.data.message },\n            style: getNodeStyle(n.data.type)\n          }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat UI */}\n      <div style={{ width: \"300px\", background: \"#f8fafc\", borderLeft: \"1px solid #ddd\", padding: \"10px\" }}>\n        <h3>MindPeace Chat</h3>\n        {!isChatActive && <p style={{ color: \"#777\" }}>{chatError || \"Submit valid flow to activate chatbot.\"}</p>}\n        {isChatActive && (\n          <div>\n            <p>🧠 Chat UI activated — integrate your chat screen here.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACrE,OAAOC,SAAS,IACdC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,OAAO,EACPC,UAAU,QACL,WAAW;AAClB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE;IACJC,OAAO,EACL,oHAAoH;IACtHC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE,CAAC,CAAC;IACXC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE;EACR,CAAC;EACDC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC;EAC1BN,IAAI,EAAE;AACR,CAAC,CACF;AAED,MAAMO,YAAY,GAAG,EAAE;AACvB,IAAIC,WAAW,GAAG,CAAC;AAEnB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGvB,aAAa,CAACM,YAAY,CAAC;EACpE,MAAM,CAACkB,WAAW,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGzB,aAAa,CAACgB,YAAY,CAAC;EAC1E,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACoC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACsC,YAAY,EAAEC,eAAe,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACwC,YAAY,EAAEC,eAAe,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC0C,SAAS,EAAEC,YAAY,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAM4C,OAAO,GAAG1C,MAAM,CAAC,CAAC;IAAE0B,KAAK,EAAEf,YAAY;IAAEgC,KAAK,EAAErB;EAAa,CAAC,CAAC,CAAC;EACtE,MAAMsB,YAAY,GAAG5C,MAAM,CAAC,CAAC,CAAC;EAE9B,MAAM6C,aAAa,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC5C,MAAMC,YAAY,GAAG;MAAEtB,KAAK,EAAEoB,QAAQ;MAAEH,KAAK,EAAEI;IAAS,CAAC;IACzD,MAAME,UAAU,GAAGP,OAAO,CAACQ,OAAO,CAACC,KAAK,CAAC,CAAC,EAAEP,YAAY,CAACM,OAAO,GAAG,CAAC,CAAC;IACrED,UAAU,CAACG,IAAI,CAACJ,YAAY,CAAC;IAC7BN,OAAO,CAACQ,OAAO,GAAGD,UAAU;IAC5BL,YAAY,CAACM,OAAO,EAAE;EACxB,CAAC;EAED,MAAMG,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIT,YAAY,CAACM,OAAO,GAAG,CAAC,EAAE;MAC5BN,YAAY,CAACM,OAAO,EAAE;MACtB,MAAM;QAAExB,KAAK;QAAEiB;MAAM,CAAC,GAAGD,OAAO,CAACQ,OAAO,CAACN,YAAY,CAACM,OAAO,CAAC;MAC9DvB,QAAQ,CAACD,KAAK,CAAC;MACfI,QAAQ,CAACa,KAAK,CAAC;IACjB;EACF,CAAC;EAED,MAAMW,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIV,YAAY,CAACM,OAAO,GAAGR,OAAO,CAACQ,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;MACrDX,YAAY,CAACM,OAAO,EAAE;MACtB,MAAM;QAAExB,KAAK;QAAEiB;MAAM,CAAC,GAAGD,OAAO,CAACQ,OAAO,CAACN,YAAY,CAACM,OAAO,CAAC;MAC9DvB,QAAQ,CAACD,KAAK,CAAC;MACfI,QAAQ,CAACa,KAAK,CAAC;IACjB;EACF,CAAC;EAED,MAAMa,YAAY,GAAG9B,KAAK,CAAC+B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC9C,EAAE,KAAKoB,cAAc,CAAC;EAC/D,MAAM2B,YAAY,GAAG9B,WAAW,CAAC4B,IAAI,CAAEG,CAAC,IAAKA,CAAC,CAAChD,EAAE,KAAKsB,cAAc,CAAC;EAErE,MAAM2B,YAAY,GAAI9C,IAAI,IAAK;IAC7B,MAAM+C,SAAS,GAAG;MAChBC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,kBAAkB;MAC7BC,UAAU,EAAE,UAAU;MACtBC,QAAQ,EAAE,YAAY;MACtBC,UAAU,EAAE,sBAAsB;MAClCC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE;IACZ,CAAC;IACD,QAAQvD,IAAI;MACV,KAAK,QAAQ;QACX,OAAO;UAAE,GAAG+C,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,OAAO;QACV,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,cAAc;QACjB,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,KAAK;QACR,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E,KAAK,KAAK;QACR,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;MAC7E;QACE,OAAO;UAAE,GAAGV,SAAS;UAAES,UAAU,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAoB,CAAC;IAC/E;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAG1E,OAAO,CAAC,MAAM;IACvC,MAAM2E,mBAAmB,GAAG,IAAIC,GAAG,CAAC9C,WAAW,CAAC+C,GAAG,CAAEhB,CAAC,IAAK,GAAGA,CAAC,CAACiB,MAAM,KAAKjB,CAAC,CAACkB,MAAM,EAAE,CAAC,CAAC;IACvF,MAAMC,SAAS,GAAG,EAAE;IAEpB,KAAK,MAAMC,IAAI,IAAItD,KAAK,EAAE;MAAA,IAAAuD,UAAA;MACxB,MAAMH,MAAM,IAAAG,UAAA,GAAGD,IAAI,CAACnE,IAAI,cAAAoE,UAAA,uBAATA,UAAA,CAAW/D,IAAI;MAC9B,IAAI4D,MAAM,IAAI,CAACJ,mBAAmB,CAACQ,GAAG,CAAC,GAAGF,IAAI,CAACpE,EAAE,KAAKkE,MAAM,EAAE,CAAC,EAAE;QAC/DC,SAAS,CAAC3B,IAAI,CAAC;UACbxC,EAAE,EAAE,QAAQoE,IAAI,CAACpE,EAAE,IAAIkE,MAAM,EAAE;UAC/BD,MAAM,EAAEG,IAAI,CAACpE,EAAE;UACfkE,MAAM;UACNK,QAAQ,EAAE,KAAK;UACfpE,IAAI,EAAE,SAAS;UACfqE,KAAK,EAAE;YAAEC,eAAe,EAAE,KAAK;YAAEC,MAAM,EAAE;UAAO,CAAC;UACjDC,SAAS,EAAE;YAAExE,IAAI,EAAEP,UAAU,CAACgF;UAAY,CAAC;UAC3CC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;IACF;IACA,OAAOV,SAAS;EAClB,CAAC,EAAE,CAACrD,KAAK,EAAEG,WAAW,CAAC,CAAC;EAExB,MAAM6D,QAAQ,GAAG,CAAC,GAAG7D,WAAW,EAAE,GAAG4C,kBAAkB,CAAC;EAExD,MAAMkB,SAAS,GAAG9F,WAAW,CAC1B+F,MAAM,IAAK;IACV,MAAMH,KAAK,GAAGI,MAAM,CAAC,+DAA+D,EAAE,EAAE,CAAC;IACzF,IAAI,CAACJ,KAAK,EAAE;IAEZ,MAAMK,MAAM,GAAG,IAAIF,MAAM,CAACf,MAAM,IAAIe,MAAM,CAACd,MAAM,EAAE;IACnD,MAAMiB,YAAY,GAAGxF,OAAO,CAC1B;MACE,GAAGqF,MAAM;MACThF,EAAE,EAAEkF,MAAM;MACVP,SAAS,EAAE;QAAExE,IAAI,EAAEP,UAAU,CAACgF;MAAY,CAAC;MAC3CC;IACF,CAAC,EACD5D,WACF,CAAC;IAED,MAAMmE,YAAY,GAAGtE,KAAK,CAACkD,GAAG,CAAEI,IAAI,IAAK;MACvC,IAAIA,IAAI,CAACpE,EAAE,KAAKgF,MAAM,CAACf,MAAM,EAAE;QAC7B,MAAMoB,OAAO,GAAG;UAAE,GAAGjB;QAAK,CAAC;QAC3B,IAAIA,IAAI,CAACnE,IAAI,CAACE,IAAI,KAAK,QAAQ,IAAIiE,IAAI,CAACnE,IAAI,CAACE,IAAI,KAAK,cAAc,EAAE;UACpEkF,OAAO,CAACpF,IAAI,CAACG,OAAO,GAAG;YAAE,GAAGiF,OAAO,CAACpF,IAAI,CAACG,OAAO;YAAE,CAACyE,KAAK,GAAGG,MAAM,CAACd;UAAO,CAAC;QAC5E,CAAC,MAAM;UACLmB,OAAO,CAACpF,IAAI,CAACK,IAAI,GAAG0E,MAAM,CAACd,MAAM;QACnC;QACA,OAAOmB,OAAO;MAChB;MACA,OAAOjB,IAAI;IACb,CAAC,CAAC;IAEFlD,QAAQ,CAACiE,YAAY,CAAC;IACtBpE,QAAQ,CAACqE,YAAY,CAAC;IACtBnD,aAAa,CAACmD,YAAY,EAAED,YAAY,CAAC;EAC3C,CAAC,EACD,CAACrE,KAAK,EAAEG,WAAW,EAAEC,QAAQ,EAAEH,QAAQ,CACzC,CAAC;EAED,MAAMuE,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,KAAK,GAAG5E,WAAW,CAAC6E,QAAQ,CAAC,CAAC;IACpC7E,WAAW,EAAE;IAEb,MAAMJ,QAAQ,GAAGa,cAAc,GAC3B;MACEZ,CAAC,EAAEM,KAAK,CAAC+B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC9C,EAAE,KAAKoB,cAAc,CAAC,CAACb,QAAQ,CAACC,CAAC,GAAG,GAAG;MAC9DC,CAAC,EAAEK,KAAK,CAAC+B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC9C,EAAE,KAAKoB,cAAc,CAAC,CAACb,QAAQ,CAACE,CAAC,GAAG;IAC7D,CAAC,GACD;MAAED,CAAC,EAAEiF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAAEjF,CAAC,EAAEgF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;IAAI,CAAC;IAEtD,MAAMC,OAAO,GAAG;MACd3F,EAAE,EAAEuF,KAAK;MACTtF,IAAI,EAAE;QACJC,OAAO,EAAE,gBAAgBqF,KAAK,EAAE;QAChCpF,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,CAAC,CAAC;QACXC,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE;MACR,CAAC;MACDC,QAAQ;MACRJ,IAAI,EAAE;IACR,CAAC;IAED,MAAMiF,YAAY,GAAG,CAAC,GAAGtE,KAAK,EAAE6E,OAAO,CAAC;IACxC5E,QAAQ,CAACqE,YAAY,CAAC;IACtBnD,aAAa,CAACmD,YAAY,EAAEnE,WAAW,CAAC;EAC1C,CAAC;EAED,MAAM2E,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI,CAACxE,cAAc,EAAE;IACrB,MAAMgE,YAAY,GAAGtE,KAAK,CAAC+E,MAAM,CAAE/C,CAAC,IAAKA,CAAC,CAAC9C,EAAE,KAAKoB,cAAc,CAAC;IACjE,MAAM+D,YAAY,GAAGlE,WAAW,CAAC4E,MAAM,CACpC7C,CAAC,IAAKA,CAAC,CAACiB,MAAM,KAAK7C,cAAc,IAAI4B,CAAC,CAACkB,MAAM,KAAK9C,cACrD,CAAC;IACDL,QAAQ,CAACqE,YAAY,CAAC;IACtBlE,QAAQ,CAACiE,YAAY,CAAC;IACtB9D,iBAAiB,CAAC,IAAI,CAAC;IACvBY,aAAa,CAACmD,YAAY,EAAED,YAAY,CAAC;EAC3C,CAAC;EAED,MAAMW,eAAe,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACxC,MAAMZ,YAAY,GAAGtE,KAAK,CAACkD,GAAG,CAAEI,IAAI,IAClCA,IAAI,CAACpE,EAAE,KAAKoB,cAAc,GACtB;MAAE,GAAGgD,IAAI;MAAEnE,IAAI,EAAE;QAAE,GAAGmE,IAAI,CAACnE,IAAI;QAAE,CAAC8F,KAAK,GAAGC;MAAM;IAAE,CAAC,GACnD5B,IACN,CAAC;IACDrD,QAAQ,CAACqE,YAAY,CAAC;IACtBnD,aAAa,CAACmD,YAAY,EAAEnE,WAAW,CAAC;EAC1C,CAAC;EAED,MAAMgF,eAAe,GAAIC,QAAQ,IAAK;IACpC,IAAI,CAACnD,YAAY,EAAE;IAEnB,MAAMoD,QAAQ,GAAGpD,YAAY,CAAC8B,KAAK;IACnC,MAAMuB,QAAQ,GAAGrD,YAAY,CAACkB,MAAM;IACpC,MAAMoC,QAAQ,GAAGtD,YAAY,CAACmB,MAAM;IAEpC,MAAMiB,YAAY,GAAGlE,WAAW,CAAC+C,GAAG,CAAEsC,IAAI,IACxCA,IAAI,CAACtG,EAAE,KAAK+C,YAAY,CAAC/C,EAAE,GAAG;MAAE,GAAGsG,IAAI;MAAEzB,KAAK,EAAEqB;IAAS,CAAC,GAAGI,IAC/D,CAAC;IAED,MAAMlB,YAAY,GAAGtE,KAAK,CAACkD,GAAG,CAAEI,IAAI,IAAK;MACvC,IAAIA,IAAI,CAACpE,EAAE,KAAKoG,QAAQ,EAAE;QACxB,MAAMf,OAAO,GAAG;UAAE,GAAGjB;QAAK,CAAC;QAC3B,IAAIiB,OAAO,CAACpF,IAAI,CAACE,IAAI,KAAK,QAAQ,IAAIkF,OAAO,CAACpF,IAAI,CAACE,IAAI,KAAK,cAAc,EAAE;UAC1E,MAAMoG,UAAU,GAAG;YAAE,GAAGlB,OAAO,CAACpF,IAAI,CAACG;UAAQ,CAAC;UAC9C,OAAOmG,UAAU,CAACJ,QAAQ,CAAC;UAC3BI,UAAU,CAACL,QAAQ,CAAC,GAAGG,QAAQ;UAC/BhB,OAAO,CAACpF,IAAI,CAACG,OAAO,GAAGmG,UAAU;QACnC,CAAC,MAAM;UACLlB,OAAO,CAACpF,IAAI,CAACK,IAAI,GAAG+F,QAAQ;QAC9B;QACA,OAAOhB,OAAO;MAChB;MACA,OAAOjB,IAAI;IACb,CAAC,CAAC;IAEFlD,QAAQ,CAACiE,YAAY,CAAC;IACtBpE,QAAQ,CAACqE,YAAY,CAAC;IACtBnD,aAAa,CAACmD,YAAY,EAAED,YAAY,CAAC;EAC3C,CAAC;EAED,MAAMqB,WAAW,GAAGA,CAACC,CAAC,EAAErC,IAAI,KAAK;IAC/B/C,iBAAiB,CAAC+C,IAAI,CAACpE,EAAE,CAAC;IAC1BuB,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAMmF,WAAW,GAAGA,CAACD,CAAC,EAAEH,IAAI,KAAK;IAC/B/E,iBAAiB,CAAC+E,IAAI,CAACtG,EAAE,CAAC;IAC1BqB,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAMsF,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,MAAM,GAAG;MACbC,QAAQ,EAAE;QACRC,aAAa,EACX,oMAAoM;QACtMC,SAAS,EAAE;MACb,CAAC;MACDjG,KAAK,EAAE,CAAC;IACV,CAAC;IAEDA,KAAK,CAACkG,OAAO,CAAE5C,IAAI,IAAK;MACtB,MAAM;QAAEpE,EAAE;QAAEC;MAAK,CAAC,GAAGmE,IAAI;MACzB,MAAM;QAAElE,OAAO;QAAEC,IAAI;QAAEC,OAAO;QAAEC,OAAO;QAAEC;MAAK,CAAC,GAAGL,IAAI;MACtD,MAAMgH,OAAO,GAAG;QAAE/G,OAAO;QAAEC;MAAK,CAAC;MACjC,IAAIC,OAAO,IAAI8G,MAAM,CAACC,IAAI,CAAC/G,OAAO,CAAC,CAACuC,MAAM,GAAG,CAAC,EAAEsE,OAAO,CAAC7G,OAAO,GAAGA,OAAO;MACzE,IAAIC,OAAO,EAAE4G,OAAO,CAAC5G,OAAO,GAAGA,OAAO;MACtC,IAAIC,IAAI,EAAE2G,OAAO,CAAC3G,IAAI,GAAGA,IAAI;MAC7BsG,MAAM,CAAC9F,KAAK,CAACd,EAAE,CAAC,GAAGiH,OAAO;IAC5B,CAAC,CAAC;IAEF,MAAMG,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACX,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;MACvDzG,IAAI,EAAE;IACR,CAAC,CAAC;IACF,MAAMqH,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;IACrC,MAAMO,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;IACfG,IAAI,CAACI,QAAQ,GAAG,wBAAwB;IACxCH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;EACjC,CAAC;EAED,MAAMS,UAAU,GAAG,MAAOC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACnE,MAAM,CAACqE,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI,CAACD,IAAI,EAAE;IAEX,IAAI;MACF,MAAME,IAAI,GAAG,MAAMF,IAAI,CAACE,IAAI,CAAC,CAAC;MAC9B,MAAMC,IAAI,GAAGnB,IAAI,CAACoB,KAAK,CAACF,IAAI,CAAC;MAE7B,IAAI,CAACC,IAAI,CAAC5B,QAAQ,IAAI,CAAC4B,IAAI,CAAC3H,KAAK,EAAE;QACjCe,YAAY,CAAC,sBAAsB,CAAC;QACpCF,eAAe,CAAC,KAAK,CAAC;QACtB;MACF;MAEAF,eAAe,CAAC,EAAE,CAAC;MACnBE,eAAe,CAAC,IAAI,CAAC;MACrBE,YAAY,CAAC,EAAE,CAAC;MAEhB8G,KAAK,CAAC,iDAAiD,CAAC;IAC1D,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ/G,YAAY,CAAC,gCAAgC,CAAC;MAC9CF,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACE7B,OAAA;IAAK0E,KAAK,EAAE;MAAEqE,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBAE/CjJ,OAAA;MAAK0E,KAAK,EAAE;QAAEwE,IAAI,EAAE,CAAC;QAAEzI,QAAQ,EAAE;MAAW,CAAE;MAAAwI,QAAA,gBAC5CjJ,OAAA;QACE0E,KAAK,EAAE;UACLyE,SAAS,EAAE,QAAQ;UACnB7F,OAAO,EAAE,MAAM;UACfO,UAAU,EAAE,SAAS;UACrBuF,QAAQ,EAAE,MAAM;UAChBC,UAAU,EAAE,MAAM;UAClB3F,UAAU,EAAE;QACd,CAAE;QAAAuF,QAAA,EACH;MAED;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAENzJ,OAAA;QAAK0E,KAAK,EAAE;UAAEjE,QAAQ,EAAE,UAAU;UAAEiJ,GAAG,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE,EAAE;UAAEb,OAAO,EAAE,MAAM;UAAEc,GAAG,EAAE;QAAO,CAAE;QAAAZ,QAAA,gBAChGjJ,OAAA;UAAQ8J,OAAO,EAAEtE,OAAQ;UAAAyD,QAAA,EAAC;QAAQ;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC3CzJ,OAAA;UAAQ8J,OAAO,EAAEjD,UAAW;UAAAoC,QAAA,EAAC;QAAW;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjDzJ,OAAA;UAAQ8J,OAAO,EAAEhE,UAAW;UAAAmD,QAAA,EAAC;QAAW;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjDzJ,OAAA;UAAO0E,KAAK,EAAE;YAAEb,UAAU,EAAE,MAAM;YAAEP,OAAO,EAAE,UAAU;YAAED,YAAY,EAAE,CAAC;YAAE0G,MAAM,EAAE;UAAU,CAAE;UAAAd,QAAA,GAAC,aAE7F,eAAAjJ,OAAA;YAAOK,IAAI,EAAC,MAAM;YAAC2J,QAAQ,EAAE1B,UAAW;YAAC2B,MAAM,EAAC,OAAO;YAACvF,KAAK,EAAE;cAAEqE,OAAO,EAAE;YAAO;UAAE;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAENzJ,OAAA,CAACT,SAAS;QACRyB,KAAK,EAAEA,KAAK,CAACkD,GAAG,CAAElB,CAAC,KAAM;UACvB,GAAGA,CAAC;UACJ7C,IAAI,EAAE;YAAE,GAAG6C,CAAC,CAAC7C,IAAI;YAAE4E,KAAK,EAAE/B,CAAC,CAAC7C,IAAI,CAACC;UAAQ,CAAC;UAC1CsE,KAAK,EAAEvB,YAAY,CAACH,CAAC,CAAC7C,IAAI,CAACE,IAAI;QACjC,CAAC,CAAC,CAAE;QACJ4B,KAAK,EAAE+C,QAAS;QAChB9D,aAAa,EAAEA,aAAc;QAC7BG,aAAa,EAAEA,aAAc;QAC7B4D,SAAS,EAAEA,SAAU;QACrByB,WAAW,EAAEA,WAAY;QACzBE,WAAW,EAAEA,WAAY;QACzBsD,OAAO;QACPC,aAAa,EAAC,QAAQ;QAAAlB,QAAA,gBAEtBjJ,OAAA,CAACR,OAAO;UAAA8J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXzJ,OAAA,CAACP,QAAQ;UAAA6J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACZzJ,OAAA,CAACN,UAAU;UAAA4J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eAGNzJ,OAAA;MAAK0E,KAAK,EAAE;QAAE0F,KAAK,EAAE,OAAO;QAAEvG,UAAU,EAAE,SAAS;QAAEwG,UAAU,EAAE,gBAAgB;QAAE/G,OAAO,EAAE;MAAO,CAAE;MAAA2F,QAAA,gBACnGjJ,OAAA;QAAAiJ,QAAA,EAAI;MAAc;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACtB,CAAC7H,YAAY,iBAAI5B,OAAA;QAAG0E,KAAK,EAAE;UAAE4F,KAAK,EAAE;QAAO,CAAE;QAAArB,QAAA,EAAEnH,SAAS,IAAI;MAAwC;QAAAwH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACzG7H,YAAY,iBACX5B,OAAA;QAAAiJ,QAAA,eACEjJ,OAAA;UAAAiJ,QAAA,EAAG;QAAuD;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC1I,EAAA,CAlVuBD,GAAG;EAAA,QACgBnB,aAAa,EACPC,aAAa;AAAA;AAAA2K,EAAA,GAFtCzJ,GAAG;AAAA,IAAAyJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}