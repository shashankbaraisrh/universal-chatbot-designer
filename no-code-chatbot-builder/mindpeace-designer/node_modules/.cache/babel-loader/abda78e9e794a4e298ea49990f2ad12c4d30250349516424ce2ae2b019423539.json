{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType, ReactFlowProvider } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nfunction FlowEditor() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = edges.find(e => e.id === selectedEdgeId);\n  const autoEdges = useMemo(() => {\n    const connected = new Set(edges.map(e => `${e.source}->${e.target}`));\n    return nodes.flatMap(node => {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !connected.has(`${node.id}->${target}`)) {\n        return [{\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          label: \"next\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          }\n        }];\n      }\n      return [];\n    });\n  }, [nodes, edges]);\n  const allEdges = [...edges, ...autoEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      label,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = {\n      x: 100 + Math.random() * 400,\n      y: 100 + Math.random() * 300\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges(eds => eds.map(e => e.id === selectedEdge.id ? {\n      ...e,\n      label: newLabel\n    } : e));\n    setNodes(nds => nds.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const nodeObj = {\n        message: data.message,\n        type: data.type\n      };\n      if (data.options && Object.keys(data.options).length > 0) nodeObj.options = data.options;\n      if (data.capture) nodeObj.capture = data.capture;\n      if (data.next) nodeObj.next = data.next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen h-screen font-sans bg-gray-50\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      className: \"absolute top-4 left-4 z-10 bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700\",\n      children: \"\\u2795 Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportJSON,\n      className: \"absolute top-4 left-36 z-10 bg-green-600 text-white px-4 py-2 rounded shadow hover:bg-green-700\",\n      children: \"\\u2B07\\uFE0F Export JSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-20 left-4 z-10 bg-white p-4 w-80 rounded-xl shadow border border-gray-300 space-y-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold text-gray-800\",\n        children: [\"\\uD83D\\uDEE0\\uFE0F Editing Node \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"text-sm text-gray-600\",\n        children: \"Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: selectedNode.data.message,\n        onChange: e => updateNodeField(\"message\", e.target.value),\n        className: \"w-full p-2 border rounded\",\n        rows: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"text-sm text-gray-600\",\n        children: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedNode.data.type,\n        onChange: e => updateNodeField(\"type\", e.target.value),\n        className: \"w-full p-2 border rounded\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"choice\",\n          children: \"choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"multi_choice\",\n          children: \"multi_choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt\",\n          children: \"gpt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"end\",\n          children: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"text-sm text-gray-600\",\n        children: \"Capture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.capture,\n        onChange: e => updateNodeField(\"capture\", e.target.value),\n        className: \"w-full p-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"text-sm text-gray-600\",\n        children: \"Next Node ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.next,\n        onChange: e => updateNodeField(\"next\", e.target.value),\n        className: \"w-full p-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-20 left-4 z-10 bg-white p-4 w-80 rounded-xl shadow border border-gray-300 space-y-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold text-gray-800\",\n        children: \"\\u270F\\uFE0F Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"text-sm text-gray-600\",\n        children: \"Option Label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedEdge.label,\n        onChange: e => updateEdgeLabel(e.target.value),\n        className: \"w-full p-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data,\n          label: n.data.message\n        }\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowEditor, \"A3wuzoeJsasqwif0Y8yDzXXO6fE=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = FlowEditor;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(FlowEditor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"FlowEditor\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useCallback","useMemo","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","ReactFlowProvider","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","FlowEditor","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","selectedNode","find","n","selectedEdge","e","autoEdges","connected","Set","map","source","target","flatMap","node","_node$data","has","label","style","strokeDasharray","stroke","markerEnd","ArrowClosed","allEdges","onConnect","params","prompt","edgeId","eds","nds","updated","addNode","newId","toString","Math","random","newNode","onNodeClick","_","onEdgeClick","edge","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","newOptions","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","length","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","rows","fitView","edgeLabelMode","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useMemo, useState } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n  ReactFlowProvider\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nfunction FlowEditor() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = edges.find((e) => e.id === selectedEdgeId);\n\n  const autoEdges = useMemo(() => {\n    const connected = new Set(edges.map((e) => `${e.source}->${e.target}`));\n    return nodes.flatMap((node) => {\n      const target = node.data?.next;\n      if (target && !connected.has(`${node.id}->${target}`)) {\n        return [{\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          label: \"next\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed }\n        }];\n      }\n      return [];\n    });\n  }, [nodes, edges]);\n\n  const allEdges = [...edges, ...autoEdges];\n\n  const onConnect = useCallback((params) => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges((eds) =>\n      addEdge({ ...params, id: edgeId, label, markerEnd: { type: MarkerType.ArrowClosed } }, eds)\n    );\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  }, [setEdges, setNodes]);\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = {\n      x: 100 + Math.random() * 400,\n      y: 100 + Math.random() * 300\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) => node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n      )\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges((eds) =>\n      eds.map((e) => e.id === selectedEdge.id ? { ...e, label: newLabel } : e)\n    );\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === sourceId) {\n          const updated = { ...node };\n          if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = targetId;\n            updated.data.options = newOptions;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const nodeObj = {\n        message: data.message,\n        type: data.type\n      };\n      if (data.options && Object.keys(data.options).length > 0)\n        nodeObj.options = data.options;\n      if (data.capture) nodeObj.capture = data.capture;\n      if (data.next) nodeObj.next = data.next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"w-screen h-screen font-sans bg-gray-50\">\n      <button onClick={addNode} className=\"absolute top-4 left-4 z-10 bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700\">\n        ➕ Add Node\n      </button>\n      <button onClick={exportJSON} className=\"absolute top-4 left-36 z-10 bg-green-600 text-white px-4 py-2 rounded shadow hover:bg-green-700\">\n        ⬇️ Export JSON\n      </button>\n\n      {selectedNode && (\n        <div className=\"absolute top-20 left-4 z-10 bg-white p-4 w-80 rounded-xl shadow border border-gray-300 space-y-3\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">🛠️ Editing Node {selectedNode.id}</h3>\n          <label className=\"text-sm text-gray-600\">Message</label>\n          <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} className=\"w-full p-2 border rounded\" rows={3} />\n          <label className=\"text-sm text-gray-600\">Type</label>\n          <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} className=\"w-full p-2 border rounded\">\n            <option value=\"choice\">choice</option>\n            <option value=\"input\">input</option>\n            <option value=\"multi_choice\">multi_choice</option>\n            <option value=\"gpt\">gpt</option>\n            <option value=\"end\">end</option>\n          </select>\n          <label className=\"text-sm text-gray-600\">Capture</label>\n          <input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} className=\"w-full p-2 border rounded\" />\n          <label className=\"text-sm text-gray-600\">Next Node ID</label>\n          <input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} className=\"w-full p-2 border rounded\" />\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div className=\"absolute top-20 left-4 z-10 bg-white p-4 w-80 rounded-xl shadow border border-gray-300 space-y-3\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">✏️ Editing Edge</h3>\n          <label className=\"text-sm text-gray-600\">Option Label</label>\n          <input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} className=\"w-full p-2 border rounded\" />\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message } }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ReactFlowProvider>\n      <FlowEditor />\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}