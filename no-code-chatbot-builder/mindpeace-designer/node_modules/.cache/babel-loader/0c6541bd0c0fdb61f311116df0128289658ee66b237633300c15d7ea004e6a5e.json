{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport ReactFlow, { ReactFlowProvider, addEdge, applyNodeChanges, applyEdgeChanges, Background, Controls, MiniMap } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeColors = {\n  message: \"#4F46E5\",\n  choice: \"#2563EB\",\n  multi_choice: \"#059669\",\n  capture: \"#D97706\",\n  gpt: \"#9333EA\",\n  end: \"#EF4444\"\n};\nlet id = 0;\nconst getId = () => `${++id}`;\nexport default function App() {\n  _s();\n  var _nodes$find, _nodes$find2, _nodes$find3, _edges$find2;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [chatActive, setChatActive] = useState(false);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [multiSelections, setMultiSelections] = useState([]);\n  const [systemPrompt, setSystemPrompt] = useState(\"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\");\n  const [gptModel, setGptModel] = useState(\"gpt-3.5-turbo\");\n  const onNodesChange = useCallback(changes => {\n    pushToHistory();\n    setNodes(nds => applyNodeChanges(changes, nds));\n  }, [nodes]);\n  const onEdgesChange = useCallback(changes => {\n    pushToHistory();\n    setEdges(eds => applyEdgeChanges(changes, eds));\n  }, [edges]);\n  const onConnect = useCallback(params => {\n    pushToHistory();\n    setEdges(eds => addEdge({\n      ...params,\n      label: \"next\"\n    }, eds));\n  }, [edges]);\n  const pushToHistory = () => {\n    setHistory(prev => [...prev, {\n      nodes,\n      edges\n    }]);\n    setRedoStack([]);\n  };\n  const undo = () => {\n    if (history.length === 0) return;\n    const prevState = history[history.length - 1];\n    setRedoStack(prev => [...prev, {\n      nodes,\n      edges\n    }]);\n    setNodes(prevState.nodes);\n    setEdges(prevState.edges);\n    setHistory(prev => prev.slice(0, -1));\n  };\n  const redo = () => {\n    if (redoStack.length === 0) return;\n    const nextState = redoStack[redoStack.length - 1];\n    setHistory(prev => [...prev, {\n      nodes,\n      edges\n    }]);\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    setRedoStack(prev => prev.slice(0, -1));\n  };\n  const addNode = () => {\n    const newNode = {\n      id: getId(),\n      type: \"default\",\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label: \"\",\n        type: \"message\",\n        capture: \"\"\n      },\n      style: {\n        backgroundColor: nodeColors[\"message\"],\n        color: \"white\",\n        padding: 10,\n        borderRadius: 20,\n        boxShadow: \"0 4px 8px rgba(0,0,0,0.2)\",\n        width: 300\n      }\n    };\n    pushToHistory();\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    pushToHistory();\n    setNodes(nds => nds.filter(node => node.id !== selectedNodeId));\n    setEdges(eds => eds.filter(edge => edge.source !== selectedNodeId && edge.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    pushToHistory();\n    setNodes(nds => nds.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      },\n      style: {\n        ...node.style,\n        backgroundColor: nodeColors[value] || node.style.backgroundColor\n      }\n    } : node));\n  };\n  const updateEdgeField = value => {\n    pushToHistory();\n    setEdges(eds => eds.map(edge => edge.id === selectedEdgeId ? {\n      ...edge,\n      label: value\n    } : edge));\n  };\n  const exportToJson = () => {\n    const json = {\n      settings: {\n        system_prompt: systemPrompt,\n        gpt_model: gptModel\n      },\n      nodes: nodes.map(node => {\n        var _edges$find;\n        return {\n          id: node.id,\n          message: node.data.label,\n          type: node.data.type,\n          capture: node.data.capture || \"\",\n          options: edges.filter(e => e.source === node.id && e.label !== \"next\").map(e => ({\n            label: e.label,\n            next: e.target\n          })),\n          next: ((_edges$find = edges.find(e => e.source === node.id && e.label === \"next\")) === null || _edges$find === void 0 ? void 0 : _edges$find.target) || null\n        };\n      })\n    };\n    const blob = new Blob([JSON.stringify(json, null, 2)], {\n      type: \"application/json\"\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"conversation_data.json\";\n    link.click();\n  };\n  const fetchGPTResponse = async (message, context) => {\n    const res = await fetch(\"http://localhost:5000/gpt\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        system_prompt: systemPrompt,\n        gpt_model: gptModel,\n        message,\n        context\n      })\n    });\n    const data = await res.json();\n    return data.reply;\n  };\n  const submitFlow = () => {\n    const start = nodes[0];\n    if (!start) return alert(\"Please add at least one node.\");\n    setCurrentNodeId(start.id);\n    setChatMessages([{\n      sender: \"bot\",\n      text: start.data.label\n    }]);\n    setChatActive(true);\n  };\n  const handleUserResponse = async response => {\n    const currentNode = nodes.find(node => node.id === currentNodeId);\n    const updatedInputs = {\n      ...userInputs\n    };\n    if (currentNode.data.capture) {\n      updatedInputs[currentNode.data.capture] = response;\n      setUserInputs(updatedInputs);\n    }\n    const edge = edges.find(e => e.source === currentNodeId && (e.label === response || e.label === \"next\"));\n    if (!edge) {\n      setChatMessages(msgs => [...msgs, {\n        sender: \"user\",\n        text: response\n      }, {\n        sender: \"bot\",\n        text: \"I'm sorry, I didn't understand that.\"\n      }]);\n      return;\n    }\n    const nextNode = nodes.find(node => node.id === edge.target);\n    if (!nextNode) return;\n    if (nextNode.data.type === \"gpt\") {\n      const contextSummary = Object.entries(updatedInputs).map(([k, v]) => `${k}: ${v}`).join(\", \");\n      const gptResponse = await fetchGPTResponse(response, contextSummary);\n      setChatMessages(msgs => [...msgs, {\n        sender: \"user\",\n        text: response\n      }, {\n        sender: \"bot\",\n        text: gptResponse\n      }]);\n    } else {\n      setChatMessages(msgs => [...msgs, {\n        sender: \"user\",\n        text: response\n      }, {\n        sender: \"bot\",\n        text: nextNode.data.label\n      }]);\n    }\n    setCurrentNodeId(nextNode.id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onNodeClick: (_, node) => setSelectedNodeId(node.id),\n          onEdgeClick: (_, edge) => setSelectedEdgeId(edge.id),\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 20,\n          left: 20,\n          display: \"flex\",\n          gap: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNode,\n          style: {\n            backgroundColor: \"#3B82F6\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            borderRadius: 8\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exportToJson,\n          style: {\n            backgroundColor: \"#10B981\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            borderRadius: 8\n          },\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNode,\n          style: {\n            backgroundColor: \"#EF4444\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            borderRadius: 8\n          },\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          style: {\n            backgroundColor: \"mediumpurple\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            borderRadius: 8\n          },\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          style: {\n            backgroundColor: \"orange\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            borderRadius: 8\n          },\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitFlow,\n          style: {\n            backgroundColor: \"#22C55E\",\n            color: \"white\",\n            padding: \"8px 12px\",\n            borderRadius: 8\n          },\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), selectedNodeId && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 80,\n          left: 20,\n          padding: 10,\n          background: \"#f1f5f9\",\n          borderRadius: 8,\n          boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\",\n          minWidth: 250\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Editing Node: \", selectedNodeId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: (_nodes$find = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.label,\n            onChange: e => updateNodeField(\"label\", e.target.value),\n            rows: 4,\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: (_nodes$find2 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find2 === void 0 ? void 0 : _nodes$find2.data.type,\n            onChange: e => updateNodeField(\"type\", e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"message\",\n              children: \"message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choice\",\n              children: \"choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"multi_choice\",\n              children: \"multi_choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"capture\",\n              children: \"capture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gpt\",\n              children: \"gpt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"end\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Capture Field:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: ((_nodes$find3 = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find3 === void 0 ? void 0 : _nodes$find3.data.capture) || \"\",\n            onChange: e => updateNodeField(\"capture\", e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), selectedEdgeId && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 80,\n          left: 300,\n          padding: 10,\n          background: \"#f8fafc\",\n          borderRadius: 8,\n          boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\",\n          minWidth: 150\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Editing Edge: \", selectedEdgeId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: ((_edges$find2 = edges.find(e => e.id === selectedEdgeId)) === null || _edges$find2 === void 0 ? void 0 : _edges$find2.label) || \"\",\n            onChange: e => updateEdgeField(e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 400,\n        padding: 20,\n        background: \"#f8fafc\",\n        overflowY: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Prompt Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"System Prompt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: systemPrompt,\n          onChange: e => setSystemPrompt(e.target.value),\n          rows: 5,\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"GPT Model:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: gptModel,\n          onChange: e => setGptModel(e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), chatActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [chatMessages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: \"10px 0\",\n            textAlign: msg.sender === \"user\" ? \"right\" : \"left\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"inline-block\",\n              background: msg.sender === \"user\" ? \"#DCF8C6\" : \"#E2E8F0\",\n              padding: \"8px 12px\",\n              borderRadius: 12,\n              maxWidth: \"90%\"\n            },\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 17\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          onKeyDown: e => {\n            if (e.key === \"Enter\") handleUserResponse(e.target.value);\n          },\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginTop: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please submit your flow to activate the chatbot.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QYfZVgZ0zto2EIbF8q7xgVGI2+w=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","ReactFlow","ReactFlowProvider","addEdge","applyNodeChanges","applyEdgeChanges","Background","Controls","MiniMap","jsxDEV","_jsxDEV","nodeColors","message","choice","multi_choice","capture","gpt","end","id","getId","App","_s","_nodes$find","_nodes$find2","_nodes$find3","_edges$find2","nodes","setNodes","edges","setEdges","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","history","setHistory","redoStack","setRedoStack","chatMessages","setChatMessages","userInputs","setUserInputs","chatActive","setChatActive","currentNodeId","setCurrentNodeId","multiSelections","setMultiSelections","systemPrompt","setSystemPrompt","gptModel","setGptModel","onNodesChange","changes","pushToHistory","nds","onEdgesChange","eds","onConnect","params","label","prev","undo","length","prevState","slice","redo","nextState","addNode","newNode","type","position","x","Math","random","y","data","style","backgroundColor","color","padding","borderRadius","boxShadow","width","deleteNode","filter","node","edge","source","target","updateNodeField","field","value","map","updateEdgeField","exportToJson","json","settings","system_prompt","gpt_model","_edges$find","options","e","next","find","blob","Blob","JSON","stringify","link","document","createElement","href","URL","createObjectURL","download","click","fetchGPTResponse","context","res","fetch","method","headers","body","reply","submitFlow","start","alert","sender","text","handleUserResponse","response","currentNode","updatedInputs","msgs","nextNode","contextSummary","Object","entries","k","v","join","gptResponse","height","display","children","flex","onNodeClick","_","onEdgeClick","fitView","fileName","_jsxFileName","lineNumber","columnNumber","top","left","gap","onClick","background","minWidth","n","onChange","rows","overflowY","msg","i","margin","textAlign","maxWidth","placeholder","onKeyDown","key","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useMemo } from \"react\";\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  applyNodeChanges,\n  applyEdgeChanges,\n  Background,\n  Controls,\n  MiniMap,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst nodeColors = {\n  message: \"#4F46E5\",\n  choice: \"#2563EB\",\n  multi_choice: \"#059669\",\n  capture: \"#D97706\",\n  gpt: \"#9333EA\",\n  end: \"#EF4444\",\n};\n\nlet id = 0;\nconst getId = () => `${++id}`;\n\nexport default function App() {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [chatActive, setChatActive] = useState(false);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [multiSelections, setMultiSelections] = useState([]);\n  const [systemPrompt, setSystemPrompt] = useState(\n    \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\"\n  );\n  const [gptModel, setGptModel] = useState(\"gpt-3.5-turbo\");\n\n  const onNodesChange = useCallback((changes) => {\n    pushToHistory();\n    setNodes((nds) => applyNodeChanges(changes, nds));\n  }, [nodes]);\n\n  const onEdgesChange = useCallback((changes) => {\n    pushToHistory();\n    setEdges((eds) => applyEdgeChanges(changes, eds));\n  }, [edges]);\n\n  const onConnect = useCallback((params) => {\n    pushToHistory();\n    setEdges((eds) => addEdge({ ...params, label: \"next\" }, eds));\n  }, [edges]);\n\n  const pushToHistory = () => {\n    setHistory((prev) => [...prev, { nodes, edges }]);\n    setRedoStack([]);\n  };\n\n  const undo = () => {\n    if (history.length === 0) return;\n    const prevState = history[history.length - 1];\n    setRedoStack((prev) => [...prev, { nodes, edges }]);\n    setNodes(prevState.nodes);\n    setEdges(prevState.edges);\n    setHistory((prev) => prev.slice(0, -1));\n  };\n\n  const redo = () => {\n    if (redoStack.length === 0) return;\n    const nextState = redoStack[redoStack.length - 1];\n    setHistory((prev) => [...prev, { nodes, edges }]);\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    setRedoStack((prev) => prev.slice(0, -1));\n  };\n\n  const addNode = () => {\n    const newNode = {\n      id: getId(),\n      type: \"default\",\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400,\n      },\n      data: {\n        label: \"\",\n        type: \"message\",\n        capture: \"\",\n      },\n      style: {\n        backgroundColor: nodeColors[\"message\"],\n        color: \"white\",\n        padding: 10,\n        borderRadius: 20,\n        boxShadow: \"0 4px 8px rgba(0,0,0,0.2)\",\n        width: 300,\n      },\n    };\n    pushToHistory();\n    setNodes((nds) => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    pushToHistory();\n    setNodes((nds) => nds.filter((node) => node.id !== selectedNodeId));\n    setEdges((eds) =>\n      eds.filter((edge) => edge.source !== selectedNodeId && edge.target !== selectedNodeId)\n    );\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    pushToHistory();\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNodeId\n          ? {\n              ...node,\n              data: {\n                ...node.data,\n                [field]: value,\n              },\n              style: {\n                ...node.style,\n                backgroundColor: nodeColors[value] || node.style.backgroundColor,\n              },\n            }\n          : node\n      )\n    );\n  };\n\n  const updateEdgeField = (value) => {\n    pushToHistory();\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdgeId ? { ...edge, label: value } : edge\n      )\n    );\n  };\n\n  const exportToJson = () => {\n    const json = {\n      settings: {\n        system_prompt: systemPrompt,\n        gpt_model: gptModel,\n      },\n      nodes: nodes.map((node) => ({\n        id: node.id,\n        message: node.data.label,\n        type: node.data.type,\n        capture: node.data.capture || \"\",\n        options: edges\n          .filter((e) => e.source === node.id && e.label !== \"next\")\n          .map((e) => ({\n            label: e.label,\n            next: e.target,\n          })),\n        next:\n          edges.find((e) => e.source === node.id && e.label === \"next\")?.target || null,\n      })),\n    };\n    const blob = new Blob([JSON.stringify(json, null, 2)], { type: \"application/json\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"conversation_data.json\";\n    link.click();\n  };\n\n  const fetchGPTResponse = async (message, context) => {\n    const res = await fetch(\"http://localhost:5000/gpt\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        system_prompt: systemPrompt,\n        gpt_model: gptModel,\n        message,\n        context,\n      }),\n    });\n    const data = await res.json();\n    return data.reply;\n  };\n\n  const submitFlow = () => {\n    const start = nodes[0];\n    if (!start) return alert(\"Please add at least one node.\");\n    setCurrentNodeId(start.id);\n    setChatMessages([{ sender: \"bot\", text: start.data.label }]);\n    setChatActive(true);\n  };\n  const handleUserResponse = async (response) => {\n    const currentNode = nodes.find((node) => node.id === currentNodeId);\n    const updatedInputs = { ...userInputs };\n\n    if (currentNode.data.capture) {\n      updatedInputs[currentNode.data.capture] = response;\n      setUserInputs(updatedInputs);\n    }\n\n    const edge = edges.find(\n      (e) =>\n        e.source === currentNodeId &&\n        (e.label === response || e.label === \"next\")\n    );\n\n    if (!edge) {\n      setChatMessages((msgs) => [\n        ...msgs,\n        { sender: \"user\", text: response },\n        { sender: \"bot\", text: \"I'm sorry, I didn't understand that.\" },\n      ]);\n      return;\n    }\n\n    const nextNode = nodes.find((node) => node.id === edge.target);\n\n    if (!nextNode) return;\n\n    if (nextNode.data.type === \"gpt\") {\n      const contextSummary = Object.entries(updatedInputs)\n        .map(([k, v]) => `${k}: ${v}`)\n        .join(\", \");\n      const gptResponse = await fetchGPTResponse(response, contextSummary);\n      setChatMessages((msgs) => [\n        ...msgs,\n        { sender: \"user\", text: response },\n        { sender: \"bot\", text: gptResponse },\n      ]);\n    } else {\n      setChatMessages((msgs) => [\n        ...msgs,\n        { sender: \"user\", text: response },\n        { sender: \"bot\", text: nextNode.data.label },\n      ]);\n    }\n\n    setCurrentNodeId(nextNode.id);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Panel */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <ReactFlowProvider>\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onNodeClick={(_, node) => setSelectedNodeId(node.id)}\n            onEdgeClick={(_, edge) => setSelectedEdgeId(edge.id)}\n            fitView\n          >\n            <Background />\n            <MiniMap />\n            <Controls />\n          </ReactFlow>\n        </ReactFlowProvider>\n\n        {/* Buttons */}\n        <div style={{ position: \"absolute\", top: 20, left: 20, display: \"flex\", gap: 10 }}>\n          <button onClick={addNode} style={{ backgroundColor: \"#3B82F6\", color: \"white\", padding: \"8px 12px\", borderRadius: 8 }}>Add Node</button>\n          <button onClick={exportToJson} style={{ backgroundColor: \"#10B981\", color: \"white\", padding: \"8px 12px\", borderRadius: 8 }}>Export JSON</button>\n          <button onClick={deleteNode} style={{ backgroundColor: \"#EF4444\", color: \"white\", padding: \"8px 12px\", borderRadius: 8 }}>Delete Node</button>\n          <button onClick={undo} style={{ backgroundColor: \"mediumpurple\", color: \"white\", padding: \"8px 12px\", borderRadius: 8 }}>Undo</button>\n          <button onClick={redo} style={{ backgroundColor: \"orange\", color: \"white\", padding: \"8px 12px\", borderRadius: 8 }}>Redo</button>\n          <button onClick={submitFlow} style={{ backgroundColor: \"#22C55E\", color: \"white\", padding: \"8px 12px\", borderRadius: 8 }}>Submit Flow</button>\n        </div>\n\n        {/* Node Editor */}\n        {selectedNodeId && (\n          <div style={{\n            position: \"absolute\", top: 80, left: 20, padding: 10, background: \"#f1f5f9\",\n            borderRadius: 8, boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\", minWidth: 250\n          }}>\n            <strong>Editing Node: {selectedNodeId}</strong>\n            <div>\n              <div>Message:</div>\n              <textarea\n                value={nodes.find((n) => n.id === selectedNodeId)?.data.label}\n                onChange={(e) => updateNodeField(\"label\", e.target.value)}\n                rows={4}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n            <div>\n              <div>Type:</div>\n              <select\n                value={nodes.find((n) => n.id === selectedNodeId)?.data.type}\n                onChange={(e) => updateNodeField(\"type\", e.target.value)}\n              >\n                <option value=\"message\">message</option>\n                <option value=\"choice\">choice</option>\n                <option value=\"multi_choice\">multi_choice</option>\n                <option value=\"capture\">capture</option>\n                <option value=\"gpt\">gpt</option>\n                <option value=\"end\">end</option>\n              </select>\n            </div>\n            <div>\n              <div>Capture Field:</div>\n              <input\n                type=\"text\"\n                value={nodes.find((n) => n.id === selectedNodeId)?.data.capture || \"\"}\n                onChange={(e) => updateNodeField(\"capture\", e.target.value)}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Edge Editor */}\n        {selectedEdgeId && (\n          <div style={{\n            position: \"absolute\", top: 80, left: 300, padding: 10, background: \"#f8fafc\",\n            borderRadius: 8, boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\", minWidth: 150\n          }}>\n            <strong>Editing Edge: {selectedEdgeId}</strong>\n            <div>\n              <input\n                type=\"text\"\n                value={edges.find((e) => e.id === selectedEdgeId)?.label || \"\"}\n                onChange={(e) => updateEdgeField(e.target.value)}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Right Panel – Chat + Prompt Settings */}\n      <div style={{ width: 400, padding: 20, background: \"#f8fafc\", overflowY: \"auto\" }}>\n        <h3>Prompt Settings</h3>\n        <div>\n          <div>System Prompt:</div>\n          <textarea\n            value={systemPrompt}\n            onChange={(e) => setSystemPrompt(e.target.value)}\n            rows={5}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n        <div>\n          <div>GPT Model:</div>\n          <input\n            type=\"text\"\n            value={gptModel}\n            onChange={(e) => setGptModel(e.target.value)}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n\n        <h3>MindPeace Chat</h3>\n        {chatActive ? (\n          <div>\n            {chatMessages.map((msg, i) => (\n              <div key={i} style={{ margin: \"10px 0\", textAlign: msg.sender === \"user\" ? \"right\" : \"left\" }}>\n                <div style={{\n                  display: \"inline-block\",\n                  background: msg.sender === \"user\" ? \"#DCF8C6\" : \"#E2E8F0\",\n                  padding: \"8px 12px\",\n                  borderRadius: 12,\n                  maxWidth: \"90%\",\n                }}>\n                  {msg.text}\n                </div>\n              </div>\n            ))}\n            <input\n              type=\"text\"\n              placeholder=\"Type your message...\"\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") handleUserResponse(e.target.value);\n              }}\n              style={{ width: \"100%\", padding: 8, marginTop: 10 }}\n            />\n          </div>\n        ) : (\n          <p>Please submit your flow to activate the chatbot.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}