{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = edges.find(e => e.id === selectedEdgeId);\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(edges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, edges]);\n  const allEdges = [...edges, ...autoGeneratedEdges];\n  const nodeStyleByType = {\n    choice: {\n      background: \"#e0f7fa\",\n      borderRadius: 10,\n      boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\",\n      padding: 10\n    },\n    input: {\n      background: \"#fff3e0\",\n      borderRadius: 10,\n      boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\",\n      padding: 10\n    },\n    multi_choice: {\n      background: \"#ede7f6\",\n      borderRadius: 10,\n      boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\",\n      padding: 10\n    },\n    gpt: {\n      background: \"#f3e5f5\",\n      borderRadius: 10,\n      boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\",\n      padding: 10\n    },\n    end: {\n      background: \"#e0e0e0\",\n      borderRadius: 10,\n      boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\",\n      padding: 10\n    }\n  };\n  const addNode = () => {\n    var _nodes$find;\n    const basePosition = selectedNodeId ? ((_nodes$find = nodes.find(n => n.id === selectedNodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.position) || {\n      x: 100,\n      y: 100\n    } : {\n      x: 100,\n      y: 100\n    };\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: {\n        x: basePosition.x + 200,\n        y: basePosition.y + 50\n      },\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes(nds => nds.filter(node => node.id !== selectedNodeId));\n    setEdges(eds => eds.filter(edge => edge.source !== selectedNodeId && edge.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key (e.g., yes, no):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      label,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if ([\"choice\", \"multi_choice\"].includes(node.data.type)) {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const {\n      source: sourceId,\n      target: targetId\n    } = selectedEdge;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge));\n    setNodes(nds => nds.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if ([\"choice\", \"multi_choice\"].includes(updated.data.type)) {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(({\n      id,\n      data\n    }) => {\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 10,\n        display: \"flex\",\n        gap: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        style: {\n          background: \"#1976d2\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"6px\",\n          padding: \"8px 12px\"\n        },\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        style: {\n          background: \"#388e3c\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"6px\",\n          padding: \"8px 12px\"\n        },\n        children: \"Export JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        style: {\n          background: \"#d32f2f\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"6px\",\n          padding: \"8px 12px\"\n        },\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 50,\n        left: 10,\n        zIndex: 10,\n        background: \"#424242\",\n        color: \"white\",\n        padding: 10,\n        borderRadius: \"8px\",\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Editing Node: \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: selectedNode.data.message,\n        onChange: e => updateNodeField(\"message\", e.target.value),\n        style: {\n          width: \"100%\",\n          height: 60\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedNode.data.type,\n        onChange: e => updateNodeField(\"type\", e.target.value),\n        style: {\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"choice\",\n          children: \"choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"multi_choice\",\n          children: \"multi_choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt\",\n          children: \"gpt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"end\",\n          children: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Capture Field:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.capture,\n        onChange: e => updateNodeField(\"capture\", e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Next Node ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.next,\n        onChange: e => updateNodeField(\"next\", e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 50,\n        left: 10,\n        zIndex: 10,\n        background: \"#f9f9f9\",\n        padding: 10,\n        borderRadius: \"8px\",\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Option Label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedEdge.label,\n        onChange: e => updateEdgeLabel(e.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(node => ({\n        ...node,\n        style: nodeStyleByType[node.data.type] || {},\n        data: {\n          ...node.data,\n          label: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              whiteSpace: \"pre-wrap\",\n              textAlign: \"left\"\n            },\n            children: node.data.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this)\n        }\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cCx2Hiq7+GbYnHw91PgTNsVglHg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","selectedNode","find","n","selectedEdge","e","autoGeneratedEdges","existing","Set","map","source","target","autoEdges","node","_node$data","has","push","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","nodeStyleByType","choice","background","borderRadius","boxShadow","padding","input","multi_choice","gpt","end","addNode","_nodes$find","basePosition","newId","toString","newNode","nds","deleteNode","filter","eds","edge","onConnect","params","prompt","edgeId","updated","includes","onNodeClick","_","onEdgeClick","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","newOptions","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","length","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","width","height","children","top","left","zIndex","display","gap","onClick","color","border","fileName","_jsxFileName","lineNumber","columnNumber","onChange","whiteSpace","textAlign","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: { message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\", type: \"choice\", options: {}, capture: \"\", next: \"\" },\n    position: { x: 250, y: 0 },\n    type: \"default\",\n  },\n];\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = edges.find((e) => e.id === selectedEdgeId);\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existing = new Set(edges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existing.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\",\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, edges]);\n\n  const allEdges = [...edges, ...autoGeneratedEdges];\n\n  const nodeStyleByType = {\n    choice: { background: \"#e0f7fa\", borderRadius: 10, boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\", padding: 10 },\n    input: { background: \"#fff3e0\", borderRadius: 10, boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\", padding: 10 },\n    multi_choice: { background: \"#ede7f6\", borderRadius: 10, boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\", padding: 10 },\n    gpt: { background: \"#f3e5f5\", borderRadius: 10, boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\", padding: 10 },\n    end: { background: \"#e0e0e0\", borderRadius: 10, boxShadow: \"0 2px 6px rgba(0,0,0,0.2)\", padding: 10 },\n  };\n\n  const addNode = () => {\n    const basePosition = selectedNodeId\n      ? nodes.find((n) => n.id === selectedNodeId)?.position || { x: 100, y: 100 }\n      : { x: 100, y: 100 };\n\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const newNode = {\n      id: newId,\n      data: { message: `This is node ${newId}`, type: \"choice\", options: {}, capture: \"\", next: \"\" },\n      position: { x: basePosition.x + 200, y: basePosition.y + 50 },\n      type: \"default\",\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes((nds) => nds.filter((node) => node.id !== selectedNodeId));\n    setEdges((eds) => eds.filter((edge) => edge.source !== selectedNodeId && edge.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key (e.g., yes, no):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      setEdges((eds) =>\n        addEdge({ ...params, id: edgeId, label, markerEnd: { type: MarkerType.ArrowClosed } }, eds)\n      );\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === params.source) {\n            const updated = { ...node };\n            if ([\"choice\", \"multi_choice\"].includes(node.data.type)) {\n              updated.data.options = { ...updated.data.options, [label]: params.target };\n            } else {\n              updated.data.next = params.target;\n            }\n            return updated;\n          }\n          return node;\n        })\n      );\n    },\n    [setEdges, setNodes]\n  );\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNodeId\n          ? { ...node, data: { ...node.data, [field]: value } }\n          : node\n      )\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const { source: sourceId, target: targetId } = selectedEdge;\n\n    setEdges((eds) =>\n      eds.map((edge) => (edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge))\n    );\n\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === sourceId) {\n          const updated = { ...node };\n          if ([\"choice\", \"multi_choice\"].includes(updated.data.type)) {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = targetId;\n            updated.data.options = newOptions;\n          } else {\n            updated.data.next = targetId;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\",\n      },\n      nodes: {},\n    };\n\n    nodes.forEach(({ id, data }) => {\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <div style={{ position: \"absolute\", top: 10, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n        <button onClick={addNode} style={{ background: \"#1976d2\", color: \"white\", border: \"none\", borderRadius: \"6px\", padding: \"8px 12px\" }}>Add Node</button>\n        <button onClick={exportJSON} style={{ background: \"#388e3c\", color: \"white\", border: \"none\", borderRadius: \"6px\", padding: \"8px 12px\" }}>Export JSON</button>\n        <button onClick={deleteNode} style={{ background: \"#d32f2f\", color: \"white\", border: \"none\", borderRadius: \"6px\", padding: \"8px 12px\" }}>Delete Node</button>\n      </div>\n\n      {selectedNode && (\n        <div style={{ position: \"absolute\", top: 50, left: 10, zIndex: 10, background: \"#424242\", color: \"white\", padding: 10, borderRadius: \"8px\", width: 300 }}>\n          <h4>Editing Node: {selectedNode.id}</h4>\n          <label>Message:</label>\n          <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} />\n          <label>Type:</label>\n          <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}>\n            <option value=\"choice\">choice</option>\n            <option value=\"input\">input</option>\n            <option value=\"multi_choice\">multi_choice</option>\n            <option value=\"gpt\">gpt</option>\n            <option value=\"end\">end</option>\n          </select>\n          <label>Capture Field:</label>\n          <input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} />\n          <label>Next Node ID:</label>\n          <input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} />\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div style={{ position: \"absolute\", top: 50, left: 10, zIndex: 10, background: \"#f9f9f9\", padding: 10, borderRadius: \"8px\", width: 300 }}>\n          <h4>Editing Edge</h4>\n          <label>Option Label:</label>\n          <input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} />\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((node) => ({\n          ...node,\n          style: nodeStyleByType[node.data.type] || {},\n          data: {\n            ...node.data,\n            label: (\n              <div style={{ whiteSpace: \"pre-wrap\", textAlign: \"left\" }}>\n                {node.data.message}\n              </div>\n            ),\n          },\n        }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}