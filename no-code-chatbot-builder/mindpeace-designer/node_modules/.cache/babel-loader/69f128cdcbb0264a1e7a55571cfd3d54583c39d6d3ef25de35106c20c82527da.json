{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userMessage, setUserMessage] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    const updatedEdges = addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, manualEdges);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  }, [nodes, manualEdges, setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n    const newChat = [...chatHistory, {\n      sender: \"user\",\n      message: userMessage\n    }];\n    setChatHistory(newChat);\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMessage,\n          summary: \"\",\n          // Optional summary\n          system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n          gpt_model: \"gpt-3.5-turbo\"\n        })\n      });\n      const data = await res.json();\n      if (data.reply) {\n        setChatHistory([...newChat, {\n          sender: \"bot\",\n          message: data.reply\n        }]);\n      } else {\n        setChatHistory([...newChat, {\n          sender: \"bot\",\n          message: \"No response from GPT.\"\n        }]);\n      }\n    } catch (err) {\n      setChatHistory([...newChat, {\n        sender: \"bot\",\n        message: \"Server error. Try again.\"\n      }]);\n    }\n    setUserMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          padding: \"12px\",\n          background: \"#f1f5f9\",\n          boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n          borderRadius: \"8px\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          width: \"fit-content\",\n          margin: \"10px auto\",\n          zIndex: 20,\n          position: \"relative\"\n        },\n        children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          left: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#22c55e\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: exportJSON,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#ef4444\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: deleteNode,\n          children: \"Delete Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#10b981\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: submitFlow,\n          children: \"Submit Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          zIndex: 10,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#a855f7\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"#f59e0b\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"6px 12px\",\n            border: \"none\"\n          },\n          onClick: redo,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f8fafc\",\n          padding: 12,\n          border: \"1px solid #d1d5db\",\n          borderRadius: \"10px\",\n          width: 300,\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Editing Node: \", selectedNode.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 110,\n          left: 10,\n          zIndex: 10,\n          background: \"#f9fafb\",\n          padding: 12,\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          width: \"300px\",\n          boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Editing Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Option Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedEdge.label,\n          onChange: e => updateEdgeLabel(e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"320px\",\n        padding: 20,\n        borderLeft: \"1px solid #ddd\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: 10\n        },\n        children: \"MindPeace Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          overflowY: \"auto\",\n          marginBottom: 10\n        },\n        children: chatbotReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 10\n          },\n          children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n              background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\",\n              padding: 8,\n              borderRadius: 6,\n              maxWidth: \"90%\"\n            },\n            children: entry.message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please submit your flow to activate the chatbot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), chatbotReady && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && sendMessage(),\n          placeholder: \"Type your message...\",\n          style: {\n            width: \"100%\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            marginBottom: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          style: {\n            width: \"100%\",\n            background: \"#38bdf8\",\n            color: \"white\",\n            borderRadius: 6,\n            padding: \"8px 12px\",\n            border: \"none\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OxVrPNaJk6e8KWo/1C6gY8E93rE=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","chatHistory","setChatHistory","userMessage","setUserMessage","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","updatedEdges","updatedNodes","updated","addNode","newId","toString","Math","random","newNode","deleteNode","filter","exportJSON","output","getExportJSON","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","ok","alert","error","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","newOptions","onNodeClick","_","onEdgeClick","sendMessage","trim","newChat","sender","summary","json","reply","err","width","height","display","children","flex","textAlign","fontSize","fontWeight","margin","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","top","left","gap","color","onClick","right","onChange","fitView","edgeLabelMode","borderLeft","flexDirection","justifyContent","marginBottom","flexGrow","overflowY","entry","index","alignSelf","onKeyDown","key","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userMessage, setUserMessage] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      const updatedEdges = addEdge(\n        {\n          ...params,\n          id: edgeId,\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label\n        },\n        manualEdges\n      );\n\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === params.source) {\n          const updated = { ...node };\n          if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n            updated.data.options = { ...updated.data.options, [label]: params.target };\n          } else {\n            updated.data.next = params.target;\n          }\n          return updated;\n        }\n        return node;\n      });\n\n      setEdges(updatedEdges);\n      setNodes(updatedNodes);\n      pushToHistory(updatedNodes, updatedEdges);\n    },\n    [nodes, manualEdges, setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const exportJSON = () => {\n    const output = getExportJSON();\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      if (res.ok) {\n        setChatbotReady(true);\n        alert(\"Flow submitted successfully. Chatbot is now active.\");\n      } else {\n        alert(\"Submission failed. Please check the backend logs.\");\n      }\n    } catch (error) {\n      alert(\"Error connecting to backend. Make sure the Flask server is running.\");\n    }\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n\n    const newChat = [...chatHistory, { sender: \"user\", message: userMessage }];\n    setChatHistory(newChat);\n\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          message: userMessage,\n          summary: \"\", // Optional summary\n          system_prompt:\n            \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n          gpt_model: \"gpt-3.5-turbo\"\n        })\n      });\n\n      const data = await res.json();\n      if (data.reply) {\n        setChatHistory([...newChat, { sender: \"bot\", message: data.reply }]);\n      } else {\n        setChatHistory([...newChat, { sender: \"bot\", message: \"No response from GPT.\" }]);\n      }\n    } catch (err) {\n      setChatHistory([...newChat, { sender: \"bot\", message: \"Server error. Try again.\" }]);\n    }\n\n    setUserMessage(\"\");\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Panel - Flow Editor */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        {/* Headline */}\n        <div\n          style={{\n            textAlign: \"center\",\n            padding: \"12px\",\n            background: \"#f1f5f9\",\n            boxShadow: \"0px 2px 6px rgba(0,0,0,0.1)\",\n            borderRadius: \"8px\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\",\n            fontFamily: \"Segoe UI, sans-serif\",\n            width: \"fit-content\",\n            margin: \"10px auto\",\n            zIndex: 20,\n            position: \"relative\"\n          }}\n        >\n          Your AI Chatbot Designer — Fast. Visual. Code-Free\n        </div>\n\n        {/* Add/Delete/Export Buttons */}\n        <div style={{ position: \"absolute\", top: 60, left: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#38bdf8\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={addNode}>\n            Add Node\n          </button>\n          <button style={{ background: \"#22c55e\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={exportJSON}>\n            Export JSON\n          </button>\n          <button style={{ background: \"#ef4444\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={deleteNode}>\n            Delete Node\n          </button>\n          <button style={{ background: \"#10b981\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={submitFlow}>\n            Submit Flow\n          </button>\n        </div>\n\n        {/* Undo/Redo */}\n        <div style={{ position: \"absolute\", top: 60, right: 10, zIndex: 10, display: \"flex\", gap: \"10px\" }}>\n          <button style={{ background: \"#a855f7\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={undo}>\n            Undo\n          </button>\n          <button style={{ background: \"#f59e0b\", color: \"white\", borderRadius: 6, padding: \"6px 12px\", border: \"none\" }} onClick={redo}>\n            Redo\n          </button>\n        </div>\n\n        {/* Node/Edge Editor */}\n        {selectedNode && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f8fafc\", padding: 12, border: \"1px solid #d1d5db\", borderRadius: \"10px\", width: 300, boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Node: {selectedNode.id}</h4>\n            <label>Message:</label>\n            <textarea value={selectedNode.data.message} onChange={(e) => updateNodeField(\"message\", e.target.value)} style={{ width: \"100%\", height: 60 }} />\n            <label>Type:</label>\n            <select value={selectedNode.data.type} onChange={(e) => updateNodeField(\"type\", e.target.value)} style={{ width: \"100%\" }}>\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n            <label>Capture Field:</label>\n            <input type=\"text\" value={selectedNode.data.capture} onChange={(e) => updateNodeField(\"capture\", e.target.value)} style={{ width: \"100%\" }} />\n            <label>Next Node ID:</label>\n            <input type=\"text\" value={selectedNode.data.next} onChange={(e) => updateNodeField(\"next\", e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        {selectedEdge && (\n          <div style={{ position: \"absolute\", top: 110, left: 10, zIndex: 10, background: \"#f9fafb\", padding: 12, border: \"1px solid #ccc\", borderRadius: \"8px\", width: \"300px\", boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.1)\" }}>\n            <h4>Editing Edge</h4>\n            <label>Option Label:</label>\n            <input type=\"text\" value={selectedEdge.label} onChange={(e) => updateEdgeLabel(e.target.value)} style={{ width: \"100%\" }} />\n          </div>\n        )}\n\n        <ReactFlow\n          nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message }, style: getNodeStyle(n.data.type) }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Panel - Chatbot */}\n      <div style={{ width: \"320px\", padding: 20, borderLeft: \"1px solid #ddd\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n        <div style={{ fontWeight: \"bold\", marginBottom: 10 }}>MindPeace Chat</div>\n        <div style={{ flexGrow: 1, overflowY: \"auto\", marginBottom: 10 }}>\n          {chatbotReady ? (\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n              {chatHistory.map((entry, index) => (\n                <div key={index} style={{ alignSelf: entry.sender === \"user\" ? \"flex-end\" : \"flex-start\", background: entry.sender === \"user\" ? \"#e0f2fe\" : \"#f3f4f6\", padding: 8, borderRadius: 6, maxWidth: \"90%\" }}>\n                  {entry.message}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div>Please submit your flow to activate the chatbot.</div>\n          )}\n        </div>\n        {chatbotReady && (\n          <div>\n            <input\n              value={userMessage}\n              onChange={(e) => setUserMessage(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n              placeholder=\"Type your message...\"\n              style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 10 }}\n            />\n            <button\n              onClick={sendMessage}\n              style={{\n                width: \"100%\",\n                background: \"#38bdf8\",\n                color: \"white\",\n                borderRadius: 6,\n                padding: \"8px 12px\",\n                border: \"none\"\n              }}\n            >\n              Send\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}