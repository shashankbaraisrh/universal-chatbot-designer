{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, useEdgesState, useNodesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _selectedNode$data$gp, _selectedEdge$data;\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const [systemPrompt, setSystemPrompt] = useState('');\n\n  // Add edge on connect\n  const onConnect = useCallback(params => setEdges(eds => addEdge({\n    ...params,\n    data: {\n      label: 'Option'\n    },\n    type: 'default'\n  }, eds)), [setEdges]);\n  const onNodeClick = useCallback((_, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n    let updatedValue = value;\n    if (field === 'expected_inputs') {\n      updatedValue = value.split(',').map(v => v.trim());\n    } else if (field === 'input_mapping') {\n      try {\n        updatedValue = JSON.parse(value);\n      } catch {\n        alert('Invalid JSON for input_mapping');\n        return;\n      }\n    } else if (field === 'gpt') {\n      updatedValue = {\n        enabled: value\n      };\n    }\n    setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: updatedValue,\n        label: field === 'message' ? updatedValue.slice(0, 20) + (updatedValue.length > 20 ? '...' : '') : node.data.label\n      }\n    } : node));\n    setSelectedNode(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: updatedValue,\n        label: field === 'message' ? updatedValue.slice(0, 20) + (updatedValue.length > 20 ? '...' : '') : prev.data.label\n      }\n    }));\n  };\n  const handleEdgeLabelChange = value => {\n    if (!selectedEdge) return;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      data: {\n        ...edge.data,\n        label: value.trim()\n      }\n    } : edge));\n    setSelectedEdge(prev => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        label: value.trim()\n      }\n    }));\n  };\n  const addNewNode = () => {\n    const id = (nodes.length + 1).toString();\n    const newNode = {\n      id,\n      position: {\n        x: 100 + nodes.length * 40,\n        y: 100 + nodes.length * 40\n      },\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false,\n        expected_inputs: [],\n        input_mapping: {},\n        follow_up_prompt: '',\n        follow_up_capture: '',\n        gpt: {\n          enabled: false\n        }\n      },\n      type: 'default'\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeId = selectedNode.id;\n    setNodes(nds => nds.filter(n => n.id !== nodeId));\n    setEdges(eds => eds.filter(e => e.source !== nodeId && e.target !== nodeId));\n    setSelectedNode(null);\n  };\n  const exportJSON = () => {\n    const tree = {\n      settings: {\n        default_gpt_model: 'gpt-3.5-turbo',\n        default_system_prompt: systemPrompt,\n        context_includes: ['history', 'user_state', 'problems']\n      },\n      variables: {\n        name: '',\n        first_name: '',\n        email: '',\n        age: '',\n        problem_type: '',\n        problem_details: '',\n        intensity: '',\n        problems: []\n      },\n      nodes: {}\n    };\n    const optionsMap = {};\n    edges.forEach(edge => {\n      var _edge$data;\n      if (!optionsMap[edge.source]) optionsMap[edge.source] = {};\n      optionsMap[edge.source][((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.label) || 'Option'] = edge.target;\n    });\n    nodes.forEach(node => {\n      var _d$expected_inputs, _d$gpt;\n      const d = node.data;\n      const obj = {\n        message: d.message\n      };\n      if (optionsMap[node.id]) obj.options = optionsMap[node.id];\n      if (d.capture) obj.capture = d.capture;\n      if (d.next) obj.next = d.next;\n      if (d.end) obj.end = true;\n      if ((_d$expected_inputs = d.expected_inputs) !== null && _d$expected_inputs !== void 0 && _d$expected_inputs.length) obj.expected_inputs = d.expected_inputs;\n      if (Object.keys(d.input_mapping || {}).length) obj.input_mapping = d.input_mapping;\n      if (d.follow_up_prompt) obj.follow_up_prompt = d.follow_up_prompt;\n      if (d.follow_up_capture) obj.follow_up_capture = d.follow_up_capture;\n      if ((_d$gpt = d.gpt) !== null && _d$gpt !== void 0 && _d$gpt.enabled) obj.gpt = {\n        enabled: true\n      };\n      tree.nodes[node.id] = obj;\n    });\n    const blob = new Blob([JSON.stringify(tree, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  const handleImportJSON = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      try {\n        var _json$settings;\n        const json = JSON.parse(event.target.result);\n        setSystemPrompt(((_json$settings = json.settings) === null || _json$settings === void 0 ? void 0 : _json$settings.default_system_prompt) || '');\n        const newNodes = Object.entries(json.nodes).map(([id, node], i) => ({\n          id,\n          position: {\n            x: 150 + i * 60,\n            y: 150 + i * 60\n          },\n          data: {\n            label: node.message.slice(0, 20) + (node.message.length > 20 ? '...' : ''),\n            message: node.message,\n            capture: node.capture || '',\n            next: node.next || '',\n            end: node.end || false,\n            expected_inputs: node.expected_inputs || [],\n            input_mapping: node.input_mapping || {},\n            follow_up_prompt: node.follow_up_prompt || '',\n            follow_up_capture: node.follow_up_capture || '',\n            gpt: node.gpt || {\n              enabled: false\n            }\n          },\n          type: 'default'\n        }));\n        const newEdges = [];\n        Object.entries(json.nodes).forEach(([source, node]) => {\n          if (node.options) {\n            Object.entries(node.options).forEach(([label, target]) => {\n              newEdges.push({\n                id: `e${source}-${target}`,\n                source,\n                target,\n                data: {\n                  label\n                }\n              });\n            });\n          }\n        });\n        setNodes(newNodes);\n        setEdges(newEdges);\n      } catch (err) {\n        alert('Import failed: Invalid JSON');\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        background: '#eee'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteSelectedNode,\n        style: {\n          marginLeft: 10\n        },\n        children: \"Delete Selected Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".json\",\n        onChange: handleImportJSON,\n        style: {\n          marginLeft: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        style: {\n          marginLeft: 10\n        },\n        children: \"Export to JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"System Prompt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: systemPrompt,\n          onChange: e => setSystemPrompt(e.target.value),\n          rows: 4,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onNodeClick: onNodeClick,\n          onEdgeClick: onEdgeClick,\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), (selectedNode || selectedEdge) && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 300,\n          padding: 10,\n          background: '#f4f4f4'\n        },\n        children: [selectedNode && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Node Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedNode.data.message,\n            onChange: e => handleFieldChange('message', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Capture:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: selectedNode.data.capture,\n            onChange: e => handleFieldChange('capture', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Next:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: selectedNode.data.next,\n            onChange: e => handleFieldChange('next', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Expected Inputs:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: (selectedNode.data.expected_inputs || []).join(', '),\n            onChange: e => handleFieldChange('expected_inputs', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Input Mapping (JSON):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: JSON.stringify(selectedNode.data.input_mapping || {}, null, 2),\n            onChange: e => handleFieldChange('input_mapping', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Follow-up Prompt:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: selectedNode.data.follow_up_prompt,\n            onChange: e => handleFieldChange('follow_up_prompt', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Follow-up Capture:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: selectedNode.data.follow_up_capture,\n            onChange: e => handleFieldChange('follow_up_capture', e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: ((_selectedNode$data$gp = selectedNode.data.gpt) === null || _selectedNode$data$gp === void 0 ? void 0 : _selectedNode$data$gp.enabled) || false,\n              onChange: e => handleFieldChange('gpt', e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 19\n            }, this), \" GPT Enabled\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedNode.data.end || false,\n              onChange: e => handleFieldChange('end', e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 19\n            }, this), \" End Node\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), selectedEdge && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Edge Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Label:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: ((_selectedEdge$data = selectedEdge.data) === null || _selectedEdge$data === void 0 ? void 0 : _selectedEdge$data.label) || '',\n            onChange: e => handleEdgeLabelChange(e.target.value),\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XoAb92O7zZ4pgZbNt+fBW3pvW/U=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","Controls","MiniMap","useEdgesState","useNodesState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_selectedNode$data$gp","_selectedEdge$data","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedEdge","setSelectedEdge","systemPrompt","setSystemPrompt","onConnect","params","eds","data","label","type","onNodeClick","_","node","onEdgeClick","event","edge","stopPropagation","handleFieldChange","field","value","updatedValue","split","map","v","trim","JSON","parse","alert","enabled","nds","id","slice","length","prev","handleEdgeLabelChange","addNewNode","toString","newNode","position","x","y","message","capture","next","end","expected_inputs","input_mapping","follow_up_prompt","follow_up_capture","gpt","deleteSelectedNode","nodeId","filter","n","e","source","target","exportJSON","tree","settings","default_gpt_model","default_system_prompt","context_includes","variables","name","first_name","email","age","problem_type","problem_details","intensity","problems","optionsMap","forEach","_edge$data","_d$expected_inputs","_d$gpt","d","obj","options","Object","keys","blob","Blob","stringify","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","handleImportJSON","file","files","reader","FileReader","onload","_json$settings","json","result","newNodes","entries","i","newEdges","push","err","readAsText","style","display","flexDirection","height","children","padding","background","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","accept","onChange","marginTop","rows","width","flex","fitView","join","checked","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  Background,\n  Controls,\n  MiniMap,\n  useEdgesState,\n  useNodesState\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  const [systemPrompt, setSystemPrompt] = useState('');\n\n  // Add edge on connect\n  const onConnect = useCallback(\n    (params) =>\n      setEdges((eds) =>\n        addEdge({ ...params, data: { label: 'Option' }, type: 'default' }, eds)\n      ),\n    [setEdges]\n  );\n\n  const onNodeClick = useCallback((_, node) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n\n  const handleFieldChange = (field, value) => {\n    if (!selectedNode) return;\n\n    let updatedValue = value;\n    if (field === 'expected_inputs') {\n      updatedValue = value.split(',').map((v) => v.trim());\n    } else if (field === 'input_mapping') {\n      try {\n        updatedValue = JSON.parse(value);\n      } catch {\n        alert('Invalid JSON for input_mapping');\n        return;\n      }\n    } else if (field === 'gpt') {\n      updatedValue = { enabled: value };\n    }\n\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNode.id\n          ? {\n              ...node,\n              data: {\n                ...node.data,\n                [field]: updatedValue,\n                label:\n                  field === 'message'\n                    ? updatedValue.slice(0, 20) + (updatedValue.length > 20 ? '...' : '')\n                    : node.data.label\n              }\n            }\n          : node\n      )\n    );\n\n    setSelectedNode((prev) => ({\n      ...prev,\n      data: {\n        ...prev.data,\n        [field]: updatedValue,\n        label:\n          field === 'message'\n            ? updatedValue.slice(0, 20) + (updatedValue.length > 20 ? '...' : '')\n            : prev.data.label\n      }\n    }));\n  };\n\n  const handleEdgeLabelChange = (value) => {\n    if (!selectedEdge) return;\n\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdge.id\n          ? { ...edge, data: { ...edge.data, label: value.trim() } }\n          : edge\n      )\n    );\n\n    setSelectedEdge((prev) => ({\n      ...prev,\n      data: { ...prev.data, label: value.trim() }\n    }));\n  };\n\n  const addNewNode = () => {\n    const id = (nodes.length + 1).toString();\n    const newNode = {\n      id,\n      position: { x: 100 + nodes.length * 40, y: 100 + nodes.length * 40 },\n      data: {\n        label: 'New Node',\n        message: '',\n        capture: '',\n        next: '',\n        end: false,\n        expected_inputs: [],\n        input_mapping: {},\n        follow_up_prompt: '',\n        follow_up_capture: '',\n        gpt: { enabled: false }\n      },\n      type: 'default'\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteSelectedNode = () => {\n    if (!selectedNode) return;\n    const nodeId = selectedNode.id;\n\n    setNodes((nds) => nds.filter((n) => n.id !== nodeId));\n    setEdges((eds) =>\n      eds.filter((e) => e.source !== nodeId && e.target !== nodeId)\n    );\n    setSelectedNode(null);\n  };\n\n  const exportJSON = () => {\n    const tree = {\n      settings: {\n        default_gpt_model: 'gpt-3.5-turbo',\n        default_system_prompt: systemPrompt,\n        context_includes: ['history', 'user_state', 'problems']\n      },\n      variables: {\n        name: '',\n        first_name: '',\n        email: '',\n        age: '',\n        problem_type: '',\n        problem_details: '',\n        intensity: '',\n        problems: []\n      },\n      nodes: {}\n    };\n\n    const optionsMap = {};\n    edges.forEach((edge) => {\n      if (!optionsMap[edge.source]) optionsMap[edge.source] = {};\n      optionsMap[edge.source][edge.data?.label || 'Option'] = edge.target;\n    });\n\n    nodes.forEach((node) => {\n      const d = node.data;\n      const obj = { message: d.message };\n\n      if (optionsMap[node.id]) obj.options = optionsMap[node.id];\n      if (d.capture) obj.capture = d.capture;\n      if (d.next) obj.next = d.next;\n      if (d.end) obj.end = true;\n      if (d.expected_inputs?.length) obj.expected_inputs = d.expected_inputs;\n      if (Object.keys(d.input_mapping || {}).length)\n        obj.input_mapping = d.input_mapping;\n      if (d.follow_up_prompt) obj.follow_up_prompt = d.follow_up_prompt;\n      if (d.follow_up_capture) obj.follow_up_capture = d.follow_up_capture;\n      if (d.gpt?.enabled) obj.gpt = { enabled: true };\n\n      tree.nodes[node.id] = obj;\n    });\n\n    const blob = new Blob([JSON.stringify(tree, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'conversation_tree.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handleImportJSON = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      try {\n        const json = JSON.parse(event.target.result);\n        setSystemPrompt(json.settings?.default_system_prompt || '');\n\n        const newNodes = Object.entries(json.nodes).map(([id, node], i) => ({\n          id,\n          position: { x: 150 + i * 60, y: 150 + i * 60 },\n          data: {\n            label: node.message.slice(0, 20) + (node.message.length > 20 ? '...' : ''),\n            message: node.message,\n            capture: node.capture || '',\n            next: node.next || '',\n            end: node.end || false,\n            expected_inputs: node.expected_inputs || [],\n            input_mapping: node.input_mapping || {},\n            follow_up_prompt: node.follow_up_prompt || '',\n            follow_up_capture: node.follow_up_capture || '',\n            gpt: node.gpt || { enabled: false }\n          },\n          type: 'default'\n        }));\n\n        const newEdges = [];\n        Object.entries(json.nodes).forEach(([source, node]) => {\n          if (node.options) {\n            Object.entries(node.options).forEach(([label, target]) => {\n              newEdges.push({\n                id: `e${source}-${target}`,\n                source,\n                target,\n                data: { label }\n              });\n            });\n          }\n        });\n\n        setNodes(newNodes);\n        setEdges(newEdges);\n      } catch (err) {\n        alert('Import failed: Invalid JSON');\n      }\n    };\n\n    reader.readAsText(file);\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\n      <div style={{ padding: '10px', background: '#eee' }}>\n        <button onClick={addNewNode}>Add Node</button>\n        <button onClick={deleteSelectedNode} style={{ marginLeft: 10 }}>\n          Delete Selected Node\n        </button>\n        <input\n          type=\"file\"\n          accept=\".json\"\n          onChange={handleImportJSON}\n          style={{ marginLeft: 10 }}\n        />\n        <button onClick={exportJSON} style={{ marginLeft: 10 }}>\n          Export to JSON\n        </button>\n        <div style={{ marginTop: 10 }}>\n          <label><strong>System Prompt</strong></label>\n          <textarea\n            value={systemPrompt}\n            onChange={(e) => setSystemPrompt(e.target.value)}\n            rows={4}\n            style={{ width: '100%' }}\n          />\n        </div>\n      </div>\n\n      <div style={{ flex: 1, display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onNodeClick={onNodeClick}\n            onEdgeClick={onEdgeClick}\n            fitView\n          >\n            <Background />\n            <MiniMap />\n            <Controls />\n          </ReactFlow>\n        </div>\n\n        {(selectedNode || selectedEdge) && (\n          <div style={{ width: 300, padding: 10, background: '#f4f4f4' }}>\n            {selectedNode && (\n              <>\n                <h3>Node Editor</h3>\n                <label>Message:</label>\n                <textarea\n                  value={selectedNode.data.message}\n                  onChange={(e) => handleFieldChange('message', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n                <label>Capture:</label>\n                <input\n                  value={selectedNode.data.capture}\n                  onChange={(e) => handleFieldChange('capture', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n                <label>Next:</label>\n                <input\n                  value={selectedNode.data.next}\n                  onChange={(e) => handleFieldChange('next', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n                <label>Expected Inputs:</label>\n                <input\n                  value={(selectedNode.data.expected_inputs || []).join(', ')}\n                  onChange={(e) => handleFieldChange('expected_inputs', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n                <label>Input Mapping (JSON):</label>\n                <textarea\n                  value={JSON.stringify(selectedNode.data.input_mapping || {}, null, 2)}\n                  onChange={(e) => handleFieldChange('input_mapping', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n                <label>Follow-up Prompt:</label>\n                <input\n                  value={selectedNode.data.follow_up_prompt}\n                  onChange={(e) => handleFieldChange('follow_up_prompt', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n                <label>Follow-up Capture:</label>\n                <input\n                  value={selectedNode.data.follow_up_capture}\n                  onChange={(e) => handleFieldChange('follow_up_capture', e.target.value)}\n                  style={{ width: '100%' }}\n                />\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedNode.data.gpt?.enabled || false}\n                    onChange={(e) => handleFieldChange('gpt', e.target.checked)}\n                  /> GPT Enabled\n                </label>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedNode.data.end || false}\n                    onChange={(e) => handleFieldChange('end', e.target.checked)}\n                  /> End Node\n                </label>\n              </>\n            )}\n\n            {selectedEdge && (\n              <>\n                <h3>Edge Editor</h3>\n                <label>Label:</label>\n                <input\n                  value={selectedEdge.data?.label || ''}\n                  onChange={(e) => handleEdgeLabelChange(e.target.value)}\n                  style={{ width: '100%' }}\n                />\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}