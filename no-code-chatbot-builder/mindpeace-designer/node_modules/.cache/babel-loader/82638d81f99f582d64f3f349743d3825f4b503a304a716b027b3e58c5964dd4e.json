{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes(nds => nds.filter(n => n.id !== selectedNodeId));\n    setEdges(eds => eds.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge));\n    setNodes(nds => nds.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        fontSize: \"20px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Segoe UI, sans-serif\",\n        background: \"#f1f5f9\",\n        padding: \"6px 12px\",\n        borderRadius: \"8px\",\n        zIndex: 10\n      },\n      children: \"Your AI Chatbot Designer \\u2014 Fast. Visual. Code-Free\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 50,\n        left: 10,\n        zIndex: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        style: {\n          marginRight: 10,\n          padding: \"6px 12px\",\n          borderRadius: 6,\n          background: \"#3b82f6\",\n          color: \"#fff\",\n          border: \"none\"\n        },\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        style: {\n          marginRight: 10,\n          padding: \"6px 12px\",\n          borderRadius: 6,\n          background: \"#ef4444\",\n          color: \"#fff\",\n          border: \"none\"\n        },\n        children: \"Delete Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportJSON,\n        style: {\n          padding: \"6px 12px\",\n          borderRadius: 6,\n          background: \"#10b981\",\n          color: \"#fff\",\n          border: \"none\"\n        },\n        children: \"Export JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 100,\n        left: 10,\n        zIndex: 10,\n        background: \"#e5e7eb\",\n        padding: 10,\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        width: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Editing Node: \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: 60\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 100,\n        left: 10,\n        zIndex: 10,\n        background: \"#f9fafb\",\n        padding: 10,\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        width: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Option Label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedEdge.label,\n          onChange: e => updateEdgeLabel(e.target.value),\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data,\n          label: n.data.message\n        },\n        style: getNodeStyle(n.data.type)\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0U4sC/rZ4xB9VFjcH5OY5Ry2Myk=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","selectedNode","find","n","selectedEdge","e","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","push","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","eds","nds","updated","addNode","newId","toString","Math","random","newNode","deleteNode","filter","onNodeClick","_","onEdgeClick","edge","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","newOptions","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","length","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","width","height","children","top","left","fontSize","fontWeight","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginRight","color","onChange","edges","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      setEdges((eds) =>\n        addEdge(\n          {\n            ...params,\n            id: edgeId,\n            markerEnd: { type: MarkerType.ArrowClosed },\n            label\n          },\n          eds\n        )\n      );\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === params.source) {\n            const updated = { ...node };\n            if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n              updated.data.options = { ...updated.data.options, [label]: params.target };\n            } else {\n              updated.data.next = params.target;\n            }\n            return updated;\n          }\n          return node;\n        })\n      );\n    },\n    [setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes((nds) => nds.filter((n) => n.id !== selectedNodeId));\n    setEdges((eds) => eds.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNodeId\n          ? { ...node, data: { ...node.data, [field]: value } }\n          : node\n      )\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    setEdges((eds) =>\n      eds.map((edge) => (edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge))\n    );\n\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === sourceId) {\n          const updated = { ...node };\n          if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = targetId;\n            updated.data.options = newOptions;\n          } else {\n            updated.data.next = targetId;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <h2\n        style={{\n          position: \"absolute\",\n          top: 10,\n          left: 10,\n          fontSize: \"20px\",\n          fontWeight: \"bold\",\n          fontFamily: \"Segoe UI, sans-serif\",\n          background: \"#f1f5f9\",\n          padding: \"6px 12px\",\n          borderRadius: \"8px\",\n          zIndex: 10\n        }}\n      >\n        Your AI Chatbot Designer — Fast. Visual. Code-Free\n      </h2>\n\n      <div style={{ position: \"absolute\", top: 50, left: 10, zIndex: 10 }}>\n        <button\n          onClick={addNode}\n          style={{ marginRight: 10, padding: \"6px 12px\", borderRadius: 6, background: \"#3b82f6\", color: \"#fff\", border: \"none\" }}\n        >\n          Add Node\n        </button>\n        <button\n          onClick={deleteNode}\n          style={{ marginRight: 10, padding: \"6px 12px\", borderRadius: 6, background: \"#ef4444\", color: \"#fff\", border: \"none\" }}\n        >\n          Delete Node\n        </button>\n        <button\n          onClick={exportJSON}\n          style={{ padding: \"6px 12px\", borderRadius: 6, background: \"#10b981\", color: \"#fff\", border: \"none\" }}\n        >\n          Export JSON\n        </button>\n      </div>\n\n      {selectedNode && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: 100,\n            left: 10,\n            zIndex: 10,\n            background: \"#e5e7eb\",\n            padding: 10,\n            border: \"1px solid #ccc\",\n            borderRadius: \"8px\",\n            width: \"300px\"\n          }}\n        >\n          <h4>Editing Node: {selectedNode.id}</h4>\n          <div>\n            <label>Message:</label>\n            <textarea\n              value={selectedNode.data.message}\n              onChange={(e) => updateNodeField(\"message\", e.target.value)}\n              style={{ width: \"100%\", height: 60 }}\n            />\n          </div>\n          <div>\n            <label>Type:</label>\n            <select\n              value={selectedNode.data.type}\n              onChange={(e) => updateNodeField(\"type\", e.target.value)}\n              style={{ width: \"100%\" }}\n            >\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n          </div>\n          <div>\n            <label>Capture Field:</label>\n            <input\n              type=\"text\"\n              value={selectedNode.data.capture}\n              onChange={(e) => updateNodeField(\"capture\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n          <div>\n            <label>Next Node ID:</label>\n            <input\n              type=\"text\"\n              value={selectedNode.data.next}\n              onChange={(e) => updateNodeField(\"next\", e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: 100,\n            left: 10,\n            zIndex: 10,\n            background: \"#f9fafb\",\n            padding: 10,\n            border: \"1px solid #ccc\",\n            borderRadius: \"8px\",\n            width: \"300px\"\n          }}\n        >\n          <h4>Editing Edge</h4>\n          <div>\n            <label>Option Label:</label>\n            <input\n              type=\"text\"\n              value={selectedEdge.label}\n              onChange={(e) => updateEdgeLabel(e.target.value)}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({\n          ...n,\n          data: { ...n.data, label: n.data.message },\n          style: getNodeStyle(n.data.type)\n        }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}