{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet nodeCounter = 2;\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = edges.find(e => e.id === selectedEdgeId);\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(edges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, edges]);\n  const allEdges = [...edges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const baseX = 200;\n    const baseY = 100;\n    const parent = nodes.find(n => n.id === selectedNodeId);\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: parent ? {\n        x: parent.position.x + baseX,\n        y: parent.position.y + baseY\n      } : {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    setNodes(nds => nds.filter(n => n.id !== selectedNodeId));\n    setEdges(eds => eds.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId));\n    setSelectedNodeId(null);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === selectedNodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        };\n      }\n      return node;\n    }));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge));\n    setNodes(nds => nds.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const getNodeStyle = type => {\n    switch (type) {\n      case \"choice\":\n        return {\n          background: \"#e0f2fe\",\n          padding: 10,\n          borderRadius: 8,\n          minWidth: 180\n        };\n      case \"input\":\n        return {\n          background: \"#fef9c3\",\n          padding: 10,\n          borderRadius: 8,\n          minWidth: 180\n        };\n      case \"multi_choice\":\n        return {\n          background: \"#ede9fe\",\n          padding: 10,\n          borderRadius: 8,\n          minWidth: 180\n        };\n      case \"gpt\":\n        return {\n          background: \"#dcfce7\",\n          padding: 10,\n          borderRadius: 8,\n          minWidth: 180\n        };\n      case \"end\":\n        return {\n          background: \"#fee2e2\",\n          padding: 10,\n          borderRadius: 8,\n          minWidth: 180\n        };\n      default:\n        return {\n          background: \"#f3f4f6\",\n          padding: 10,\n          borderRadius: 8,\n          minWidth: 180\n        };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 10,\n        zIndex: 10,\n        backgroundColor: \"#3b82f6\",\n        color: \"white\",\n        border: \"none\",\n        padding: \"8px 16px\",\n        borderRadius: 8\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportJSON,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 130,\n        zIndex: 10,\n        backgroundColor: \"#10b981\",\n        color: \"white\",\n        border: \"none\",\n        padding: \"8px 16px\",\n        borderRadius: 8\n      },\n      children: \"Export JSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteNode,\n      style: {\n        position: \"absolute\",\n        top: 10,\n        left: 270,\n        zIndex: 10,\n        backgroundColor: \"#ef4444\",\n        color: \"white\",\n        border: \"none\",\n        padding: \"8px 16px\",\n        borderRadius: 8\n      },\n      children: \"Delete Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 60,\n        left: 10,\n        zIndex: 10,\n        background: \"#d4d4d8\",\n        padding: 12,\n        borderRadius: 10,\n        width: 320,\n        boxShadow: \"0 2px 10px rgba(0,0,0,0.1)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Editing Node: \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: selectedNode.data.message,\n          onChange: e => updateNodeField(\"message\", e.target.value),\n          style: {\n            width: \"100%\",\n            height: \"80px\",\n            resize: \"vertical\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedNode.data.type,\n          onChange: e => updateNodeField(\"type\", e.target.value),\n          style: {\n            width: \"100%\",\n            marginTop: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"choice\",\n            children: \"choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"multi_choice\",\n            children: \"multi_choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gpt\",\n            children: \"gpt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"end\",\n            children: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Capture Field:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.capture,\n          onChange: e => updateNodeField(\"capture\", e.target.value),\n          style: {\n            width: \"100%\",\n            marginTop: 5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Node ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: selectedNode.data.next,\n          onChange: e => updateNodeField(\"next\", e.target.value),\n          style: {\n            width: \"100%\",\n            marginTop: 5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 60,\n        left: 10,\n        zIndex: 10,\n        background: \"#f9fafb\",\n        padding: 12,\n        borderRadius: 10,\n        width: 320,\n        boxShadow: \"0 2px 10px rgba(0,0,0,0.1)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Option Label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedEdge.label,\n        onChange: e => updateEdgeLabel(e.target.value),\n        style: {\n          width: \"100%\",\n          marginTop: 5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(node => ({\n        ...node,\n        style: getNodeStyle(node.data.type),\n        data: {\n          ...node.data,\n          label: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              whiteSpace: \"pre-wrap\",\n              wordWrap: \"break-word\"\n            },\n            children: node.data.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)\n        }\n      })),\n      edges: allEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cCx2Hiq7+GbYnHw91PgTNsVglHg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","nodeCounter","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","selectedNode","find","n","selectedEdge","e","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","push","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","eds","nds","updated","addNode","newId","toString","baseX","baseY","parent","newNode","Math","random","deleteNode","filter","onNodeClick","_","onEdgeClick","edge","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","newOptions","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","length","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","getNodeStyle","background","padding","borderRadius","minWidth","width","height","children","onClick","top","left","zIndex","backgroundColor","color","border","fileName","_jsxFileName","lineNumber","columnNumber","boxShadow","onChange","resize","marginTop","whiteSpace","wordWrap","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nlet nodeCounter = 2;\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = edges.find((e) => e.id === selectedEdgeId);\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(edges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, edges]);\n\n  const allEdges = [...edges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      setEdges((eds) =>\n        addEdge(\n          {\n            ...params,\n            id: edgeId,\n            markerEnd: { type: MarkerType.ArrowClosed },\n            label\n          },\n          eds\n        )\n      );\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === params.source) {\n            const updated = { ...node };\n            if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n              updated.data.options = {\n                ...updated.data.options,\n                [label]: params.target\n              };\n            } else {\n              updated.data.next = params.target;\n            }\n            return updated;\n          }\n          return node;\n        })\n      );\n    },\n    [setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    const baseX = 200;\n    const baseY = 100;\n    const parent = nodes.find((n) => n.id === selectedNodeId);\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: parent\n        ? { x: parent.position.x + baseX, y: parent.position.y + baseY }\n        : { x: Math.random() * 400, y: Math.random() * 400 },\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n\n    setNodes((nds) => nds.filter((n) => n.id !== selectedNodeId));\n    setEdges((eds) =>\n      eds.filter((e) => e.source !== selectedNodeId && e.target !== selectedNodeId)\n    );\n    setSelectedNodeId(null);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === selectedNodeId) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              [field]: value\n            }\n          };\n        }\n        return node;\n      })\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n      )\n    );\n\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === sourceId) {\n          const updated = { ...node };\n          if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = targetId;\n            updated.data.options = newOptions;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const getNodeStyle = (type) => {\n    switch (type) {\n      case \"choice\":\n        return { background: \"#e0f2fe\", padding: 10, borderRadius: 8, minWidth: 180 };\n      case \"input\":\n        return { background: \"#fef9c3\", padding: 10, borderRadius: 8, minWidth: 180 };\n      case \"multi_choice\":\n        return { background: \"#ede9fe\", padding: 10, borderRadius: 8, minWidth: 180 };\n      case \"gpt\":\n        return { background: \"#dcfce7\", padding: 10, borderRadius: 8, minWidth: 180 };\n      case \"end\":\n        return { background: \"#fee2e2\", padding: 10, borderRadius: 8, minWidth: 180 };\n      default:\n        return { background: \"#f3f4f6\", padding: 10, borderRadius: 8, minWidth: 180 };\n    }\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <button onClick={addNode} style={{ position: \"absolute\", top: 10, left: 10, zIndex: 10, backgroundColor: \"#3b82f6\", color: \"white\", border: \"none\", padding: \"8px 16px\", borderRadius: 8 }}>\n        Add Node\n      </button>\n      <button onClick={exportJSON} style={{ position: \"absolute\", top: 10, left: 130, zIndex: 10, backgroundColor: \"#10b981\", color: \"white\", border: \"none\", padding: \"8px 16px\", borderRadius: 8 }}>\n        Export JSON\n      </button>\n      <button onClick={deleteNode} style={{ position: \"absolute\", top: 10, left: 270, zIndex: 10, backgroundColor: \"#ef4444\", color: \"white\", border: \"none\", padding: \"8px 16px\", borderRadius: 8 }}>\n        Delete Node\n      </button>\n\n      {selectedNode && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: 60,\n            left: 10,\n            zIndex: 10,\n            background: \"#d4d4d8\",\n            padding: 12,\n            borderRadius: 10,\n            width: 320,\n            boxShadow: \"0 2px 10px rgba(0,0,0,0.1)\"\n          }}\n        >\n          <h4>Editing Node: {selectedNode.id}</h4>\n          <div>\n            <label>Message:</label>\n            <textarea\n              value={selectedNode.data.message}\n              onChange={(e) => updateNodeField(\"message\", e.target.value)}\n              style={{ width: \"100%\", height: \"80px\", resize: \"vertical\" }}\n            />\n          </div>\n          <div>\n            <label>Type:</label>\n            <select\n              value={selectedNode.data.type}\n              onChange={(e) => updateNodeField(\"type\", e.target.value)}\n              style={{ width: \"100%\", marginTop: 5 }}\n            >\n              <option value=\"choice\">choice</option>\n              <option value=\"input\">input</option>\n              <option value=\"multi_choice\">multi_choice</option>\n              <option value=\"gpt\">gpt</option>\n              <option value=\"end\">end</option>\n            </select>\n          </div>\n          <div>\n            <label>Capture Field:</label>\n            <input\n              type=\"text\"\n              value={selectedNode.data.capture}\n              onChange={(e) => updateNodeField(\"capture\", e.target.value)}\n              style={{ width: \"100%\", marginTop: 5 }}\n            />\n          </div>\n          <div>\n            <label>Next Node ID:</label>\n            <input\n              type=\"text\"\n              value={selectedNode.data.next}\n              onChange={(e) => updateNodeField(\"next\", e.target.value)}\n              style={{ width: \"100%\", marginTop: 5 }}\n            />\n          </div>\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: 60,\n            left: 10,\n            zIndex: 10,\n            background: \"#f9fafb\",\n            padding: 12,\n            borderRadius: 10,\n            width: 320,\n            boxShadow: \"0 2px 10px rgba(0,0,0,0.1)\"\n          }}\n        >\n          <h4>Editing Edge</h4>\n          <label>Option Label:</label>\n          <input\n            type=\"text\"\n            value={selectedEdge.label}\n            onChange={(e) => updateEdgeLabel(e.target.value)}\n            style={{ width: \"100%\", marginTop: 5 }}\n          />\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((node) => ({\n          ...node,\n          style: getNodeStyle(node.data.type),\n          data: {\n            ...node.data,\n            label: (\n              <div style={{ whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\n                {node.data.message}\n              </div>\n            )\n          }\n        }))}\n        edges={allEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}