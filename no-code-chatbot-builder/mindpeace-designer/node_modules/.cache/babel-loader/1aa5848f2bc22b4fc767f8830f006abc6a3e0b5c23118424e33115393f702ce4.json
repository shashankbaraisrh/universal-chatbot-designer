{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const history = useRef([{\n    nodes: initialNodes,\n    edges: initialEdges\n  }]);\n  const historyIndex = useRef(0);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = {\n      nodes: newNodes,\n      edges: newEdges\n    };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const {\n        nodes,\n        edges\n      } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n  const getNodeStyle = type => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return {\n          ...baseStyle,\n          background: \"#E0F2FE\",\n          border: \"1px solid #38bdf8\"\n        };\n      case \"input\":\n        return {\n          ...baseStyle,\n          background: \"#DCFCE7\",\n          border: \"1px solid #22c55e\"\n        };\n      case \"multi_choice\":\n        return {\n          ...baseStyle,\n          background: \"#FEF9C3\",\n          border: \"1px solid #eab308\"\n        };\n      case \"gpt\":\n        return {\n          ...baseStyle,\n          background: \"#F3E8FF\",\n          border: \"1px solid #8b5cf6\"\n        };\n      case \"end\":\n        return {\n          ...baseStyle,\n          background: \"#FEE2E2\",\n          border: \"1px solid #f87171\"\n        };\n      default:\n        return {\n          ...baseStyle,\n          background: \"#F3F4F6\",\n          border: \"1px solid #d1d5db\"\n        };\n    }\n  };\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        var _payload$nodes$;\n        const firstMsg = ((_payload$nodes$ = payload.nodes[\"1\"]) === null || _payload$nodes$ === void 0 ? void 0 : _payload$nodes$.message) || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{\n          sender: \"bot\",\n          message: firstMsg\n        }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n  const handleUserResponse = async response => {\n    var _currentNode$options, _submittedFlow$nodes;\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message: response\n    }];\n    setChatHistory(updatedHistory);\n    const newInputs = {\n      ...userInputs\n    };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || ((_currentNode$options = currentNode.options) === null || _currentNode$options === void 0 ? void 0 : _currentNode$options[response]);\n    const nextNode = (_submittedFlow$nodes = submittedFlow.nodes) === null || _submittedFlow$nodes === void 0 ? void 0 : _submittedFlow$nodes[nextId];\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Conversation complete.\"\n      }]);\n      setCurrentNodeId(null);\n      return;\n    }\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: gptReply\n        }]);\n        setCurrentNodeId(\"__gpt_continuation__\");\n      } catch (err) {\n        setChatHistory([...updatedHistory, {\n          sender: \"bot\",\n          message: nextNode.message\n        }, {\n          sender: \"bot\",\n          message: \"Error contacting GPT.\"\n        }]);\n        setCurrentNodeId(\"__gpt_continuation__\");\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: nextNode.message\n      }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n  const handleGPTContinuation = async message => {\n    const updatedHistory = [...chatHistory, {\n      sender: \"user\",\n      message\n    }];\n    setChatHistory(updatedHistory);\n    setInputValue(\"\");\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message,\n          summary: Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\"),\n          system_prompt: submittedFlow.settings.system_prompt,\n          gpt_model: submittedFlow.settings.gpt_model\n        })\n      });\n      const data = await res.json();\n      const gptReply = data.reply || \"No response from GPT.\";\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: gptReply\n      }]);\n    } catch (err) {\n      setChatHistory([...updatedHistory, {\n        sender: \"bot\",\n        message: \"Error contacting GPT.\"\n      }]);\n    }\n  };\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId ? {\n      x: nodes.find(n => n.id === selectedNodeId).position.x + 220,\n      y: nodes.find(n => n.id === selectedNodeId).position.y + 50\n    } : {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter(n => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(e => e.source !== selectedNodeId && e.target !== selectedNodeId);\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map(node => node.id === selectedNodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge);\n    const updatedNodes = nodes.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes.map(n => ({\n          ...n,\n          data: {\n            ...n.data,\n            label: n.data.message\n          },\n          style: getNodeStyle(n.data.type)\n        })),\n        edges: allEdges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: params => {\n          const label = prompt(\"Enter option key for this connection:\", \"\");\n          if (!label) return;\n          const edgeId = `e${params.source}-${params.target}`;\n          const updatedEdges = addEdge({\n            ...params,\n            id: edgeId,\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            },\n            label\n          }, manualEdges);\n          const updatedNodes = nodes.map(node => {\n            if (node.id === params.source) {\n              const updated = {\n                ...node\n              };\n              if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                updated.data.options = {\n                  ...updated.data.options,\n                  [label]: params.target\n                };\n              } else {\n                updated.data.next = params.target;\n              }\n              return updated;\n            }\n            return node;\n          });\n          setEdges(updatedEdges);\n          setNodes(updatedNodes);\n          pushToHistory(updatedNodes, updatedEdges);\n        },\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        fitView: true,\n        edgeLabelMode: \"always\",\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatbotPanel, {\n      chatbotReady: chatbotReady,\n      chatHistory: chatHistory,\n      inputValue: inputValue,\n      currentNodeId: currentNodeId,\n      submittedFlow: submittedFlow,\n      setChatHistory: setChatHistory,\n      setInputValue: setInputValue,\n      handleUserResponse: handleUserResponse,\n      handleGPTContinuation: handleGPTContinuation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kpvbw4ZUr6bpSw0VuRRea918wec=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","ChatbotPanel","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","chatbotReady","setChatbotReady","submittedFlow","setSubmittedFlow","currentNodeId","setCurrentNodeId","chatHistory","setChatHistory","userInputs","setUserInputs","inputValue","setInputValue","history","edges","historyIndex","selectedNode","find","n","selectedEdge","e","pushToHistory","newNodes","newEdges","currentState","newHistory","current","slice","push","undo","redo","length","getNodeStyle","baseStyle","borderRadius","padding","boxShadow","whiteSpace","wordWrap","fontFamily","minWidth","maxWidth","background","border","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","getExportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","Object","keys","submitFlow","payload","res","fetch","method","headers","body","JSON","stringify","ok","_payload$nodes$","firstMsg","sender","alert","err","handleUserResponse","response","_currentNode$options","_submittedFlow$nodes","currentNode","updatedHistory","newInputs","nextId","nextNode","summaryText","entries","k","v","join","summary","json","gptReply","reply","handleGPTContinuation","addNode","newId","toString","Math","random","newNode","updatedNodes","deleteNode","filter","updatedEdges","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","edge","updated","newOptions","onNodeClick","_","onEdgeClick","width","height","display","children","flex","onConnect","params","prompt","edgeId","fitView","edgeLabelMode","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport ChatbotPanel from \"./ChatbotPanel\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const [chatbotReady, setChatbotReady] = useState(false);\n  const [submittedFlow, setSubmittedFlow] = useState(null);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInputs, setUserInputs] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const history = useRef([{ nodes: initialNodes, edges: initialEdges }]);\n  const historyIndex = useRef(0);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const pushToHistory = (newNodes, newEdges) => {\n    const currentState = { nodes: newNodes, edges: newEdges };\n    const newHistory = history.current.slice(0, historyIndex.current + 1);\n    newHistory.push(currentState);\n    history.current = newHistory;\n    historyIndex.current++;\n  };\n\n  const undo = () => {\n    if (historyIndex.current > 0) {\n      historyIndex.current--;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex.current < history.current.length - 1) {\n      historyIndex.current++;\n      const { nodes, edges } = history.current[historyIndex.current];\n      setNodes(nodes);\n      setEdges(edges);\n    }\n  };\n\n  const getNodeStyle = (type) => {\n    const baseStyle = {\n      borderRadius: 10,\n      padding: 10,\n      boxShadow: \"2px 2px 8px #ccc\",\n      whiteSpace: \"pre-wrap\",\n      wordWrap: \"break-word\",\n      fontFamily: \"Segoe UI, sans-serif\",\n      minWidth: 180,\n      maxWidth: 300\n    };\n    switch (type) {\n      case \"choice\":\n        return { ...baseStyle, background: \"#E0F2FE\", border: \"1px solid #38bdf8\" };\n      case \"input\":\n        return { ...baseStyle, background: \"#DCFCE7\", border: \"1px solid #22c55e\" };\n      case \"multi_choice\":\n        return { ...baseStyle, background: \"#FEF9C3\", border: \"1px solid #eab308\" };\n      case \"gpt\":\n        return { ...baseStyle, background: \"#F3E8FF\", border: \"1px solid #8b5cf6\" };\n      case \"end\":\n        return { ...baseStyle, background: \"#FEE2E2\", border: \"1px solid #f87171\" };\n      default:\n        return { ...baseStyle, background: \"#F3F4F6\", border: \"1px solid #d1d5db\" };\n    }\n  };\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map((e) => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const getExportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    return output;\n  };\n\n  const submitFlow = async () => {\n    const payload = getExportJSON();\n    try {\n      const res = await fetch(\"http://localhost:5000/submit\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n      if (res.ok) {\n        const firstMsg = payload.nodes[\"1\"]?.message || \"Let's begin.\";\n        setSubmittedFlow(payload);\n        setChatbotReady(true);\n        setChatHistory([{ sender: \"bot\", message: firstMsg }]);\n        setUserInputs({});\n        setInputValue(\"\");\n        setCurrentNodeId(\"1\");\n        alert(\"Flow submitted successfully.\");\n      } else alert(\"Submission failed.\");\n    } catch (err) {\n      alert(\"Backend error.\");\n    }\n  };\n\n  const handleUserResponse = async (response) => {\n    if (!submittedFlow || !currentNodeId) return;\n    const currentNode = submittedFlow.nodes[currentNodeId];\n    const updatedHistory = [...chatHistory, { sender: \"user\", message: response }];\n    setChatHistory(updatedHistory);\n    const newInputs = { ...userInputs };\n    if (currentNode.capture) newInputs[currentNode.capture] = response;\n    let nextId = currentNode.next || currentNode.options?.[response];\n    const nextNode = submittedFlow.nodes?.[nextId];\n\n    if (!nextNode) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Conversation complete.\" }]);\n      setCurrentNodeId(null);\n      return;\n    }\n\n    if (nextNode.type === \"gpt\") {\n      const summaryText = Object.entries(newInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n      try {\n        const res = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: response,\n            summary: summaryText,\n            system_prompt: submittedFlow.settings.system_prompt,\n            gpt_model: submittedFlow.settings.gpt_model\n          })\n        });\n        const data = await res.json();\n        const gptReply = data.reply || \"No response from GPT.\";\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: gptReply }\n        ]);\n        setCurrentNodeId(\"__gpt_continuation__\");\n      } catch (err) {\n        setChatHistory([\n          ...updatedHistory,\n          { sender: \"bot\", message: nextNode.message },\n          { sender: \"bot\", message: \"Error contacting GPT.\" }\n        ]);\n        setCurrentNodeId(\"__gpt_continuation__\");\n      }\n    } else {\n      setUserInputs(newInputs);\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: nextNode.message }]);\n      setCurrentNodeId(nextId);\n    }\n  };\n\n  const handleGPTContinuation = async (message) => {\n    const updatedHistory = [...chatHistory, { sender: \"user\", message }];\n    setChatHistory(updatedHistory);\n    setInputValue(\"\");\n    try {\n      const res = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          message,\n          summary: Object.entries(userInputs).map(([k, v]) => `${k}: ${v}`).join(\"\\n\"),\n          system_prompt: submittedFlow.settings.system_prompt,\n          gpt_model: submittedFlow.settings.gpt_model\n        })\n      });\n      const data = await res.json();\n      const gptReply = data.reply || \"No response from GPT.\";\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: gptReply }]);\n    } catch (err) {\n      setChatHistory([...updatedHistory, { sender: \"bot\", message: \"Error contacting GPT.\" }]);\n    }\n  };\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    const position = selectedNodeId\n      ? {\n          x: nodes.find((n) => n.id === selectedNodeId).position.x + 220,\n          y: nodes.find((n) => n.id === selectedNodeId).position.y + 50\n        }\n      : { x: Math.random() * 400, y: Math.random() * 400 };\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position,\n      type: \"default\"\n    };\n    const updatedNodes = [...nodes, newNode];\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const deleteNode = () => {\n    if (!selectedNodeId) return;\n    const updatedNodes = nodes.filter((n) => n.id !== selectedNodeId);\n    const updatedEdges = manualEdges.filter(\n      (e) => e.source !== selectedNodeId && e.target !== selectedNodeId\n    );\n    setNodes(updatedNodes);\n    setEdges(updatedEdges);\n    setSelectedNodeId(null);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const updateNodeField = (field, value) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === selectedNodeId\n        ? { ...node, data: { ...node.data, [field]: value } }\n        : node\n    );\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, manualEdges);\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    const updatedEdges = manualEdges.map((edge) =>\n      edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n    );\n    const updatedNodes = nodes.map((node) => {\n      if (node.id === sourceId) {\n        const updated = { ...node };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = { ...updated.data.options };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    });\n    setEdges(updatedEdges);\n    setNodes(updatedNodes);\n    pushToHistory(updatedNodes, updatedEdges);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"flex\" }}>\n      {/* Left Designer UI */}\n      <div style={{ flex: 1, position: \"relative\" }}>\n        {/* (React Flow UI + all buttons + editor — same as original) */}\n        {/* PLACEHOLDER: KEEP ALL YOUR BUTTONS, EDITORS, AND FLOW HERE */}\n        {/* ⬇️ KEEP EXACT UI CODE YOU HAD BEFORE HERE ⬇️ */}\n        \n        {/* ... */}\n        \n        <ReactFlow\n          nodes={nodes.map((n) => ({ ...n, data: { ...n.data, label: n.data.message }, style: getNodeStyle(n.data.type) }))}\n          edges={allEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={(params) => {\n            const label = prompt(\"Enter option key for this connection:\", \"\");\n            if (!label) return;\n            const edgeId = `e${params.source}-${params.target}`;\n            const updatedEdges = addEdge({ ...params, id: edgeId, markerEnd: { type: MarkerType.ArrowClosed }, label }, manualEdges);\n            const updatedNodes = nodes.map((node) => {\n              if (node.id === params.source) {\n                const updated = { ...node };\n                if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n                  updated.data.options = { ...updated.data.options, [label]: params.target };\n                } else {\n                  updated.data.next = params.target;\n                }\n                return updated;\n              }\n              return node;\n            });\n            setEdges(updatedEdges);\n            setNodes(updatedNodes);\n            pushToHistory(updatedNodes, updatedEdges);\n          }}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          fitView\n          edgeLabelMode=\"always\"\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n      </div>\n\n      {/* Right Chat Panel */}\n      <ChatbotPanel\n        chatbotReady={chatbotReady}\n        chatHistory={chatHistory}\n        inputValue={inputValue}\n        currentNodeId={currentNodeId}\n        submittedFlow={submittedFlow}\n        setChatHistory={setChatHistory}\n        setInputValue={setInputValue}\n        handleUserResponse={handleUserResponse}\n        handleGPTContinuation={handleGPTContinuation}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}