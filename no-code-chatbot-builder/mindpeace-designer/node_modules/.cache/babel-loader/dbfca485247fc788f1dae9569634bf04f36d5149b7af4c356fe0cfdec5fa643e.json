{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mindpeace-designer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  data: {\n    message: \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n    type: \"choice\",\n    options: {},\n    capture: \"\",\n    next: \"\"\n  },\n  position: {\n    x: 250,\n    y: 0\n  },\n  type: \"default\"\n}];\nconst initialEdges = [];\nlet nodeCounter = 2;\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n  const selectedNode = nodes.find(n => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find(e => e.id === selectedEdgeId);\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(manualEdges.map(e => `${e.source}->${e.target}`));\n    const autoEdges = [];\n    for (const node of nodes) {\n      var _node$data;\n      const target = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: {\n            strokeDasharray: \"5,5\",\n            stroke: \"#999\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n  const onConnect = useCallback(params => {\n    const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n    if (!label) return;\n    const edgeId = `e${params.source}-${params.target}`;\n    setEdges(eds => addEdge({\n      ...params,\n      id: edgeId,\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      },\n      label\n    }, eds));\n    setNodes(nds => nds.map(node => {\n      if (node.id === params.source) {\n        const updated = {\n          ...node\n        };\n        if (node.data.type === \"choice\" || node.data.type === \"multi_choice\") {\n          updated.data.options = {\n            ...updated.data.options,\n            [label]: params.target\n          };\n        } else {\n          updated.data.next = params.target;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  }, [setEdges, setNodes]);\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n    let newPosition = {\n      x: 100,\n      y: 100\n    };\n    if (selectedNodeId) {\n      const selected = nodes.find(n => n.id === selectedNodeId);\n      if (selected) {\n        newPosition = {\n          x: selected.position.x + 50,\n          y: selected.position.y + 120\n        };\n      }\n    } else if (nodes.length > 0) {\n      const lowest = nodes.reduce((a, b) => a.position.y > b.position.y ? a : b);\n      newPosition = {\n        x: lowest.position.x + 50,\n        y: lowest.position.y + 120\n      };\n    }\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: newPosition,\n      type: \"default\"\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n  const updateNodeField = (field, value) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === selectedNodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        };\n      }\n      return node;\n    }));\n  };\n  const updateEdgeLabel = newLabel => {\n    if (!selectedEdge) return;\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n    setEdges(eds => eds.map(edge => edge.id === selectedEdge.id ? {\n      ...edge,\n      label: newLabel\n    } : edge));\n    setNodes(nds => nds.map(node => {\n      if (node.id === sourceId) {\n        const updated = {\n          ...node\n        };\n        if (updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") {\n          const newOptions = {\n            ...updated.data.options\n          };\n          delete newOptions[oldLabel];\n          newOptions[newLabel] = targetId;\n          updated.data.options = newOptions;\n        } else {\n          updated.data.next = targetId;\n        }\n        return updated;\n      }\n      return node;\n    }));\n  };\n  const handleNodesChange = useCallback(changes => {\n    const deletedNodeIds = changes.filter(change => change.type === \"remove\").map(change => change.id);\n    if (deletedNodeIds.length > 0) {\n      setNodes(nds => nds.map(node => {\n        const updated = {\n          ...node\n        };\n        if ((updated.data.type === \"choice\" || updated.data.type === \"multi_choice\") && updated.data.options) {\n          const cleanedOptions = Object.entries(updated.data.options).filter(([, targetId]) => !deletedNodeIds.includes(targetId));\n          updated.data.options = Object.fromEntries(cleanedOptions);\n        }\n        if (deletedNodeIds.includes(updated.data.next)) {\n          updated.data.next = \"\";\n        }\n        return updated;\n      }));\n      setEdges(eds => eds.filter(edge => !deletedNodeIds.includes(edge.source) && !deletedNodeIds.includes(edge.target)));\n    }\n    onNodesChange(changes);\n  }, [onNodesChange, setNodes, setEdges]);\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt: \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n    nodes.forEach(node => {\n      const {\n        id,\n        data\n      } = node;\n      const {\n        message,\n        type,\n        options,\n        capture,\n        next\n      } = data;\n      const nodeObj = {\n        message,\n        type\n      };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen h-screen bg-gray-50 font-sans\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      className: \"absolute top-4 left-4 z-10 bg-blue-600 text-white px-4 py-2 rounded-xl shadow hover:bg-blue-700 transition\",\n      children: \"\\u2795 Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportJSON,\n      className: \"absolute top-4 left-40 z-10 bg-green-600 text-white px-4 py-2 rounded-xl shadow hover:bg-green-700 transition\",\n      children: \"\\u2B07\\uFE0F Export JSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-20 left-4 z-10 bg-white p-4 rounded-xl shadow-lg w-80 space-y-3 border border-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-bold text-lg text-gray-800\",\n        children: [\"\\uD83D\\uDEE0\\uFE0F Editing Node: \", selectedNode.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium text-gray-700\",\n        children: \"Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: selectedNode.data.message,\n        onChange: e => updateNodeField(\"message\", e.target.value),\n        className: \"w-full p-2 border border-gray-300 rounded-md\",\n        rows: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium text-gray-700\",\n        children: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedNode.data.type,\n        onChange: e => updateNodeField(\"type\", e.target.value),\n        className: \"w-full p-2 border border-gray-300 rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"choice\",\n          children: \"choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"multi_choice\",\n          children: \"multi_choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt\",\n          children: \"gpt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"end\",\n          children: \"end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium text-gray-700\",\n        children: \"Capture Field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.capture,\n        onChange: e => updateNodeField(\"capture\", e.target.value),\n        className: \"w-full p-2 border border-gray-300 rounded-md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium text-gray-700\",\n        children: \"Next Node ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedNode.data.next,\n        onChange: e => updateNodeField(\"next\", e.target.value),\n        className: \"w-full p-2 border border-gray-300 rounded-md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }, this), selectedEdge && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-20 left-4 z-10 bg-white p-4 rounded-xl shadow-lg w-80 space-y-3 border border-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-bold text-lg text-gray-800\",\n        children: \"\\u270F\\uFE0F Editing Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium text-gray-700\",\n        children: \"Option Label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedEdge.label,\n        onChange: e => updateEdgeLabel(e.target.value),\n        className: \"w-full p-2 border border-gray-300 rounded-md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data,\n          label: n.data.message\n        }\n      })),\n      edges: allEdges,\n      onNodesChange: handleNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      onEdgeClick: onEdgeClick,\n      fitView: true,\n      edgeLabelMode: \"always\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hqAdo8z1WkWukdxPiihnmDddiy8=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useState","useMemo","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","jsxDEV","_jsxDEV","initialNodes","id","data","message","type","options","capture","next","position","x","y","initialEdges","nodeCounter","App","_s","nodes","setNodes","onNodesChange","manualEdges","setEdges","onEdgesChange","selectedNodeId","setSelectedNodeId","selectedEdgeId","setSelectedEdgeId","selectedNode","find","n","selectedEdge","e","autoGeneratedEdges","existingConnections","Set","map","source","target","autoEdges","node","_node$data","has","push","animated","style","strokeDasharray","stroke","markerEnd","ArrowClosed","label","allEdges","onConnect","params","prompt","edgeId","eds","nds","updated","addNode","newId","toString","newPosition","selected","length","lowest","reduce","a","b","newNode","onNodeClick","_","onEdgeClick","edge","updateNodeField","field","value","updateEdgeLabel","newLabel","oldLabel","sourceId","targetId","newOptions","handleNodesChange","changes","deletedNodeIds","filter","change","cleanedOptions","Object","entries","includes","fromEntries","exportJSON","output","settings","system_prompt","gpt_model","forEach","nodeObj","keys","blob","Blob","JSON","stringify","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","rows","edges","fitView","edgeLabelMode","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/mindpeace-designer/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useMemo } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  MarkerType\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\nconst initialNodes = [\n  {\n    id: \"1\",\n    data: {\n      message:\n        \"Hi there, I’m MindPeace — your friendly mental health support assistant. Would you like to begin our conversation?\",\n      type: \"choice\",\n      options: {},\n      capture: \"\",\n      next: \"\"\n    },\n    position: { x: 250, y: 0 },\n    type: \"default\"\n  }\n];\n\nconst initialEdges = [];\nlet nodeCounter = 2;\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [manualEdges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [selectedEdgeId, setSelectedEdgeId] = useState(null);\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId);\n  const selectedEdge = manualEdges.find((e) => e.id === selectedEdgeId);\n\n  const autoGeneratedEdges = useMemo(() => {\n    const existingConnections = new Set(\n      manualEdges.map((e) => `${e.source}->${e.target}`)\n    );\n    const autoEdges = [];\n\n    for (const node of nodes) {\n      const target = node.data?.next;\n      if (target && !existingConnections.has(`${node.id}->${target}`)) {\n        autoEdges.push({\n          id: `auto-${node.id}-${target}`,\n          source: node.id,\n          target,\n          animated: false,\n          type: \"default\",\n          style: { strokeDasharray: \"5,5\", stroke: \"#999\" },\n          markerEnd: { type: MarkerType.ArrowClosed },\n          label: \"next\"\n        });\n      }\n    }\n    return autoEdges;\n  }, [nodes, manualEdges]);\n\n  const allEdges = [...manualEdges, ...autoGeneratedEdges];\n\n  const onConnect = useCallback(\n    (params) => {\n      const label = prompt(\"Enter option key for this connection (e.g., yes, no, Stress):\", \"\");\n      if (!label) return;\n\n      const edgeId = `e${params.source}-${params.target}`;\n      setEdges((eds) =>\n        addEdge(\n          {\n            ...params,\n            id: edgeId,\n            markerEnd: { type: MarkerType.ArrowClosed },\n            label\n          },\n          eds\n        )\n      );\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === params.source) {\n            const updated = { ...node };\n            if (\n              node.data.type === \"choice\" ||\n              node.data.type === \"multi_choice\"\n            ) {\n              updated.data.options = {\n                ...updated.data.options,\n                [label]: params.target\n              };\n            } else {\n              updated.data.next = params.target;\n            }\n            return updated;\n          }\n          return node;\n        })\n      );\n    },\n    [setEdges, setNodes]\n  );\n\n  const addNode = () => {\n    const newId = nodeCounter.toString();\n    nodeCounter++;\n\n    let newPosition = { x: 100, y: 100 };\n\n    if (selectedNodeId) {\n      const selected = nodes.find((n) => n.id === selectedNodeId);\n      if (selected) {\n        newPosition = {\n          x: selected.position.x + 50,\n          y: selected.position.y + 120\n        };\n      }\n    } else if (nodes.length > 0) {\n      const lowest = nodes.reduce((a, b) =>\n        a.position.y > b.position.y ? a : b\n      );\n      newPosition = {\n        x: lowest.position.x + 50,\n        y: lowest.position.y + 120\n      };\n    }\n\n    const newNode = {\n      id: newId,\n      data: {\n        message: `This is node ${newId}`,\n        type: \"choice\",\n        options: {},\n        capture: \"\",\n        next: \"\"\n      },\n      position: newPosition,\n      type: \"default\"\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const onNodeClick = (_, node) => {\n    setSelectedNodeId(node.id);\n    setSelectedEdgeId(null);\n  };\n\n  const onEdgeClick = (_, edge) => {\n    setSelectedEdgeId(edge.id);\n    setSelectedNodeId(null);\n  };\n\n  const updateNodeField = (field, value) => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === selectedNodeId) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              [field]: value\n            }\n          };\n        }\n        return node;\n      })\n    );\n  };\n\n  const updateEdgeLabel = (newLabel) => {\n    if (!selectedEdge) return;\n\n    const oldLabel = selectedEdge.label;\n    const sourceId = selectedEdge.source;\n    const targetId = selectedEdge.target;\n\n    setEdges((eds) =>\n      eds.map((edge) =>\n        edge.id === selectedEdge.id ? { ...edge, label: newLabel } : edge\n      )\n    );\n\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === sourceId) {\n          const updated = { ...node };\n          if (\n            updated.data.type === \"choice\" ||\n            updated.data.type === \"multi_choice\"\n          ) {\n            const newOptions = { ...updated.data.options };\n            delete newOptions[oldLabel];\n            newOptions[newLabel] = targetId;\n            updated.data.options = newOptions;\n          } else {\n            updated.data.next = targetId;\n          }\n          return updated;\n        }\n        return node;\n      })\n    );\n  };\n\n  const handleNodesChange = useCallback(\n    (changes) => {\n      const deletedNodeIds = changes\n        .filter((change) => change.type === \"remove\")\n        .map((change) => change.id);\n\n      if (deletedNodeIds.length > 0) {\n        setNodes((nds) =>\n          nds.map((node) => {\n            const updated = { ...node };\n\n            if (\n              (updated.data.type === \"choice\" ||\n                updated.data.type === \"multi_choice\") &&\n              updated.data.options\n            ) {\n              const cleanedOptions = Object.entries(updated.data.options).filter(\n                ([, targetId]) => !deletedNodeIds.includes(targetId)\n              );\n              updated.data.options = Object.fromEntries(cleanedOptions);\n            }\n\n            if (deletedNodeIds.includes(updated.data.next)) {\n              updated.data.next = \"\";\n            }\n\n            return updated;\n          })\n        );\n\n        setEdges((eds) =>\n          eds.filter(\n            (edge) =>\n              !deletedNodeIds.includes(edge.source) &&\n              !deletedNodeIds.includes(edge.target)\n          )\n        );\n      }\n\n      onNodesChange(changes);\n    },\n    [onNodesChange, setNodes, setEdges]\n  );\n\n  const exportJSON = () => {\n    const output = {\n      settings: {\n        system_prompt:\n          \"You are MindPeace, a compassionate mental health assistant. Based on the user's shared info and emotional state, continue the conversation empathetically. Always respond warmly and supportively.\",\n        gpt_model: \"gpt-3.5-turbo\"\n      },\n      nodes: {}\n    };\n\n    nodes.forEach((node) => {\n      const { id, data } = node;\n      const { message, type, options, capture, next } = data;\n      const nodeObj = { message, type };\n      if (options && Object.keys(options).length > 0) nodeObj.options = options;\n      if (capture) nodeObj.capture = capture;\n      if (next) nodeObj.next = next;\n      output.nodes[id] = nodeObj;\n    });\n\n    const blob = new Blob([JSON.stringify(output, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"conversation_data.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"w-screen h-screen bg-gray-50 font-sans\">\n      <button\n        onClick={addNode}\n        className=\"absolute top-4 left-4 z-10 bg-blue-600 text-white px-4 py-2 rounded-xl shadow hover:bg-blue-700 transition\"\n      >\n        ➕ Add Node\n      </button>\n      <button\n        onClick={exportJSON}\n        className=\"absolute top-4 left-40 z-10 bg-green-600 text-white px-4 py-2 rounded-xl shadow hover:bg-green-700 transition\"\n      >\n        ⬇️ Export JSON\n      </button>\n\n      {selectedNode && (\n        <div className=\"absolute top-20 left-4 z-10 bg-white p-4 rounded-xl shadow-lg w-80 space-y-3 border border-gray-200\">\n          <h4 className=\"font-bold text-lg text-gray-800\">\n            🛠️ Editing Node: {selectedNode.id}\n          </h4>\n\n          <label className=\"block text-sm font-medium text-gray-700\">Message</label>\n          <textarea\n            value={selectedNode.data.message}\n            onChange={(e) => updateNodeField(\"message\", e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded-md\"\n            rows={3}\n          />\n\n          <label className=\"block text-sm font-medium text-gray-700\">Type</label>\n          <select\n            value={selectedNode.data.type}\n            onChange={(e) => updateNodeField(\"type\", e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded-md\"\n          >\n            <option value=\"choice\">choice</option>\n            <option value=\"input\">input</option>\n            <option value=\"multi_choice\">multi_choice</option>\n            <option value=\"gpt\">gpt</option>\n            <option value=\"end\">end</option>\n          </select>\n\n          <label className=\"block text-sm font-medium text-gray-700\">Capture Field</label>\n          <input\n            type=\"text\"\n            value={selectedNode.data.capture}\n            onChange={(e) => updateNodeField(\"capture\", e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded-md\"\n          />\n\n          <label className=\"block text-sm font-medium text-gray-700\">Next Node ID</label>\n          <input\n            type=\"text\"\n            value={selectedNode.data.next}\n            onChange={(e) => updateNodeField(\"next\", e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded-md\"\n          />\n        </div>\n      )}\n\n      {selectedEdge && (\n        <div className=\"absolute top-20 left-4 z-10 bg-white p-4 rounded-xl shadow-lg w-80 space-y-3 border border-gray-200\">\n          <h4 className=\"font-bold text-lg text-gray-800\">✏️ Editing Edge</h4>\n          <label className=\"block text-sm font-medium text-gray-700\">Option Label</label>\n          <input\n            type=\"text\"\n            value={selectedEdge.label}\n            onChange={(e) => updateEdgeLabel(e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded-md\"\n          />\n        </div>\n      )}\n\n      <ReactFlow\n        nodes={nodes.map((n) => ({\n          ...n,\n          data: { ...n.data, label: n.data.message }\n        }))}\n        edges={allEdges}\n        onNodesChange={handleNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onEdgeClick={onEdgeClick}\n        fitView\n        edgeLabelMode=\"always\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}